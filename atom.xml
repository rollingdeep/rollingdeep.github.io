<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[沉思]]></title>
  <subtitle><![CDATA[万般皆下品，惟有读书高]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-21T14:35:38.251Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Rollingdeep]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[BAT面试准备]]></title>
    <link href="http://yoursite.com/2016/03/21/BAT%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2016/03/21/BAT面试准备/</id>
    <published>2016-03-21T13:44:05.000Z</published>
    <updated>2016-03-21T14:35:38.251Z</updated>
    <content type="html"><![CDATA[<h3 id="算法">算法</h3><h4 id="数组、链表">数组、链表</h4><ol>
<li><a href="http://www.cppblog.com/cxiaojia/archive/2012/07/31/185760" target="_blank" rel="external">http://www.cppblog.com/cxiaojia/archive/2012/07/31/185760</a></li>
<li><a href="http://blog.csdn.net/hackbuteer1/article/details/6591486/" target="_blank" rel="external">http://blog.csdn.net/hackbuteer1/article/details/6591486/</a></li>
<li><a href="http://blog.csdn.net/pony_maggie/article/details/38390513" target="_blank" rel="external">http://blog.csdn.net/pony_maggie/article/details/38390513</a></li>
<li><a href="http://blog.csdn.net/niteip/article/details/11840691" target="_blank" rel="external">AVL</a></li>
<li><a href="http://blog.csdn.net/stpeace/article/details/9067029" target="_blank" rel="external">BST</a></li>
<li><a href="http://www.cnblogs.com/oldhorse/archive/2009/11/16/1604009.html" target="_blank" rel="external">B，B+,B-</a></li>
<li><a href="http://blog.csdn.net/tonyxf121/article/details/8393545" target="_blank" rel="external">http://blog.csdn.net/tonyxf121/article/details/8393545</a></li>
<li><a href="http://blog.csdn.net/chenhuajie123/article/details/11900153" target="_blank" rel="external">http://blog.csdn.net/chenhuajie123/article/details/11900153</a></li>
<li><a href="http://blog.csdn.net/ganggexiongqi/article/details/7449970" target="_blank" rel="external">http://blog.csdn.net/ganggexiongqi/article/details/7449970</a></li>
<li><a href="http://blog.csdn.net/yutianzuijin/article/details/11954939/" target="_blank" rel="external">http://blog.csdn.net/yutianzuijin/article/details/11954939/</a></li>
</ol>
<h4 id="排序">排序</h4><h3 id="Java">Java</h3><h4 id="String，StringBuffer,StringBuilder区别">String，StringBuffer,StringBuilder区别</h4><ol>
<li><a href="http://blog.csdn.net/clam_clam/article/details/6831345" target="_blank" rel="external">http://blog.csdn.net/clam_clam/article/details/6831345</a></li>
<li><a href="http://www.cnblogs.com/xudong-bupt/p/3961159.html" target="_blank" rel="external">http://www.cnblogs.com/xudong-bupt/p/3961159.html</a></li>
</ol>
<h4 id="HashMap和HashMap区别，能否存储空值">HashMap和HashMap区别，能否存储空值</h4><ol>
<li><a href="http://www.cnblogs.com/carbs/archive/2012/07/04/2576995" target="_blank" rel="external">http://www.cnblogs.com/carbs/archive/2012/07/04/2576995</a></li>
<li><a href="http://blog.csdn.net/wl_ldy/article/details/5941770" target="_blank" rel="external">http://blog.csdn.net/wl_ldy/article/details/5941770</a></li>
</ol>
<h4 id="ArrayList和HashMap初始容量">ArrayList和HashMap初始容量</h4><ol>
<li><a href="http://blog.csdn.net/java2000_net/article/details/5215882" target="_blank" rel="external">http://blog.csdn.net/java2000_net/article/details/5215882</a></li>
<li><a href="http://ask.csdn.net/questions/178013" target="_blank" rel="external">http://ask.csdn.net/questions/178013</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_45ff7c3f0100bwan.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_45ff7c3f0100bwan.html</a></li>
<li><a href="http://blog.csdn.net/ghsau/article/details/16890151" target="_blank" rel="external">http://blog.csdn.net/ghsau/article/details/16890151</a></li>
</ol>
<h4 id="并发编程，线程，线程池，加锁">并发编程，线程，线程池，加锁</h4><ol>
<li><a href="http://blog.csdn.net/jackfrued/article/details/44499227" target="_blank" rel="external">并发思想</a></li>
<li><a href="http://www.cnblogs.com/riskyer/p/3263032" target="_blank" rel="external">http://www.cnblogs.com/riskyer/p/3263032</a></li>
<li><a href="http://blog.csdn.net/aboy123/article/details/38307539" target="_blank" rel="external">http://blog.csdn.net/aboy123/article/details/38307539</a></li>
<li><a href="http://blog.jobbole.com/76308/" target="_blank" rel="external">http://blog.jobbole.com/76308/</a></li>
<li><a href="http://developer.51cto.com/art/201509/490965.htm" target="_blank" rel="external">http://developer.51cto.com/art/201509/490965.htm</a></li>
<li><a href="http://blog.csdn.net/yangzhijun_cau/article/details/6432216" target="_blank" rel="external">http://blog.csdn.net/yangzhijun_cau/article/details/6432216</a></li>
<li><a href="http://cuisuqiang.iteye.com/blog/2019372" target="_blank" rel="external">http://cuisuqiang.iteye.com/blog/2019372</a></li>
<li><a href="http://www.cnblogs.com/lxzh/archive/2013/01/20/2868736.html" target="_blank" rel="external">http://www.cnblogs.com/lxzh/archive/2013/01/20/2868736.html</a></li>
</ol>
<h4 id="Comparable和Comparator的区别">Comparable和Comparator的区别</h4><ol>
<li><a href="http://www.cnblogs.com/sunflower627/p/3158042.html" target="_blank" rel="external">http://www.cnblogs.com/sunflower627/p/3158042.html</a></li>
<li><a href="http://www.codeceo.com/article/java-comparable-comparator.html" target="_blank" rel="external">http://www.codeceo.com/article/java-comparable-comparator.html</a></li>
</ol>
<h4 id="GC回收分代和回收">GC回收分代和回收</h4><ol>
<li><a href="http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html" target="_blank" rel="external">http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html</a></li>
<li><a href="http://blog.csdn.net/kennyrose/article/details/7543696" target="_blank" rel="external">http://blog.csdn.net/kennyrose/article/details/7543696</a></li>
</ol>
<h4 id="Collections方法">Collections方法</h4><ol>
<li><a href="http://pengcqu.iteye.com/blog/492196" target="_blank" rel="external">http://pengcqu.iteye.com/blog/492196</a></li>
<li><a href="http://blog.csdn.net/lskyne/article/details/8961014" target="_blank" rel="external">http://blog.csdn.net/lskyne/article/details/8961014</a></li>
<li><a href="http://blog.csdn.net/ameyume/article/details/6282051" target="_blank" rel="external">http://blog.csdn.net/ameyume/article/details/6282051</a></li>
<li><a href="http://www.cnblogs.com/gw811/archive/2012/10/10/2719134.html" target="_blank" rel="external">http://www.cnblogs.com/gw811/archive/2012/10/10/2719134.html</a></li>
</ol>
<h3 id="SQL">SQL</h3><h4 id="SQL基础，group_by等，修改表结构">SQL基础，group by等，修改表结构</h4><ol>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html</a></li>
<li><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="external">http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html</a></li>
<li><a href="http://www.cnblogs.com/daxian2012/articles/2767989.html" target="_blank" rel="external">http://www.cnblogs.com/daxian2012/articles/2767989.html</a></li>
</ol>
<h4 id="缓存机制和MySQL调优">缓存机制和MySQL调优</h4><ol>
<li><a href="http://blog.csdn.net/wulantian/article/details/11043121" target="_blank" rel="external">http://blog.csdn.net/wulantian/article/details/11043121</a></li>
<li><a href="http://blog.csdn.net/gzh0222/article/details/8001362" target="_blank" rel="external">http://blog.csdn.net/gzh0222/article/details/8001362</a></li>
<li><a href="http://www.cnblogs.com/adforce/archive/2012/06/02/2532086.html" target="_blank" rel="external">http://www.cnblogs.com/adforce/archive/2012/06/02/2532086.html</a></li>
<li><a href="http://www.cnblogs.com/not-code/archive/2011/11/01/2231493.html" target="_blank" rel="external">http://www.cnblogs.com/not-code/archive/2011/11/01/2231493.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[一年一度的BAT校招，千军万马过独木桥。失败，别气馁，勇敢向前冲！]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[互动派面试回忆]]></title>
    <link href="http://yoursite.com/2016/03/17/%E4%BA%92%E5%8A%A8%E6%B4%BE%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86/"/>
    <id>http://yoursite.com/2016/03/17/互动派面试回忆/</id>
    <published>2016-03-17T07:35:36.000Z</published>
    <updated>2016-03-17T09:09:35.339Z</updated>
    <content type="html"><![CDATA[<h3 id="笔试">笔试</h3><ol>
<li>linux查看系统目录</li>
<li>linux结束一个用户的进程，用管道的方式</li>
<li>单例模式</li>
<li>设计模式</li>
<li>浏览器输入URL到收到页面内容发生了什么？</li>
<li>MapReduce,HDFS,HBase,Hive等都用在什么情形</li>
<li>怎样用O(1)的空间复杂度和O(n)的时间复杂度旋转单链表</li>
<li>怎么确定单链表是否有环</li>
</ol>
<h3 id="面试">面试</h3><ol>
<li>怎么从重复的电话号码中查找出电话号码和重复次数，写出mysql</li>
<li>简历中模型里面的实现</li>
<li>SVM中如何判断一个进行分类的</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[塔布数据]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CVTE面试回忆]]></title>
    <link href="http://yoursite.com/2016/03/17/CVTE%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86/"/>
    <id>http://yoursite.com/2016/03/17/CVTE面试回忆/</id>
    <published>2016-03-17T07:02:36.000Z</published>
    <updated>2016-03-17T07:36:18.355Z</updated>
    <content type="html"><![CDATA[<h3 id="笔试">笔试</h3><ol>
<li><a href="http://wenku.baidu.com/link?url=u5nwwseVQMZZgdG0LYac0ve8D5XSXvAktz5Y9SG7XDExPb6xIBHBNn3GzcaDLRiD6l4GZbLvCpwSQloFQRWuah3wu54zAd3hKbUNbwJrCe7" target="_blank" rel="external">笔试题文档</a></li>
<li>笔试程序题：两个班成绩从高到低存放list1、list2怎样才能得到全年级的成绩？（假设全年级只有两个班）</li>
</ol>
<h3 id="技术面试">技术面试</h3><ol>
<li>hibernate优化</li>
<li>HashMap的结构、能不能存空值，HashTable能不能存空值 ArrayList的初始容量</li>
<li>LinkedList和ArrayList的区别</li>
<li>多线程的实现方式、加锁用过吗、线程池有没有接触过</li>
<li>怎么样自定义比较两个对象，提示Comparable和Comparator区别。</li>
<li>青蛙一次跳一步一次跳两步解决方法？（写出了递归方法，主考官还问到，这种方法的弊端；然后又写了个迭代方法）</li>
<li>sql，为什么mysql是小型数据库（后来想想答错了，应该是mysql并发量小，数据量不大）</li>
<li>写出mysql，学生表id name, 课程表 id course , 成绩表 stuid couid score.查询成绩大于两百分的学生名和分数</li>
<li>和导师的关系怎么样？导师如何评价你</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[短短CVTE二面结束了]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[腾讯OMG一面]]></title>
    <link href="http://yoursite.com/2016/03/02/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/03/02/腾讯一面/</id>
    <published>2016-03-02T02:01:37.000Z</published>
    <updated>2016-03-17T08:52:33.323Z</updated>
    <content type="html"><![CDATA[<h3 id="区域">区域</h3><h4 id="首先第一个问题就是，你对你工作的城市有没有限制？">首先第一个问题就是，你对你工作的城市有没有限制？</h4><ol>
<li>这个是在问你对我们事业群的位置有没有了解。比如腾讯OMG是在北京，而我目前是在广州，<br>你会觉得有点远。对于我嘛，我觉得没什么问题，毕竟我是一个人，没那么多牵挂。</li>
<li>当然如果你回答不想去北京，基本一面就结束了(一同学亲身经历)。</li>
</ol>
<h3 id="项目">项目</h3><h4 id="你最拿手的项目是哪个？">你最拿手的项目是哪个？</h4><p>从项目简介到项目架构来说，和使用的技术。</p>
<h4 id="你熟悉哪些前端js框架？">你熟悉哪些前端js框架？</h4><p>如EXT JS,DWR,Amazi UI,Bootstrap,Angular js等等。</p>
<h4 id="你熟悉哪些除了主流数据库mysql以外的数据库">你熟悉哪些除了主流数据库mysql以外的数据库</h4><p>mangodb,redis,nosql。</p>
<h4 id="MVC设计模式有什么好处？">MVC设计模式有什么好处？</h4><p>MVC设计模式优点在于:<br>1):测试友好性(如果你需要写单元测试的话,MVC会很不错的)<br>2):可定制性(在MVC中基本上所有的东西都是可以定制的,对于某些定制性要求比较高的工作可以轻易胜任)<br>3):代码清晰(CodeBehind虽说分离的不错,但是还是有很多人直接在CodeBehind里面写SQL的)<br>4):轻量级.(没有控件,没有视图状态,没有控件状态,页面加载速度快)<br>5):对HTML的控制比较深,比如div的id之类的(好吧,ASP.NET WebForm 4.0也加深了控制允许你控制控件生成的html的id)只有对HTML的结构比较清晰才容易写脚本不是.<br>6):开源.</p>
<p>MVC的不足体现在以下几个方面：<br>1):增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。<br>2):视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。<br>3):视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。<br>4):目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。</p>
<h4 id="java语言的优劣？">java语言的优劣？</h4><p>这个没答完全。<br>优点：简单性、面向对象、分布式、解释型、可靠、安全、平台无关、可移植、高性能、多线程、动态性等。<br>缺点：<br>第一: 运行速度慢，众所周知，Java程序的运行依赖于Java虚拟机，所以相对于其他语言(汇编,C,C++)编写的程序慢，因为它不是直接，执行机器码。<br>第二: 因为Java考虑到了跨平台性。所以他不能像语言<br>（例如:汇编,C) 那样更接近操作系统。也就不能和操作系统的底层打交道了。但可以通过Java的JNI<br>(即Java本地接口。顾名思义：也就是利用Java语言调用，在当前系统上 其他的程序语言 “汇编或C等”所编写的程序)技术，解决这一问题，但这只是解决了。</p>
<h4 id="如果要你重新学习php的话，你应该怎么学习它呢？">如果要你重新学习php的话，你应该怎么学习它呢？</h4><p>先看看php基本语法，然后再看设计思想和框架，最后在实战中一步一步的修炼。</p>
]]></content>
    <summary type="html">
    <![CDATA[昨晚的腾讯网络媒体事业群后台面试相关内容，record一下！]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[医疗健康管理系统APP]]></title>
    <link href="http://yoursite.com/2016/03/01/%E5%8C%BB%E7%96%97%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FAPP/"/>
    <id>http://yoursite.com/2016/03/01/医疗健康管理系统APP/</id>
    <published>2016-03-01T08:43:41.000Z</published>
    <updated>2016-03-01T09:11:43.980Z</updated>
    <content type="html"><![CDATA[<h3 id="Self_Diagnose">Self Diagnose</h3><ol>
<li>输入手环或者智能终端测试的数据提交到后台分析得病的潜在概率。</li>
<li>用手机按住摄像头读取红色色素点傅里叶变换成心率曲线。<br><img src="/uploads/fig3.png" alt="self diagnose"></li>
</ol>
<h3 id="Diet_Analysis">Diet Analysis</h3><p>读取并拍摄获取手机里的食物照片，分析食物的分量如含糖量，碳水化合物的含量。<br><img src="/uploads/fig4.png" alt="diet analysis"></p>
<h3 id="Recommendation">Recommendation</h3><p>根据前两者给出相关饮食和生活建议。<br><img src="/uploads/fig5.png" alt="recommendation"></p>
<h3 id="Find_Doctor">Find Doctor</h3><p>根据百度地图定位周边医生，发送自己的身体状况分析报告，并可以和医生在线聊天询问病情发展。<br><img src="/uploads/fig6.png" alt="find doctor"></p>
]]></content>
    <summary type="html">
    <![CDATA[论文demo中的一个小android程序，大部分实现过程都是之前发过的Android教程。]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之相机相册服务调用]]></title>
    <link href="http://yoursite.com/2015/12/22/Android%E4%B9%8B%E7%9B%B8%E6%9C%BA%E7%9B%B8%E5%86%8C%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2015/12/22/Android之相机相册服务调用/</id>
    <published>2015-12-22T06:38:43.000Z</published>
    <updated>2015-12-23T07:10:20.406Z</updated>
    <content type="html"><![CDATA[<h3 id="相册服务">相册服务</h3><ol>
<li>判断是否有外存</li>
<li>通过startActivityForResult(intent, MainActivity.GALLERY_REQUET)返回主Activity获得result.</li>
<li>重写方法 protected void onActivityResult(int requestCode, int resultCode, Intent data);</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 调用相册服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>&#123;</span><br><span class="line">         Intent intent = <span class="keyword">null</span>;</span><br><span class="line">         String state = Environment.getExternalStorageState();  </span><br><span class="line">         <span class="keyword">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;  </span><br><span class="line">             intent=<span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">             intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">             intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">             intent.putExtra(<span class="string">"cameraPhoto"</span>, <span class="keyword">true</span>);</span><br><span class="line">             startActivityForResult(intent, MainActivity.GALLERY_REQUET);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                 Toast.makeText(<span class="keyword">this</span>, <span class="string">"请确认已经插入SD卡"</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">             &#125;  </span><br><span class="line">             Log.i(<span class="string">"Target"</span>, <span class="string">"选取照片"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="相机服务">相机服务</h3><p>这里给出的就是拍照并根据时间保存相片，然后image_path作为全局变量，在onActivityResult(int requestCode, int resultCode, Intent data);继续使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 调用相机服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeCamera</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory()+File.separator+Environment.DIRECTORY_DCIM;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="annotation">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</span><br><span class="line">            String temName = <span class="keyword">new</span> DateFormat().format(<span class="string">"yyMMdd_hhmmss"</span>,System.currentTimeMillis()) + <span class="string">"_"</span> + (Math.random()*<span class="number">100</span>)+<span class="string">".jpg"</span>;</span><br><span class="line">            image_path = path + File.separator + temName;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Uri uri=Uri.fromFile(file);</span><br><span class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); </span><br><span class="line">            startActivityForResult(intent, CAMERA_REQUEST);</span><br><span class="line">            Log.i(<span class="string">"Target"</span>, <span class="string">"照相"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="onActivityResult">onActivityResult</h3><p>在Activity跳转中很常用<br>这里用于系统服务和我们程序跳转，我想原理应该类似<br>onActivityResult(int requestCode, int resultCode, Intent data)不多说，生命周期<br>WARNING：</p>
<ol>
<li>CAMERA_REQUEST中是通过image_path生成File再生成的Uri，没有使用Intent data中的数据</li>
<li>在Fragment中调用MainActivity时候要强转为Activity类，即((MainActivity)getActivity()).takeCamera();<br>这两点我在做的时候，疑惑了好久！后来发现，不难理解</li>
</ol>
<h3 id="源代码">源代码</h3><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap photo;</span><br><span class="line">    <span class="comment">//系统参数</span></span><br><span class="line">    <span class="keyword">private</span> String image_path;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(requestCode == CAMERA_REQUEST &amp;&amp; resultCode == RESULT_OK)&#123;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Uri uri = Uri.fromFile(file);</span><br><span class="line">                BitmapFactory.Options options=<span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">                options.inJustDecodeBounds=<span class="keyword">true</span>;                </span><br><span class="line">                BitmapFactory.decodeStream(getContentResolver().openInputStream(uri), <span class="keyword">null</span>, options);</span><br><span class="line">                options.inSampleSize=<span class="number">4</span>;</span><br><span class="line">                options.inJustDecodeBounds=<span class="keyword">false</span>;</span><br><span class="line">                Bitmap map=BitmapFactory.decodeStream(getContentResolver().openInputStream(uri), <span class="keyword">null</span>, options);</span><br><span class="line">                android.provider.MediaStore.Images.Media.insertImage(getContentResolver(), map, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                sendBroadcast(<span class="keyword">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));</span><br><span class="line"><span class="comment">//              image.setImageBitmap(map);</span></span><br><span class="line">                photo = map;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(requestCode == GALLERY_REQUET &amp;&amp; resultCode == RESULT_OK)&#123;</span><br><span class="line">            ContentResolver resolver = getContentResolver();</span><br><span class="line">            Uri selectedImage = data.getData();  </span><br><span class="line">            String[] filePathColumn = &#123; MediaStore.Images.Media.DATA &#125;;  </span><br><span class="line">       </span><br><span class="line">            Cursor cursor = resolver.query(selectedImage,  </span><br><span class="line">                     filePathColumn, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">            cursor.moveToFirst();  </span><br><span class="line">            <span class="keyword">int</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class="number">0</span>]);  </span><br><span class="line">            String choosePicturePath = cursor.getString(columnIndex);  </span><br><span class="line">            cursor.close(); </span><br><span class="line">            Log.i(<span class="string">"Target"</span>,choosePicturePath);</span><br><span class="line">            photo = BitmapFactory.decodeFile(choosePicturePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================华丽丽的分割线============================</span></span><br><span class="line"><span class="comment">//=========================调用系统服务============================</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 调用相机服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeCamera</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory()+File.separator+Environment.DIRECTORY_DCIM;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="annotation">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</span><br><span class="line">            String temName = <span class="keyword">new</span> DateFormat().format(<span class="string">"yyMMdd_hhmmss"</span>,System.currentTimeMillis()) + <span class="string">"_"</span> + (Math.random()*<span class="number">100</span>)+<span class="string">".jpg"</span>;</span><br><span class="line">            image_path = path + File.separator + temName;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Uri uri=Uri.fromFile(file);</span><br><span class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); </span><br><span class="line">            startActivityForResult(intent, CAMERA_REQUEST);</span><br><span class="line">            Log.i(<span class="string">"Target"</span>, <span class="string">"照相"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 调用相册服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>&#123;</span><br><span class="line">         Intent intent = <span class="keyword">null</span>;</span><br><span class="line">         String state = Environment.getExternalStorageState();  </span><br><span class="line">         <span class="keyword">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;  </span><br><span class="line">             intent=<span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">             intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">             intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">             intent.putExtra(<span class="string">"cameraPhoto"</span>, <span class="keyword">true</span>);</span><br><span class="line">             startActivityForResult(intent, MainActivity.GALLERY_REQUET);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                 Toast.makeText(<span class="keyword">this</span>, <span class="string">"请确认已经插入SD卡"</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">             &#125;  </span><br><span class="line">             Log.i(<span class="string">"Target"</span>, <span class="string">"选取照片"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[相机相册很常用，分享下！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之异步任务AsyncTask]]></title>
    <link href="http://yoursite.com/2015/12/21/Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2015/12/21/Android之异步任务/</id>
    <published>2015-12-21T05:56:35.000Z</published>
    <updated>2015-12-23T07:10:21.716Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p>
</blockquote>
<h3 id="AsyncTask介绍">AsyncTask介绍</h3><p>AsyncTask源码中有写到如何通过ThreadFactory管理Thread线程,不多介绍。<br>主要参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AsyncTask&lt;Params, Progress, Result&gt;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Params 启动任务执行的输入参数，比如HTTP请求的URL。</li>
<li>Progress 后台任务执行的百分比。</li>
<li>Result 后台执行任务最终返回的结果，比如String。<br>主要方法：</li>
<li>onPreExecute()    线程开始前执行(仍然是主线程)</li>
<li>doInBackground(Void… params)    异步执行(异步线程)</li>
<li>onPostExecute(String result)  线程结束后(主线程)</li>
<li>onProgressUpdate(Progress…) 进度条数据(主线程)</li>
</ul>
<h3 id="AsyncTask实例">AsyncTask实例</h3><p>场景:Fragment A提交数据给服务器，服务器返回数据给Fragment B,并更新B的UI</p>
<ol>
<li>Fragment A中写入内部类，写入异步任务</li>
<li>onPreExecute()组建json格式数据，以url参数传值给服务器端</li>
<li>doInBackground(Void… params)执行http请求，根据返回码判断执行是否请求成功！发送消息给主线程</li>
<li>handler中接收消息解析code,并解析msg.obj，设置Activity全局变量setter</li>
<li>onPostExecute(String result) 执行Fragment跳转</li>
<li>Fragment加载Activity全局变量getter进入其UI数据<br>SUCCESS!</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncImageTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> StringBuilder url= <span class="keyword">new</span> StringBuilder(<span class="string">"http://10.0.3.2:8080/medical_big_data/servlet/androidRequest?"</span>);</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            JSONObject status = <span class="keyword">new</span> JSONObject();  </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                status.put(<span class="string">"Age"</span>, dis_tv1.getText());</span><br><span class="line">                status.put(<span class="string">"Height"</span>, dis_tv2.getText());</span><br><span class="line">                status.put(<span class="string">"Weight"</span>, dis_tv3.getText());              </span><br><span class="line">           &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">               <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           Log.i(<span class="string">"Target"</span>, status.toString());</span><br><span class="line">           url.append(<span class="string">"json=["</span>+status.toString()+<span class="string">"]"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> code;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               URL url = <span class="keyword">new</span> URL(<span class="keyword">this</span>.url.toString());</span><br><span class="line">               <span class="comment">/**</span><br><span class="line">                * 这里网络请求使用的是类HttpURLConnection，另外一种可以选择使用类HttpClient。</span><br><span class="line">                */</span></span><br><span class="line">               HttpURLConnection conn = (HttpURLConnection) url</span><br><span class="line">                       .openConnection();</span><br><span class="line">               conn.setRequestMethod(<span class="string">"GET"</span>);<span class="comment">//使用GET方法获取</span></span><br><span class="line">               conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">               code = conn.getResponseCode();</span><br><span class="line">               Log.i(<span class="string">"Target"</span>, code+<span class="string">""</span>);</span><br><span class="line">               <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="comment">/**</span><br><span class="line">                    * 如果获取的code为200，则证明数据获取是正确的。</span><br><span class="line">                    */</span></span><br><span class="line">                   InputStream is = conn.getInputStream();</span><br><span class="line">                   String result = HttpUtils.readMyInputStream(is);</span><br><span class="line">                   </span><br><span class="line">                   <span class="comment">/**</span><br><span class="line">                    * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。</span><br><span class="line">                    */</span></span><br><span class="line">                   Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                   msg.obj = result;</span><br><span class="line">                   msg.what = SUCCESS;</span><br><span class="line">                   handler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               </span><br><span class="line">                   Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                   msg.what = ERRORCODE;</span><br><span class="line">                   handler.sendMessage(msg);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="comment">/**</span><br><span class="line">                * 如果获取失败，或出现异常，那么子线程发送失败的消息（FAILURE）到主线程，主线程显示Toast，来告诉使用者，数据获取是失败。</span><br><span class="line">                */</span></span><br><span class="line">               Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">               msg.what = FAILURE;</span><br><span class="line">               handler.sendMessage(msg);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">           MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">           FragmentTransaction transaction =getFragmentManager().beginTransaction();</span><br><span class="line">           transaction.replace(R.id.content,mpFragment);</span><br><span class="line">           transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">           transaction.commit();</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="异步线程和主线程通信">异步线程和主线程通信</h3><p>Message类<br>[int] msg.what 主要是设置code,可参看Message源码英文解释<br>[Object] msg.obj 主要是返回的数据对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。</span><br><span class="line"> */</span></span><br><span class="line">    Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">    msg.obj = result;</span><br><span class="line">    msg.what = SUCCESS;</span><br><span class="line">    handler.sendMessage(msg);</span><br></pre></td></tr></table></figure></p>
<h3 id="主线程接收Message类Handler">主线程接收Message类Handler</h3><p>必须实现handleMessage接收消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Subclasses must implement this to receive messages.</span><br><span class="line"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> SUCCESS:</span><br><span class="line">                <span class="comment">/**</span><br><span class="line">                 * 获取信息成功后，对该信息进行JSON解析，得到所需要的信息，然后在textView上展示出来。</span><br><span class="line">                 */</span></span><br><span class="line">                JSONAnalysis(msg.obj.toString());</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"获取数据成功"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                .show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> FAILURE:</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"获取数据失败"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> ERRORCODE:</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"获取的CODE码不为200！"</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[Android项目中有时候会用到url请求服务器数据，比如登陆后加载个人信息数据和图片。这里介绍一个android中的异步任务AsyncTask]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="AsyncTask" scheme="http://yoursite.com/tags/AsyncTask/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之SharedPreferences存储数据]]></title>
    <link href="http://yoursite.com/2015/12/20/Android%E4%B9%8BSharedPreferences%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2015/12/20/Android之SharedPreferences存储数据/</id>
    <published>2015-12-20T10:57:03.000Z</published>
    <updated>2015-12-23T07:10:23.959Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>SharedPreferences一般是用于系统设置数据的存储，在项目中我用在了Fragment返回前一个Fragment，保证前一个Fragment数据不丢失！</p>
</blockquote>
<h3 id="SharedPreferences基本存取">SharedPreferences基本存取</h3><h4 id="存数据">存数据</h4><p>SharedPreferences.Editor  一个类似map的东西，生成键值对，存入xml中。</p>
<ul>
<li>我这个是写在Fragment中，所以要getActivity();</li>
<li>你也可以写个静态方法在MainActivity中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">/**</span><br><span class="line">  * 存入SharedPreferences</span><br><span class="line">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化SharedPreferences对象（第一步） </span></span><br><span class="line">    SharedPreferences mySharedPreferences= getActivity().getSharedPreferences(<span class="string">"bodyinfo"</span>, </span><br><span class="line">    Activity.MODE_PRIVATE); </span><br><span class="line">    <span class="comment">//实例化SharedPreferences.Editor对象（第二步） </span></span><br><span class="line">    SharedPreferences.Editor editor = mySharedPreferences.edit(); </span><br><span class="line">    <span class="comment">//用putString的方法保存数据 </span></span><br><span class="line">    editor.putString(<span class="string">"Age"</span>, dis_tv1.getText().toString());</span><br><span class="line">    editor.putString(<span class="string">"Height"</span>, dis_tv2.getText().toString());</span><br><span class="line">    editor.putString(<span class="string">"Weight"</span>, dis_tv3.getText().toString());    </span><br><span class="line">    <span class="comment">//提交当前数据 </span></span><br><span class="line">    editor.commit(); </span><br><span class="line">    <span class="comment">//使用toast信息提示框提示成功写入数据 </span></span><br><span class="line">    Toast.makeText(getActivity(), <span class="string">"数据成功写入SharedPreferences！"</span> , Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="取数据">取数据</h4><p>写入控件中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 取SharedPreferences数据</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SharedPreferences sharedPreferences= getActivity().getSharedPreferences(<span class="string">"bodyinfo"</span>, </span><br><span class="line">                Activity.MODE_PRIVATE); </span><br><span class="line">                <span class="comment">// 使用getString方法获得value，注意第2个参数是value的默认值 </span></span><br><span class="line">                dis_tv1.setText(sharedPreferences.getString(<span class="string">"Age"</span>, <span class="string">""</span>));</span><br><span class="line">                dis_tv2.setText(sharedPreferences.getString(<span class="string">"Height"</span>, <span class="string">""</span>));</span><br><span class="line">                dis_tv3.setText(sharedPreferences.getString(<span class="string">"Weight"</span>, <span class="string">""</span>));        </span><br><span class="line">                <span class="comment">//使用toast信息提示框显示信息 </span></span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"读取数据如下成功"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Fragment跳转Fragment数据不丢失">Fragment跳转Fragment数据不丢失</h3><ul>
<li>跳转前A将数据存储到SharedPreferences中</li>
<li>跳转B后返回时候加载<br>  通过A设置全局变量mStack，在每次跳转时候，mStack++;<br>  当然你会问mStack在transaction.replace()方法时候移除了，在加载又是初始值。看下一条</li>
<li>为了保存Fragment中的变量，一般会重写onSaveInstanceState(Bundle outState)和 onCreate(Bundle savedInstanceState) 。一个存一个取</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">         outState.putInt(<span class="string">"level"</span>, mStackLevel);</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">             mStackLevel = savedInstanceState.getInt(<span class="string">"level"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后，在onCreateView重新加载视图<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mStackLevel != <span class="number">0</span>)&#123;</span><br><span class="line">                    outStore();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[SharedPreferences一般是用于系统设置数据的存储，在项目中我用在了Fragment返回前一个Fragment，保证前一个Fragment数据不丢失！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="SharedPreferences" scheme="http://yoursite.com/tags/SharedPreferences/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android之自定义Dialog]]></title>
    <link href="http://yoursite.com/2015/12/19/android%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89dialog/"/>
    <id>http://yoursite.com/2015/12/19/android之自定义dialog/</id>
    <published>2015-12-19T09:20:58.000Z</published>
    <updated>2015-12-23T07:09:34.574Z</updated>
    <content type="html"><![CDATA[<h3 id="自定义Dialog">自定义Dialog</h3><h4 id="自定义Dialog的创建">自定义Dialog的创建</h4><ol>
<li>定义控件，</li>
<li>onCreate()加载视图view</li>
<li>设置控件的监听事件</li>
<li>设置一个内部接口，定义抽象监听方法</li>
<li>构造方法回调listener</li>
</ol>
<p>ChooseDialog.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChooseDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Button btn_take_photo;</span><br><span class="line">    <span class="keyword">private</span> Button btn_pick_photo;</span><br><span class="line">    <span class="keyword">private</span> Button btn_pick_cancel;</span><br><span class="line">    <span class="keyword">private</span> ChooserDialogListener listener;    </span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChooserDialogListener</span></span>&#123;   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChoose</span><span class="params">(View view)</span></span>;   </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ChooseDialog</span><span class="params">(Context context,<span class="keyword">int</span> theme,ChooserDialogListener listener)</span> </span>&#123;   </span><br><span class="line">         <span class="keyword">super</span>(context,theme);  </span><br><span class="line">         <span class="keyword">this</span>.listener = listener;</span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="annotation">@Override</span>   </span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;   </span><br><span class="line">         <span class="keyword">super</span>.onCreate(savedInstanceState);   </span><br><span class="line">         setContentView(R.layout.imgchooser_dialog);   </span><br><span class="line">         initViews();   </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>&#123;   </span><br><span class="line">        btn_take_photo = (Button)findViewById(R.id.btn_take_photo);   </span><br><span class="line">        btn_pick_photo = (Button)findViewById(R.id.btn_pick_photo);   </span><br><span class="line">        btn_pick_cancel = (Button)findViewById(R.id.btn_pick_cancel);   </span><br><span class="line">    </span><br><span class="line">        btn_take_photo.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">        btn_pick_photo.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">        btn_pick_cancel.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="annotation">@Override</span>   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123; </span><br><span class="line">         listener.onChoose(v); </span><br><span class="line">         <span class="keyword">this</span>.dismiss();</span><br><span class="line">     &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Dialog调用">Dialog调用</h4><ol>
<li>直接使用,初始化之后，dialog.show();</li>
<li>DialogFragment中onCreateDialog(Bundle savedInstanceState)返回</li>
</ol>
<p>源代码:DialogFragment.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ChooseDialog  dialog = <span class="keyword">new</span> ChooseDialog(getActivity(),R.style.ActionTheme,   </span><br><span class="line">                 <span class="keyword">new</span> ChooserDialogListener() &#123;   </span><br><span class="line">             <span class="annotation">@Override</span>   </span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChoose</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">switch</span>(view.getId())&#123; </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_take_photo:</span><br><span class="line">                         ((MainActivity)getActivity()).takeCamera();</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_pick_photo:</span><br><span class="line">                         ((MainActivity)getActivity()).takePhoto();</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_pick_cancel:</span><br><span class="line">                         Log.i(<span class="string">"Target"</span>, <span class="string">"取消"</span>);</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//TODO 分析图片</span></span><br><span class="line">             &#125;   </span><br><span class="line">     &#125;);  </span><br><span class="line">        </span><br><span class="line">    dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    Window window = dialog.getWindow();</span><br><span class="line">    <span class="comment">//dialog全屏</span></span><br><span class="line">    window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">    lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">    lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">    window.setAttributes(lp);</span><br><span class="line">    <span class="comment">//dialog显示在底层</span></span><br><span class="line">    window.setGravity(Gravity.BOTTOM);</span><br><span class="line">    window.setWindowAnimations(R.style.mystyle); </span><br><span class="line">    <span class="comment">//直接调用的话</span></span><br><span class="line">    <span class="comment">//dialog.show();</span></span><br><span class="line">    <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="AlertDialog简单示例">AlertDialog简单示例</h3><p>介绍：alert上有两个Numberpicker，一个Numberpicker为整数，一个Numberpicker表示小数点后一位。<br>通过AlertDialog.Builder去直接生成一个builder.create()生成一个Dialog,可以自己参看android源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> <span class="keyword">implements</span> <span class="title">OnValueChangeListener</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">        <span class="comment">// Get the layout inflater</span></span><br><span class="line">        LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">        View view = inflater.inflate(R.layout.dialog, <span class="keyword">null</span>);</span><br><span class="line">        np_integer = (NumberPicker) view.findViewById(R.id.np_integer);</span><br><span class="line">        np_integer.setMinValue(<span class="number">0</span>);</span><br><span class="line">        np_integer.setMaxValue(<span class="number">999</span>);</span><br><span class="line">        np_integer.setOnValueChangedListener(<span class="keyword">this</span>);</span><br><span class="line">        np_decimal = (NumberPicker) view.findViewById(R.id.np_decimal);</span><br><span class="line">        np_decimal.setMinValue(<span class="number">0</span>);</span><br><span class="line">        np_decimal.setMaxValue(<span class="number">9</span>);</span><br><span class="line">        np_decimal.setOnValueChangedListener(<span class="keyword">this</span>);</span><br><span class="line">        builder.setView(view)</span><br><span class="line">                .setTitle(<span class="string">"PLEASE INPUT AND SAVE"</span>)</span><br><span class="line">                <span class="comment">// Add action buttons</span></span><br><span class="line">                .setPositiveButton(<span class="string">"Confirm"</span>,</span><br><span class="line">                        <span class="keyword">new</span> DialogInterface.OnClickListener()</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="annotation">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span><br><span class="line">                            </span>&#123;</span><br><span class="line">                                Log.i(<span class="string">"Target"</span>, getTargetFragment().getClass().getName());</span><br><span class="line">                                LoginInputListener listener = (LoginInputListener) getTargetFragment();</span><br><span class="line">                                <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">                                listener.onLoginInputComplete(result);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    onValueChange <span class="comment">//不写了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和Dialog一样 如果需要传值，它的调用处，去实现接口LoginInputListener,就可以先显示出来。<br>android传值，之前有写过一篇！传值其实都是类似，内部类，内部接口，似有变量设置getter,setter</p>
]]></content>
    <summary type="html">
    <![CDATA[android中常用的一个就是弹框，比如微信添加图片低栏会弹框一个选择相机，照片，取消三个按钮！最近medical的项目中使用到了。分享下心得！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Dialog" scheme="http://yoursite.com/tags/Dialog/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android之Fragment跳转与传值]]></title>
    <link href="http://yoursite.com/2015/12/17/android%E4%B9%8BFragment%E8%B7%B3%E8%BD%AC%E4%B8%8E%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2015/12/17/android之Fragment跳转与传值/</id>
    <published>2015-12-17T12:13:57.000Z</published>
    <updated>2015-12-23T06:39:14.184Z</updated>
    <content type="html"><![CDATA[<h3 id="Fragment跳转">Fragment跳转</h3><ul>
<li>开启碎片事务</li>
<li>添加，删除，替换碎片</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">transaction.replace(R.id.content,mpFragment);</span><br><span class="line">transaction.add(R.id.content,mpFragment);</span><br><span class="line">transaction.remove(R.id.content,mpFragment);</span><br></pre></td></tr></table></figure>
<ul>
<li>添加到返回栈中(可选)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>提交事务，commit()!!!!!</li>
</ul>
<h4 id="Fragment跳转Fragment">Fragment跳转Fragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">FragmentTransaction transaction =getFragmentManager().beginTransaction();</span><br><span class="line">transaction.replace(R.id.content,mpFragment);</span><br><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure>
<h4 id="Activity舔砖Fragment">Activity舔砖Fragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">DietFragment dietFragment;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (dietFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果Fragment为空，则创建一个并添加到界面上</span></span><br><span class="line">                dietFragment = <span class="keyword">new</span> DietFragment();</span><br><span class="line">                transaction.add(R.id.content, dietFragment);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果Fragment不为空，则直接将它显示出来</span></span><br><span class="line">                transaction.show(dietFragment);</span><br><span class="line">            &#125;</span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure>
<h3 id="Frament传值">Frament传值</h3><h4 id="Acitivity传值给Fragment,同Activity下Fragment传值给Fragment">Acitivity传值给Fragment,同Activity下Fragment传值给Fragment</h4><ul>
<li>直接在Activity中添加全局变量,并设置getter和setter<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,Double&gt; percentMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAcitvity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Double&gt; getPercentMap() &#123;</span><br><span class="line">    <span class="keyword">return</span> percentMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPercentMap</span><span class="params">(Map&lt;String, Double&gt; percentMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.percentMap = percentMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Fragment传值给Activity">Fragment传值给Activity</h4><ul>
<li>在Fragment中写个内部接口</li>
<li>让宿主去实现该接口</li>
<li>在Fragment事件中强转宿主为该接口变为实例，返回给宿主</li>
<li>宿主实现接口中方法，获得结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fragment部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        LoginInputListener listener = (LoginInputListener) getTargetFragment();</span><br><span class="line">        <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">        listener.onLoginInputComplete(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">LoginInputListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"輸入的數字是："</span> + result,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Fragment传值给Fragment（方法2）">Fragment传值给Fragment（方法2）</h4><ul>
<li>为了防止混淆，这个方法和上面基本一致，仔细阅读便可发现.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fragment部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        LoginInputListener listener = (LoginInputListener) getActivity();</span><br><span class="line">        <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">        listener.onLoginInputComplete(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">LoginInputListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"輸入的數字是："</span> + result,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Fragment是android3.0引入的一个模块，很常用，也方便了布局！可以利用Fragment实现灵活的布局，改善用户体验。]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Fragment" scheme="http://yoursite.com/tags/Fragment/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[INSIST ON!]]></title>
    <link href="http://yoursite.com/2015/12/16/Insist-on-doing-one-thing/"/>
    <id>http://yoursite.com/2015/12/16/Insist-on-doing-one-thing/</id>
    <published>2015-12-16T11:55:43.000Z</published>
    <updated>2015-12-21T14:56:58.141Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>业精于勤荒于嬉，行成于思毁于随！        —     韩愈 ·《劝学解》<br>善始者实繁，克终者盖寡！                —     魏征 ·《谏太宗十思疏》</p>
</blockquote>
<h2 id="Latest_Works">Latest Works</h2><h3 id="2015/12/16">2015/12/16</h3><ol>
<li>学习完成了android项目SHMS中的Fragment跳转和传值.</li>
<li>异步 URL json传值访问web服务器,并返回需要的json,异步完成后跳转Fragment并加载json数据.</li>
<li>Fragment上点击TextView事件跳转DialogFragment. </li>
<li>搭建weka学习maven项目，预处理股票数据生成.arff数据格式。</li>
</ol>
<h3 id="2015/12/17">2015/12/17</h3><ol>
<li>weka api学习,学会了加载不同的分类器</li>
<li>weka数据文件.arff，java自动写入格式</li>
<li>weka实例的增量加载方式，增量训练与预测</li>
<li>指导师弟毕设。</li>
</ol>
<h3 id="2015/12/20">2015/12/20</h3><ol>
<li>SharedPreferences保存用户输入的数据，返回前一个Fragment保证数据不丢失！</li>
<li>自定义dialog,写入按钮，设置按钮的监听事件。</li>
<li>解决了读取照片，放入ImageView里。</li>
<li>哎，我的博客又没有写!</li>
</ol>
<h3 id="2015/12/21">2015/12/21</h3><ol>
<li>android拍照和照片代码重构，</li>
<li>百度地图key总是有问题，转入高德。my god,help me!</li>
<li>高德地图key找不到!!</li>
<li>哎，我的博客又没有写!</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Let's not start with a bang and end with a whimper！]]>
    
    </summary>
    
      <category term="September" scheme="http://yoursite.com/tags/September/"/>
    
      <category term="Emotion" scheme="http://yoursite.com/categories/Emotion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Window下sublime+latex配置]]></title>
    <link href="http://yoursite.com/2015/12/06/Window%E4%B8%8Bsublime-latex%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/12/06/Window下sublime-latex配置/</id>
    <published>2015-12-06T05:01:50.000Z</published>
    <updated>2015-12-06T05:51:57.165Z</updated>
    <content type="html"><![CDATA[<h3 id="SumatraPDF">SumatraPDF</h3><p>百度下载安装SumatraPDF，傻瓜式安装<br>添加SumatraPDF到系统变量中，这样在编译完latex会自动跳出你的pdf文档</p>
<h3 id="TexLive">TexLive</h3><ol>
<li>推荐下载<a href="http://pan.baidu.com/s/1dDnnhvz" target="_blank" rel="external">镜像</a></li>
<li>使用 软碟通 或者 虚拟光驱 打开texlive.iso</li>
<li>运行install-tl-advanced.bat</li>
<li>傻瓜式安装30分钟左右结束，此期间可同时进行下一步</li>
</ol>
<h3 id="Sublime_Text3(后简称ST3)">Sublime Text3(后简称ST3)</h3><p>1.添加Package Control插件<br>按下Ctrl + ` （数字键1左边的键）组合键来打开ST3控制台<br>点击<a href="https://packagecontrol.io/installation#st3" target="_blank" rel="external">Package Control link</a><br>或者下面这段copy至控制台回车<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure></p>
<p>如果报错，请查看自己的Sublime Text版本是2还是3.</p>
<h4 id="安装LatexTools插件">安装LatexTools插件</h4><ol>
<li>ST3面板中CTRL+SHIFT+P输入Package Control:Install Package选择</li>
<li>输入LaTeXTools，选定</li>
<li>CTRL+SHIFT+P，运行“Reconfigure and migrate settings”</li>
<li><p>配置LaTexTools.sublime-settings(菜单：Preferences-&gt;Browse Packages 目录：/User)</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">找到“Platform settings: adapt <span class="keyword">as</span> needed <span class="keyword">for</span> your machine” section中的如下图，</span><br><span class="line">更改[<span class="string">"texpath"</span> : <span class="string">""</span>]为[<span class="string">"texpath"</span> : <span class="string">"C:\\Program Files\\texlive\\2014\\bin\\win32;$PATH"</span>]；</span><br><span class="line">发行版[<span class="string">"distro"</span> : <span class="string">"miktex"</span>]更改为[<span class="string">"distro"</span> : <span class="string">"texlive"</span>]</span><br><span class="line">在Build engine settings部分下面，将[<span class="string">"builder"</span>: <span class="string">"traditional"</span>]更改为[<span class="string">"builder"</span>: <span class="string">"simple"</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>大功告成！</p>
</li>
</ol>
<h4 id="测试">测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  </span><br><span class="line">\title&#123;Title&#125;</span><br><span class="line">\author&#123;Your Name&#125;</span><br><span class="line">  </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">  </span><br><span class="line">\maketitle&#123;&#125;</span><br><span class="line">  </span><br><span class="line">\section&#123;Introduction&#125;</span><br><span class="line">  </span><br><span class="line">This is <span class="built_in">where</span> you will write your content.</span><br><span class="line">  </span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>CONTROL + B编译</p>
<h3 id="References">References</h3><ol>
<li><a href="http://www.zhihu.com/question/19954023" target="_blank" rel="external">有哪些好的 LaTeX 编辑器？</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[最漂亮的文字排版系统latex + 最完美的文字编辑工具，绝配]]>
    
    </summary>
    
      <category term="ST3" scheme="http://yoursite.com/tags/ST3/"/>
    
      <category term="latex" scheme="http://yoursite.com/tags/latex/"/>
    
      <category term="latex" scheme="http://yoursite.com/categories/latex/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java分页原理]]></title>
    <link href="http://yoursite.com/2015/12/04/Java%E5%88%86%E9%A1%B5%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2015/12/04/Java分页原理/</id>
    <published>2015-12-04T10:38:03.000Z</published>
    <updated>2015-12-05T04:13:33.151Z</updated>
    <content type="html"><![CDATA[<h3 id="为何要使用分页？">为何要使用分页？</h3><ol>
<li>数据方面的原因</li>
<li>增强用户使用体验需要，根据需要获取</li>
<li>浏览器–&gt;网络–&gt;服务器 减小网络和服务器压力，节省数据IO和网络传输时间时间</li>
</ol>
<h3 id="不同的分页方式">不同的分页方式</h3><h4 id="传统分页">传统分页</h4><p>明确的获取数据信息，如有多少条数据，分多少页显示等。</p>
<h4 id="下拉式分页">下拉式分页</h4><p>无法明确的获取数据数量相关的信息，但是在分页操作以后，仍然可以看到之前查询的数据。</p>
<h3 id="常见的分页实现方式">常见的分页实现方式</h3><ol>
<li>使用List接口中sublist(int startIndex,int endIndex)方法实现分页。</li>
<li>直接使用数据库SQL语句实现分页</li>
<li>使用hibernate，mybatis等框架实现跨数据库的分页<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mysql:Select * from t_student <span class="built_in">limit</span> <span class="number">0</span>,<span class="number">10</span></span><br><span class="line">Psql:Select * from t_student <span class="built_in">limit</span> <span class="number">10</span> offset <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="传统sublist分页实现">传统sublist分页实现</h3><h4 id="参数说明">参数说明</h4><p>对任意可分数据类型T,<br>初始化参数<br>pageSize:前台传输过来<br>pageNum:前台传输过来<br>currentPage = pageNum &gt; totalPage ? totalPage : pageNum<br>dataList:后台传输过来<br>totalRecord = dataList.size()<br>totalPage = totalRecord % pageSize?totalRecord / pageSize : totalRecord / pageSize + 1</p>
<h4 id="过程分析">过程分析</h4><p>前台：<br>T：判定参数，如gender = “male”<br>pageSize:前台传输过来<br>pageNum:前台传输过来<br>提交</p>
<p>Servlet容器：<br>处理并调用持久层ServiceImpl方法取数据</p>
<p>后台：<br>生成sql语句，完成参数查询，返回Pager<t></t></p>
<p>Servlet容器：<br>Servlet包装数据到request里面</p>
<p>前台：<br>根据参数去显示当前页数据</p>
<h4 id="源代码">源代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Pager&lt;T&gt; implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * </span><br><span class="line">	 */</span><br><span class="line">	private static final long serialVersionUID = -<span class="number">6150972860315433465</span>L;</span><br><span class="line">	</span><br><span class="line">	private int pageSize;//每页显示多少条数据</span><br><span class="line">	</span><br><span class="line">	private int currentPage;//当前第几页数据</span><br><span class="line">	</span><br><span class="line">	private int totalRecord;//一共多少条记录</span><br><span class="line">	</span><br><span class="line">	private int totalPage;//一共多少页记录</span><br><span class="line">	</span><br><span class="line">	private List&lt;T&gt; dataList;//要显示的数据</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	public <span class="function"><span class="title">Pager</span></span>() &#123;</span><br><span class="line">		super();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public Pager(int pageNum,int pageSize, List&lt;T&gt; <span class="built_in">source</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">source</span> == null)&#123;</span><br><span class="line">			<span class="built_in">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">		this.totalRecord = source.size();</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">		</span><br><span class="line">		//总页数</span><br><span class="line">		this.totalPage = this.totalRecord/this.pageSize;</span><br><span class="line">		<span class="keyword">if</span>(this.totalRecord % this.pageSize != <span class="number">0</span>)&#123;</span><br><span class="line">			this.totalPage += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		//当前页数</span><br><span class="line">		<span class="keyword">if</span>(this.totalPage &lt; pageNum)&#123;</span><br><span class="line">			this.currentPage = this.totalPage;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			this.currentPage = pageNum;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		int fromIndex = this.pageSize * (this.currentPage - <span class="number">1</span>);</span><br><span class="line">		int toIndex;</span><br><span class="line">		<span class="keyword">if</span>(this.pageSize * this.currentPage &gt; this.totalRecord)&#123;</span><br><span class="line">			toIndex = this.totalRecord;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			toIndex = this.pageSize * this.currentPage;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		this.dataList = source.subList(fromIndex, toIndex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public Pager(int pageSize, int currentPage, int totalRecord, int totalPage,</span><br><span class="line">			List&lt;T&gt; dataList) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">		this.currentPage = currentPage;</span><br><span class="line">		this.totalRecord = totalRecord;</span><br><span class="line">		this.totalPage = totalPage;</span><br><span class="line">		this.dataList = dataList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getPageSize</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> pageSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void <span class="built_in">set</span>PageSize(int pageSize) &#123;</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getCurrentPage</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> currentPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void <span class="built_in">set</span>CurrentPage(int currentPage) &#123;</span><br><span class="line">		this.currentPage = currentPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getTotalRecord</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> totalRecord;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void <span class="built_in">set</span>TotalRecord(int totalRecord) &#123;</span><br><span class="line">		this.totalRecord = totalRecord;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getTotalPage</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> totalPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void <span class="built_in">set</span>TotalPage(int totalPage) &#123;</span><br><span class="line">		this.totalPage = totalPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public List&lt;T&gt; <span class="function"><span class="title">getDataList</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> dataList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void <span class="built_in">set</span>DataList(List&lt;T&gt; dataList) &#123;</span><br><span class="line">		this.dataList = dataList;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后台sql分页">后台sql分页</h3><ol>
<li><p>取分页记录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table <span class="built_in">where</span> <span class="number">1</span> = <span class="number">1</span>[ and gender=male][ and username=<span class="string">"a"</span>] <span class="built_in">limit</span> (pageNum-<span class="number">1</span>) * pageSize, pageSize;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取总的记录数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) as totalRecord from table <span class="built_in">where</span> <span class="number">1</span> = <span class="number">1</span>[ and gender=male][ and username=<span class="string">"a"</span>]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注：[]内的都是可选条件，1,2步骤的可选条件是一致的。</p>
<h3 id="完整的源代码">完整的源代码</h3><p>maven项目<a href="https://github.com/rollingdeep/pager-webapp" target="_blank" rel="external">pager-webapp</a></p>
<h4 id="曾遇到的问题">曾遇到的问题</h4><ol>
<li>JQuery选取元素 $(“#id”).attr(“action”,”property”);</li>
<li>遇到了浏览器重复重定位，清除浏览器缓存，clean tomcat项目再试！</li>
<li>将长整形转为整形 int intNumber = ((Number)(LongNumber)).intValue();</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，怎么在Java中实现分页，怎么在SQL中分页。这些问题经常遇到，最近复习了一遍，分享一下！]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows通过virtualbox ssh登陆到虚拟ubuntu]]></title>
    <link href="http://yoursite.com/2015/11/30/Windows%E9%80%9A%E8%BF%87virtualbox-ssh%E7%99%BB%E9%99%86%E5%88%B0%E8%99%9A%E6%8B%9Fubuntu/"/>
    <id>http://yoursite.com/2015/11/30/Windows通过virtualbox-ssh登陆到虚拟ubuntu/</id>
    <published>2015-11-30T13:02:33.000Z</published>
    <updated>2015-12-05T03:16:25.904Z</updated>
    <content type="html"><![CDATA[<h3 id="Ubuntu中操作">Ubuntu中操作</h3><p>在Ubuntu下使用ALT+CTRL+T打开终端输入以下命令</p>
<ol>
<li>查看ubuntu和vitualbx中的网络是不是连通的<pre><code class="bash">$ ping vimer.cn
</code></pre>
</li>
<li>查询ip配置信息<pre><code class="bash">$ ifconfig   //注意是ifconfig
</code></pre>
</li>
<li><p>设置ssh登陆</p>
<pre><code class="bash">$ sudo apt-get install openssh-server
</code></pre>
<p>这里如果遇到依赖openssh-client<br>先执行</p>
<pre><code class="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre>
<p>再执行 <a href="#设置ssh登陆">上一步</a>步骤安装</p>
</li>
<li><p>安装好后，看一下端口监听</p>
<pre><code class="bash">$ netstat -lpnt
</code></pre>
<p>看一下有没有 ：：：22 字段，一般是最后一个</p>
</li>
<li><p>如果以上都没问题，此时Ubuntu所有的配置完成。</p>
</li>
<li><p>关闭Ubuntu</p>
</li>
</ol>
<h3 id="Windows下配置">Windows下配置</h3><ol>
<li>将Virtulbox写入环境变量path中，一般是C:\Program Files\Oracle\VirtualBox </li>
<li>Win+R打开命令行<pre><code class="bash">$ VBoxManage modifyvm <span class="string">"ubuntu"</span> –-natpf1 <span class="string">"guestssh,tcp,,2222,,22"</span>
</code></pre>
</li>
<li>VBox管理工具 修改vm中 虚拟机ubuntu –网卡1 “端口转发名字,通过tcp连接，宿主机IP(略)，windows下端口2222，虚拟机IP(略)，ubuntu下端口22”  ,一一对应<ul>
<li>如果其他机器，<br>同网段，写上不同的IP地址。</li>
<li>不同网段，配置路由上 虚拟服务器 端口转发，然后再配置本机到路由域内转发IP<br>如2222-543-22 中间”guestssh,tcp,192.168.0.100,2222,192.168.0(1).1,543”   然后路优会自动转发至机器22端口。</li>
</ul>
</li>
</ol>
<p>4.重启Ubuntu,通过putty登陆<br>输入主机名称127.0.0.1端口2222<br>保持的会话起个名字ubuntu,保存<br>登陆<br>出现一个提示，不用管<br>如果看到log as：<br>输入ubuntu用户名<br>输入密码</p>
<p>Congratulations，你应该可以看到Welcome！</p>
<h3 id="References">References</h3><p><a href="http://blog.sina.com.cn/s/blog_72e67d290100ox42.html" target="_blank" rel="external">解决VirtualBox 中Ubuntu无法全屏的方法</a><br><a href="http://blog.csdn.net/astrotycoon/article/details/8143146" target="_blank" rel="external">ssh登陆virtualbox安装的Ubuntu的同时也能连上互联网</a><br><a href="http://www.vimer.cn/2010/09/%E5%9C%A8windows%E4%B8%8B%E7%94%A8virtualbox%E8%99%9A%E6%8B%9Fubuntu%E5%B9%B6%E9%80%9A%E8%BF%87ssh%E7%99%BB%E5%BD%95.html" target="_blank" rel="external">在windows下用virtualbox虚拟ubuntu,并通过ssh登录</a></p>
]]></content>
    <summary type="html">
    <![CDATA[通过windows的putty登陆到虚拟机或者其他电脑终端，实现对其他机器的操作或者计算工作，是不是一件很cool的事情！]]>
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="VirtualBox" scheme="http://yoursite.com/tags/VirtualBox/"/>
    
      <category term="VirtualBox" scheme="http://yoursite.com/categories/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android全适配]]></title>
    <link href="http://yoursite.com/2015/11/27/Android%E5%85%A8%E9%80%82%E9%85%8D/"/>
    <id>http://yoursite.com/2015/11/27/Android全适配/</id>
    <published>2015-11-27T14:32:22.000Z</published>
    <updated>2015-12-22T11:06:22.957Z</updated>
    <content type="html"><![CDATA[<h2 id="基本知识">基本知识</h2><h3 id="屏幕像素密度dpi">屏幕像素密度dpi</h3><ul>
<li>屏幕尺寸单位：1英寸=2.54厘米</li>
<li>屏幕像素密度：dpi(每英寸上面像素点个数)</li>
</ul>
<p>例子：1920*1280 5.2inch<br>Dpi = sqrt(1920^2+1280^2)/5.2</p>
<h4 id="关于dp,dip">关于dp,dip</h4><ul>
<li>基准160dpi：1dip=1px<br>320dpi上，1dip = 2px;<br>任意设备上，1dpi是多少。也就是1dip = dpi/160 px。</li>
</ul>
<h2 id="全适配">全适配</h2><ul>
<li>使用wrap_content、match_parent、weight</li>
<li>使用相对布局、禁用绝对布局</li>
<li>使用限定符</li>
<li>使用自动拉伸位图</li>
</ul>
<h3 id="布局权重layout_weight">布局权重layout_weight</h3><p>计算出的宽度 = 控件原始宽度 + 剩余宽度*百分比。</p>
<ul>
<li><p>假定屏幕宽度为L，横向线性布局<br>Button1:match_parent 宽度为L<br>Button2:match_parent 宽度为L<br>控件总宽度：2L<br>剩余宽度为 = 屏幕宽度 - 控件总宽度<br>Button1:2/3L = L+(L-2L)<em>(1/3)<br>Button2:1/3L= L+(L-2L)</em>(2/3)</p>
</li>
<li><p>假定线性布局下设置宽度为O<br>Button1:2/3L = 0 + (L-0)<em>(1/3)<br>Button2:1/3L= 0 + (L-0)</em>(2/3)</p>
</li>
</ul>
<h3 id="相对布局">相对布局</h3><p>这个不多说。</p>
<h3 id="限定符">限定符</h3><p>屏幕最小宽度限定符layout-sw600dp<br>屏幕方向限定符 layout-sw600dp-port layout-sw600dp-land</p>
<h4 id="尺寸限定符">尺寸限定符</h4><p>Google android3.2之前规定<br>在手机上使用，我们一般是单面板模式   res/layout/main.xml 单面板<br>在平板上使用，我们一般采用双面板模式 res/layout-large/main.xml 双面板<br>这样我们在对应文件下写两个布局分别适配。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">res/layout/main.xml 单面板</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment android:id=<span class="string">"@+id/headlines"</span></span><br><span class="line">              android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">              android:name=<span class="string">"com.example.android.newsreader.HeadlinesFragment"</span></span><br><span class="line">              android:layout_width=<span class="string">"match_parent"</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">res/layout-large/main.xml 双面板</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">"@+id/headlines"</span></span><br><span class="line">              android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">              android:name=<span class="string">"com.example.android.newsreader.HeadlinesFragment"</span></span><br><span class="line">              android:layout_width=<span class="string">"400dp"</span></span><br><span class="line">              android:layout_marginRight=<span class="string">"10dp"</span>/&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">"@+id/article"</span></span><br><span class="line">              android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">              android:name=<span class="string">"com.example.android.newsreader.ArticleFragment"</span></span><br><span class="line">              android:layout_width=<span class="string">"fill_parent"</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h4 id="最小宽度限定符">最小宽度限定符</h4><p>Google android3.2之后新规：按屏幕最短的那个边，如果大于600dp，要使用layout-sw600dp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">res/layout/main.xml，单面板（默认）布局：</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment android:id=<span class="string">"@+id/headlines"</span></span><br><span class="line">              android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">              android:name=<span class="string">"com.example.android.newsreader.HeadlinesFragment"</span></span><br><span class="line">              android:layout_width=<span class="string">"match_parent"</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">res/layout-sw600dp/main.xml，双面板布局：  Small Width 最小宽度</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">"@+id/headlines"</span></span><br><span class="line">              android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">              android:name=<span class="string">"com.example.android.newsreader.HeadlinesFragment"</span></span><br><span class="line">              android:layout_width=<span class="string">"400dp"</span></span><br><span class="line">              android:layout_marginRight=<span class="string">"10dp"</span>/&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">"@+id/article"</span></span><br><span class="line">              android:layout_height=<span class="string">"fill_parent"</span></span><br><span class="line">              android:name=<span class="string">"com.example.android.newsreader.ArticleFragment"</span></span><br><span class="line">              android:layout_width=<span class="string">"fill_parent"</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="屏幕方向限定符">屏幕方向限定符</h4><p>这个主要针对平板。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">res/values-sw600dp-land/layouts.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">"main"</span> <span class="built_in">type</span>=<span class="string">"layout"</span>&gt;@layout/main_twopanes&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">res/values-sw600dp-port/layouts.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">"main"</span> <span class="built_in">type</span>=<span class="string">"layout"</span>&gt;@layout/main&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="布局别名">布局别名</h4><p>让系统去分局values命名去选择要使用的布局文件。<br>并采用布局别名的方式,写法依旧是setContentView(R.layout.main);<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">res/layout/main.xml: 			单面板布局</span><br><span class="line">res/layout-large/main.xml: 		多面板布局</span><br><span class="line">res/layout-sw600dp/main.xml: 	多面板布局</span><br><span class="line"></span><br><span class="line">res/layout/main.xml  			单面板布局</span><br><span class="line">res/layout/main_twopanes.xml 	双面板布局</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>ContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">默认布局</span><br><span class="line">res/values/layout.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">"main"</span> <span class="built_in">type</span>=<span class="string">"layout"</span>&gt;@layout/main&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">Android3.<span class="number">2</span>之前的平板布局</span><br><span class="line">res/values-large/layout.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">"main"</span> <span class="built_in">type</span>=<span class="string">"layout"</span>&gt;@layout/main_twopanes&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">Android3.<span class="number">2</span>之后的平板布局</span><br><span class="line">res/values-sw600dp/layout.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">"main"</span> <span class="built_in">type</span>=<span class="string">"layout"</span>&gt;@layout/main_twopanes&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="自动拉伸位图">自动拉伸位图</h4><p>图片格式的自适应<br>.9图：picture.9.png:<br>左、上：拉伸区域(横纵向放缩)<br>右、下:padding box(optical)(和边框的距离即为padding)</p>
]]></content>
    <summary type="html">
    <![CDATA[android设备众多，怎样才能做出一款适配95%的安卓设备？android中的基础重重之重！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java多线程]]></title>
    <link href="http://yoursite.com/2015/11/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2015/11/27/Java多线程/</id>
    <published>2015-11-27T07:47:35.000Z</published>
    <updated>2015-12-05T03:11:45.841Z</updated>
    <content type="html"><![CDATA[<h4 id="继承Thread">继承Thread</h4><p>缺点：继承只能继承一次。扩展性不强<br>重写run方法，来自定义线程执行任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">		System.out.println(<span class="string">"MyThread.run()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		MyThread thread1 = new MyThread();</span><br><span class="line">		MyThread thread2 = new MyThread();</span><br><span class="line">		thread1.start();</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现Runnable接口">实现Runnable接口</h4><p>优点：可扩展性强<br>方法：通过实现接口，然后Thread构造方法传参新建thread2类，start()启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread2 implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">		System.out.print(<span class="string">"MyThread2.run()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		MyThread2 thread = new MyThread2();</span><br><span class="line">		Thread thread2 = new Thread(thread);</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Thread类本身实现了Runable接口，而且除了默认构造，还有一个带参构造，传入target<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//Thread源代码</span><br><span class="line">public <span class="function"><span class="title">Thread</span></span>() &#123;</span><br><span class="line">       init(null, null, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">public Thread(Runnable target) &#123;</span><br><span class="line">       init(null, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">       <span class="keyword">if</span> (target != null) &#123;</span><br><span class="line">           target.run();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="ExecutorService、Callable、Future带返回结果的线程实现">ExecutorService、Callable、Future带返回结果的线程实现</h4><p>Callable：执行任务并返回结果。<br>Future<v>：Future接口是Java线程Future模式的实现，可以来进行异步计算。</v></p>
<blockquote>
<p>Future模式：我有一个任务，提交给了Future，Future替我完成这个任务。期间我自己可以去做任何想做的事情。一段时间之后，我就便可以从Future那儿取出结果。就相当于下了一张订货单，一段时间后可以拿着提订单来提货，这期间可以干别的任何事情。其中Future 接口就是订货单，真正处理订单的是Executor类，它根据Future接口的要求来生产产品。</p>
</blockquote>
<p>ExecutorService：继承自Executor，线程池操作类，创建，执行，关闭</p>
<h5 id="核心">核心</h5><ul>
<li>Future<object> f = pool.submit(c);</object></li>
<li>Void f = pool.execute(RunnableImplements);</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//ExecutorService部分源码 </span><br><span class="line"></span><br><span class="line"> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span><br><span class="line"></span><br><span class="line"> &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</span><br><span class="line"></span><br><span class="line"> Future&lt;?&gt; submit(Runnable task);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">另外 </span><br><span class="line">//Executor源码</span><br><span class="line">public interface Executor &#123;</span><br><span class="line">    void execute(Runnable <span class="built_in">command</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="小例子">小例子</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 有返回值的线程</span><br><span class="line"> */</span><br><span class="line">	public class MyThread3 &#123;</span><br><span class="line">		public static void main(String[] args) throws ExecutionException,</span><br><span class="line">				InterruptedException &#123;</span><br><span class="line">			System.out.println(<span class="string">"----程序开始运行----"</span>);</span><br><span class="line">			Date date1 = new Date();</span><br><span class="line"></span><br><span class="line">			int taskSize = <span class="number">5</span>;</span><br><span class="line">			// 创建一个线程池</span><br><span class="line">			ExecutorService pool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">			// 创建多个有返回值的任务</span><br><span class="line">			List&lt;Future&lt;Object&gt;&gt; list = new ArrayList&lt;Future&lt;Object&gt;&gt;();</span><br><span class="line">			<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;</span><br><span class="line">				Callable&lt;Object&gt; c = new MyCallable(i + <span class="string">" "</span>);</span><br><span class="line">				// 执行任务并获取Future对象</span><br><span class="line">				Future&lt;Object&gt; f = pool.submit(c);</span><br><span class="line">				// System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());</span><br><span class="line">				list.add(f);</span><br><span class="line">			&#125;</span><br><span class="line">			// 关闭线程池</span><br><span class="line">			pool.shutdown();</span><br><span class="line"></span><br><span class="line">			// 获取所有并发任务的运行结果</span><br><span class="line">			<span class="keyword">for</span> (Future&lt;Object&gt; f : list) &#123;</span><br><span class="line">				// 从Future对象上获取任务的返回值，并输出到控制台</span><br><span class="line">				System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Date date2 = new Date();</span><br><span class="line">			System.out.println(<span class="string">"----程序结束运行----，程序运行时间【"</span></span><br><span class="line">					+ (date2.getTime() - date1.getTime()) + <span class="string">"毫秒】"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	class MyCallable implements Callable&lt;Object&gt; &#123;</span><br><span class="line">		private String taskNum;</span><br><span class="line"></span><br><span class="line">		MyCallable(String taskNum) &#123;</span><br><span class="line">			this.taskNum = taskNum;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		public Object call() throws Exception &#123;</span><br><span class="line">			System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务启动"</span>);</span><br><span class="line">			Date dateTmp1 = new Date();</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			Date dateTmp2 = new Date();</span><br><span class="line">			long time = dateTmp2.getTime() - dateTmp1.getTime();</span><br><span class="line">			System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务终止"</span>);</span><br><span class="line">			<span class="built_in">return</span> taskNum + <span class="string">"任务返回运行结果,当前任务时间【"</span> + time + <span class="string">"毫秒】"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>如有不懂，可以多翻阅源代码。</p>
<h4 id="Reference">Reference</h4><p><a href="http://blog.csdn.net/aboy123/article/details/38307539" target="_blank" rel="external">JAVA多线程实现的三种方式</a><br><a href="java Future 接口介绍">java Future 接口介绍</a><br><a href="http://blog.sina.com.cn/s/blog_64d5ddbe0100ydyv.html" target="_blank" rel="external">线程池中execute和submit的区别</a><br><a href="http://www.cnphp6.com/archives/61093" target="_blank" rel="external">EXECUTORSERVICE线程池讲解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，多线程的有几种创建方式？run方法启动线程还是start方法启动？sleep的时候有无交出锁？。刚好看到这里，分享之！]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Collection和Collections]]></title>
    <link href="http://yoursite.com/2015/11/26/Collection%E5%92%8CCollections/"/>
    <id>http://yoursite.com/2015/11/26/Collection和Collections/</id>
    <published>2015-11-26T09:23:04.000Z</published>
    <updated>2015-12-05T03:13:07.025Z</updated>
    <content type="html"><![CDATA[<h3 id="Collection">Collection</h3><pre><code class="bash">Collection   
├List   
│├LinkedList   
│├ArrayList   
│└Vector   
│　└Stack   
└Set
</code></pre>
<p>Collection是集合类的上级接口，继承与他的接口主要有Set 和 List.</p>
<h3 id="Collections">Collections</h3><p>Collections是针对集合类的一个帮助类，它提供一系列静态方法实现对各种集合的搜索、排序[底层是二分法]、线程安全化等操作。</p>
<ul>
<li>此类不能实例化，就像一个工具类，服务于Java的Collection框架</li>
</ul>
<h3 id="小例子">小例子</h3><pre><code class="bash">//注意List是实现Collection接口的
List list = new ArrayList();
double array[] = {<span class="number">112</span>, <span class="number">111</span>, <span class="number">23</span>, <span class="number">456</span>, <span class="number">231</span>};
<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.length; i++) {
    list.add(new Double(array[i]));
}
Collections.sort(list);//
<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.length; i++) {
    System.out.println(list.get(i));
}
// 结果：<span class="number">23.0</span> <span class="number">111.0</span> <span class="number">112.0</span> <span class="number">231.0</span> <span class="number">456.0</span>
</code></pre>
<h3 id="Reference">Reference</h3><p><a href="http://trinea.iteye.com/blog/1248517" target="_blank" rel="external">对象数组或list排序及Collections排序原理</a><br><a href="http://www.blogjava.net/hgc-ghc/archive/2013/03/28/397084.html" target="_blank" rel="external">Java中的CompareTo</a><br><a href="http://825635381.iteye.com/blog/2017650" target="_blank" rel="external">Java基础中的泛型</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，集合接口Collection和集合帮助类Collections的工作原理。刚好看到这里，分享之！]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HashMap工作原理]]></title>
    <link href="http://yoursite.com/2015/11/26/HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2015/11/26/HashMap工作原理/</id>
    <published>2015-11-26T07:47:34.000Z</published>
    <updated>2016-03-21T13:55:54.494Z</updated>
    <content type="html"><![CDATA[<h3 id="数组">数组</h3><p>数组存储区间是连续的，占用内存严重，故空间复杂的很大。但数组的二分查找时间复杂度小，为O(1)；<br>数组的特点是：寻址容易，插入和删除困难；</p>
<h3 id="链表">链表</h3><p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O（N）。<br>链表的特点是：寻址困难，插入和删除容易。</p>
<h3 id="哈希表">哈希表</h3><p>那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表。<br>哈希表（(Hash table）既满足了数据的查找方便，同时不占用太多的内容空间，使用也十分方便。</p>
<p><img src="http://img.blog.csdn.net/20131105152201453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="哈希表"></p>
<p><img src="http://img.blog.csdn.net/20131105152215718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="哈希表例子"></p>
<h4 id="基本原理">基本原理</h4><p>表达式：hash(key)%arr.length(这里hash(key)是f(k),即我们常说的散列函数)</p>
<ol>
<li>f(k1)=f(k2)则散列到数组的同一个下标中，通过链表next依次存放，通过匹配key，获取值。</li>
<li>f(null)会被存放在arr[0]中,只能存一个元素，再次存取会返回oldValue;两个key相同时也是采取这种策略，新的值替换旧值，并返回旧值。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (key == null)  </span><br><span class="line">          <span class="built_in">return</span> putForNullKey(value);  </span><br><span class="line">      int <span class="built_in">hash</span> = <span class="built_in">hash</span>(key.hashCode());  </span><br><span class="line">      int i = indexFor(<span class="built_in">hash</span>, table.length);  </span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;  </span><br><span class="line">          Object k;  </span><br><span class="line">          <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </span><br><span class="line">              V oldValue = e.value;  </span><br><span class="line">              e.value = value;  </span><br><span class="line">              e.recordAccess(this);  </span><br><span class="line">              <span class="built_in">return</span> oldValue;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      modCount++;  </span><br><span class="line">      addEntry(<span class="built_in">hash</span>, key, value, i);  </span><br><span class="line">      <span class="built_in">return</span> null;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h5 id="定位数组中的位置">定位数组中的位置</h5><p>书本上是采用 % 模运算<br>而实际是用的 &amp; 按位与运算，“模”运算的消耗还是比较大的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length) &#123;  </span><br><span class="line">       <span class="built_in">return</span> h &amp; (length-<span class="number">1</span>);  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>巧妙之处：通过哈希值和length 按位与获得位置<br>一个简单的情况：length = 16,length-1 = 15,二进制码是1111,那么任意一个h（如1110，1111）按位与都是它自身h,而且没有冲突。</p>
<h5 id="哈希表长度">哈希表长度</h5><p>length总是2^n(2的倍数),每次超过阈值之后会采用一个,这也是为什么length总是2^n(2的倍数)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br></pre></td></tr></table></figure>
<p>threshold = capacity * loadFactor,loadFactor默认为0.75.</p>
<h3 id="HashTable和HashMap">HashTable和HashMap</h3><ul>
<li>Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，效率要高于Hashtable。</li>
<li>HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</li>
<li>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。</li>
<li>Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。<br>最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。<br>Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。同步上的性能，HashMap会更优秀</li>
</ul>
<p>就HashMap与HashTable主要从三方面来说，</p>
<ol>
<li>历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现</li>
<li>同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的</li>
<li>值：只有HashMap可以让你将空值作为一个表的条目的key或value</li>
</ol>
<h3 id="Reference">Reference</h3><p><a href="http://blog.csdn.net/vking_wang/article/details/14166593" target="_blank" rel="external">HashMap实现原理分析</a><br><a href="http://blog.csdn.net/heyutao007/article/details/6206153" target="_blank" rel="external">HashMap源码分析</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，哈希表的工作原理。刚好看到这里，分享之！]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java文件写入项目根目录]]></title>
    <link href="http://yoursite.com/2015/11/25/java%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2015/11/25/java文件写入项目根目录/</id>
    <published>2015-11-25T10:07:55.000Z</published>
    <updated>2015-11-30T08:00:40.552Z</updated>
    <content type="html"><![CDATA[<h2 id="创建路径或文件">创建路径或文件</h2><p>方法：new File(<a href="#路径问题">路径</a>，文件夹或文件)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File folder = new File(rootPath,<span class="string">"src/data/weibo1"</span>);</span><br><span class="line">	<span class="keyword">if</span>(!folder.exists())&#123;</span><br><span class="line">	    folder.mkdirs(); </span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>
<p>文件夹中创建文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(folder, filename);</span><br></pre></td></tr></table></figure>
<p>当然也可以一步到位，本人习惯这样，层次感强。</p>
<h2 id="读写文件示例">读写文件示例</h2><p>见<a href="#源代码">源代码</a></p>
<h2 id="路径问题">路径问题</h2><p>在Java开发工具eclipse,myeclipse的project中使用相对路径<br>也就是说，在jar包或者cmd下无效。只在ide成立</p>
<p>项目结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">├─src </span><br><span class="line">│    └─com </span><br><span class="line">│       └─javasoft </span><br><span class="line">│             ├─entity</span><br><span class="line">│             └─db </span><br><span class="line">├─doc</span><br></pre></td></tr></table></figure></p>
<p>文件创建：<br>以“/”开头，指的是ide workspace所在磁盘的根目录<br>不以“/”开头，指的是project下子文件夹或者文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File f = new File(<span class="string">"src/com/javasoft/db/a.txt"</span>);</span><br><span class="line">//or</span><br><span class="line">File f = new File(<span class="string">"doc/b.txt"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="通过CLASSPATH读取包内文件">通过CLASSPATH读取包内文件</h2><p>获取类路径下文件，也就是classes文件夹下文件，以“/”开头</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = ReadFile.class.getResourceAsStream(<span class="string">"/com/javasoft/db/a.txt"</span>);</span><br><span class="line">//获取classes(classpath)路径</span><br><span class="line">String classpath = getClass().getResource(<span class="string">"/"</span>).getFile().toString();</span><br></pre></td></tr></table></figure>
<p>获取类加载器下文件 不以“/”开头</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream is=TestAction.class.getClassLoader().getResourceAsStream(<span class="string">"com/javasoft/db/test.txt"</span>); </span><br><span class="line">//获取classes(classpath)路径</span><br><span class="line">String rootPath = FileUtil.class.getClassLoader().getResource(<span class="string">""</span>).getFile().toString();</span><br></pre></td></tr></table></figure>
<h2 id="可行的解决办法">可行的解决办法</h2><p>absolutePath可以直接获取到项目路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String path = Thread.currentThread().getContextClassLoader().getResource(<span class="string">""</span>).getPath(); </span><br><span class="line">String secendPath = path.substring(<span class="number">1</span>, path.lastIndexOf(<span class="string">"/"</span>)); </span><br><span class="line">String absolutelyPath = secendPath.substring(<span class="number">0</span>,secendPath.lastIndexOf(<span class="string">"/"</span>));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/D:/j2ee/m_workspace/LDA4j-master/target/<span class="built_in">test</span>-classes/</span><br><span class="line">D:/j2ee/m_workspace/LDA4j-master/target/<span class="built_in">test</span>-classes</span><br><span class="line">D:/j2ee/m_workspace/LDA4j-master/target</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><blockquote>
<p>使用工程相对路径是靠不住的。<br>使用CLASSPATH路径是可靠的。</p>
</blockquote>
<hr>
<h2 id="源代码">源代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">package com.your.package;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line">public class TxtUtil &#123;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 创建文件</span><br><span class="line">  * @param fileName</span><br><span class="line">  * @<span class="built_in">return</span></span><br><span class="line">  */</span><br><span class="line"> public static boolean createFile(File fileName)throws Exception&#123;</span><br><span class="line">	 </span><br><span class="line">	  boolean flag=<span class="literal">false</span>;</span><br><span class="line">	  try&#123;</span><br><span class="line">		   <span class="keyword">if</span>(!fileName.exists())&#123;</span><br><span class="line">			    fileName.createNewFile();</span><br><span class="line">			    flag=<span class="literal">true</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">	  &#125;catch(Exception e)&#123;</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="built_in">return</span> flag;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 读TXT文件内容</span><br><span class="line">  * @param fileName</span><br><span class="line">  * @<span class="built_in">return</span></span><br><span class="line">  */</span><br><span class="line"> public static String <span class="built_in">read</span>TxtFile(File fileName)throws Exception&#123;</span><br><span class="line">	  String result=null;</span><br><span class="line">	  FileReader fileReader=null;</span><br><span class="line">	  BufferedReader bufferedReader=null;</span><br><span class="line">	  try&#123;</span><br><span class="line">		   fileReader=new FileReader(fileName);</span><br><span class="line">		   bufferedReader=new BufferedReader(fileReader);</span><br><span class="line">		   try&#123;</span><br><span class="line">			   String <span class="built_in">read</span>=null;</span><br><span class="line">			    <span class="keyword">while</span>((<span class="built_in">read</span>=bufferedReader.readLine())!=null)&#123;</span><br><span class="line">			    	result=result+<span class="built_in">read</span>+<span class="string">"\r\n"</span>;</span><br><span class="line">			    &#125;</span><br><span class="line">		   &#125;catch(Exception e)&#123;</span><br><span class="line">			   e.printStackTrace();</span><br><span class="line">		   &#125;</span><br><span class="line">	  &#125;catch(Exception e)&#123;</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;finally&#123;</span><br><span class="line">		   <span class="keyword">if</span>(bufferedReader!=null)&#123;</span><br><span class="line">		    bufferedReader.close();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(fileReader!=null)&#123;</span><br><span class="line">    fileReader.close();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">"读取出来的文件内容是："</span>+<span class="string">"\r\n"</span>+result);</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> public static boolean writeTxtFile(String content,File  fileName)throws Exception&#123;</span><br><span class="line">	  RandomAccessFile mm=null;</span><br><span class="line">	  boolean flag=<span class="literal">false</span>;</span><br><span class="line">	  FileOutputStream o=null;</span><br><span class="line">	  try &#123;</span><br><span class="line">	   o = new FileOutputStream(fileName);</span><br><span class="line">	      o.write(content.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">	      o.close();</span><br><span class="line">	//   mm=new RandomAccessFile(fileName,<span class="string">"rw"</span>);</span><br><span class="line">	//   mm.writeBytes(content);</span><br><span class="line">	   flag=<span class="literal">true</span>;</span><br><span class="line">	  &#125; catch (Exception e) &#123;</span><br><span class="line">	   // TODO: handle exception</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;finally&#123;</span><br><span class="line">	   <span class="keyword">if</span>(mm!=null)&#123;</span><br><span class="line">		   mm.close();</span><br><span class="line">	   &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="built_in">return</span> flag;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 	public static void contentToTxt(String filePath, String content) &#123;</span><br><span class="line">        String str = new String(); //原有txt内容</span><br><span class="line">        String s1 = new String();//内容更新</span><br><span class="line">        try &#123;</span><br><span class="line">            File f = new File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">                System.out.print(<span class="string">"文件存在"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">"文件不存在"</span>);</span><br><span class="line">                f.createNewFile();// 不存在则创建</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedReader input = new BufferedReader(new FileReader(f));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((str = input.readLine()) != null) &#123;</span><br><span class="line">                s1 += str + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">            input.close();</span><br><span class="line">            s1 += content;</span><br><span class="line"></span><br><span class="line">            BufferedWriter output = new BufferedWriter(new FileWriter(f));</span><br><span class="line">            output.write(s1);</span><br><span class="line">            output.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[在文件操作的过程中，总是会出现路径问题。]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse开发maven项目60000错误]]></title>
    <link href="http://yoursite.com/2015/11/22/eclipse%E5%BC%80%E5%8F%91maven%E9%A1%B9%E7%9B%AE60000%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2015/11/22/eclipse开发maven项目60000错误/</id>
    <published>2015-11-22T11:37:26.000Z</published>
    <updated>2015-12-05T03:13:17.049Z</updated>
    <content type="html"><![CDATA[<h2 id="坚持每天写一点">坚持每天写一点</h2><h3 id="操作步骤">操作步骤</h3><ol>
<li>首先根据错误提示去~/.m2/repository/下去找org/hamcrest/hamcrest-core/1.3</li>
<li>删除目录下含有lastupdate结尾的jar(无效的jar)</li>
<li>百度maven hamcrest-core-1.3.jar和hamcrest-library-1.3.jar。直接手动下载.</li>
<li>然后直接复制到对应版本的目录下。</li>
</ol>
<p>刷新项目ok！！</p>
]]></content>
    <summary type="html">
    <![CDATA[在使用junit时候出现一个依赖包叫做hankcs，有两个jar包，一个是core，一个是library,创建好项目之后。提示说在所给的mirror地址下网络错误码:60000]]>
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
</feed>
