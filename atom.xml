<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[沉思]]></title>
  <subtitle><![CDATA[万般皆下品，惟有读书高]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-06-29T08:59:00.115Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Rollingdeep]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PYTHON THEANO配置GPU CUDA]]></title>
    <link href="http://yoursite.com/2016/06/29/python-theano%E9%85%8D%E7%BD%AEGPU-CUDA/"/>
    <id>http://yoursite.com/2016/06/29/python-theano配置GPU-CUDA/</id>
    <published>2016-06-29T08:07:36.000Z</published>
    <updated>2016-06-29T08:59:00.115Z</updated>
    <content type="html"><![CDATA[<h3 id="python科学环境">python科学环境</h3><p><a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a></p>
<ol>
<li>在Anaconda官网上下载anaconda安装包,进行安装，傻瓜式安装，【Just me】，【next】,【next to end】</li>
<li>其中要是杀毒软件拦截，直接允许插入系统环境变量。</li>
</ol>
<h3 id="深度学习基本环境">深度学习基本环境</h3><ol>
<li>libpython和mingw<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ conda <span class="keyword">install</span> mingw</span><br><span class="line">$ conda <span class="keyword">install</span> libpython</span><br><span class="line">$ pip <span class="keyword">install</span> theano</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至于为什么装theano用pip,主要是本人觉得pip速度快。</p>
<p>注意：别急着调试！</p>
<h4 id="无GPU配置">无GPU配置</h4><ol>
<li>在home目录，windows下就是以你【计算机名】命名的文件夹，如我的是C:\Users\Paul</li>
<li><p>在home目录下创建名.theaorc.txt,文件内容</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[blas]</span></span><br><span class="line"><span class="setting">ldflags =</span><br><span class="line"></span><br><span class="line"><span class="value">[gcc]</span></span></span><br><span class="line"><span class="setting">cxxflags = <span class="value">-ID:\Anaconda\MinGW</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其实没有cxxflags也没问题，主要是需要gcc环境。可以写完这个在dos下测试</p>
</li>
</ol>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>gcc -v</span><br></pre></td></tr></table></figure>
<ol>
<li>至此已经全部完成。</li>
<li><p>测试，dos下输入python，再输入</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt;import theano</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功！</p>
</li>
</ol>
<h4 id="GPU配置">GPU配置</h4><p>这几天又整合了GPU CUDA+GTX970</p>
<ol>
<li>在Anaconda官网上下载anaconda安装包,进行安装，傻瓜式安装，【Just me】，【next】,【next to end】</li>
<li>其中要是杀毒软件拦截，直接让通过插入系统环境变量。</li>
<li>打开dos窗口，用conda安装mingw,libpython，参照前面</li>
<li><p>在home目录，windows下就是你【计算机名】命名的文件夹创建名为.theano.txt</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[blas]</span></span><br><span class="line"><span class="setting">ldflags =</span><br><span class="line"></span><br><span class="line"><span class="value">[gcc]</span></span></span><br><span class="line"><span class="setting">cxxflags = <span class="value">-ID:\Anaconda\MinGW</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[nvcc]</span></span><br><span class="line"><span class="setting">fastmath = <span class="value"><span class="keyword">True</span></span></span></span><br><span class="line"><span class="setting">flags = <span class="value">-LD:\Anaconda\libs</span></span></span><br><span class="line"><span class="setting">compiler_bindir = <span class="value">C:\Program File(x86)\Microsoft Visual Studio <span class="number">11.0</span>\VC\bin</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[global]</span></span><br><span class="line"><span class="setting">device = <span class="value">gpu0</span></span></span><br><span class="line"><span class="setting">flaotX = <span class="value">float32</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装CUDA和VS2010、VS2012或者VS2012Express,注意只有几个版本的VS支持<br><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="external">CUDA下载地址</a><br><a href="http://blog.csdn.net/yeyang911/article/details/17450963" target="_blank" rel="external">CUDA安装教程</a><br><a href="http://www.xiazaiba.com/html/7678.html" target="_blank" rel="external">VS2012</a></p>
</li>
</ol>
<p>6.成功！</p>
]]></content>
    <summary type="html">
    <![CDATA[塔布数据]]>
    
    </summary>
    
      <category term="CUDA" scheme="http://yoursite.com/tags/CUDA/"/>
    
      <category term="GPU" scheme="http://yoursite.com/tags/GPU/"/>
    
      <category term="theano" scheme="http://yoursite.com/tags/theano/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[斯坦福机器学习课程]]></title>
    <link href="http://yoursite.com/2016/06/23/%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0CS229/"/>
    <id>http://yoursite.com/2016/06/23/斯坦福机器学习CS229/</id>
    <published>2016-06-23T04:45:39.000Z</published>
    <updated>2016-06-23T09:21:53.824Z</updated>
    <content type="html"><![CDATA[<h3 id="COURSE_1">COURSE 1</h3><ol>
<li>SUPERVISED LEANRNING – 分类<br>有先验知识。对事物的判断已有相关定论</li>
<li>UNSUPERVISED LEARNING – 聚类<br>没有先验知识。事先没有给定结论</li>
<li>REFOCEMENT LEANRNING<br>见[2]</li>
</ol>
<h3 id="COURSE_2">COURSE 2</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Notation</span></span><br><span class="line">m = <span class="comment">#training examples</span></span><br><span class="line">x = <span class="string">'input'</span> variables/features;</span><br><span class="line"><span class="title">y</span> = <span class="string">'output'</span> variables/<span class="string">'target'</span> variables</span><br><span class="line">(x,y) = training example</span><br><span class="line">ith training example = (xi,yi)</span><br></pre></td></tr></table></figure>
<h4 id="Gradient_Descent">Gradient Descent</h4><h3 id="Reference">Reference</h3><ol>
<li><a href="http://cs229.stanford.edu/materials.html" target="_blank" rel="external">课程讲义</a></li>
<li><a href="http://www.cnblogs.com/jerrylead/archive/2011/05/13/2045309.html" target="_blank" rel="external">增强学习</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[吴恩达的机器学习视频，决定看完一次!]]>
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="ML" scheme="http://yoursite.com/categories/ML/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ANDROID STUDIO 安装提示JDK未安装解决办法]]></title>
    <link href="http://yoursite.com/2016/06/22/Android-Studio-%E5%AE%89%E8%A3%85%E6%8F%90%E7%A4%BAjdk%E6%9C%AA%E5%AE%89%E8%A3%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2016/06/22/Android-Studio-安装提示jdk未安装解决办法/</id>
    <published>2016-06-22T02:51:27.000Z</published>
    <updated>2016-06-29T08:59:37.204Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Android Studio安装时候提示未检测path中含有1.7或者1.7+jdk<br>解决办法</li>
</ul>
<ol>
<li>检查系统中是否含有JAVA_HOME，path是否指定到%JAVA_HOME%\bin；</li>
<li>将JAVA_HOME中‘\’替换为‘/’, path中也一致改为%JAVA_HOME%/bin;</li>
</ol>
<ul>
<li>在home目录下创建.开头的文件<br>在dos下用mkdir创建</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Android Studio安装时候提示未检测path中含有1.7或者1.7+jdk]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAVA中Object类中有几个方法]]></title>
    <link href="http://yoursite.com/2016/05/31/JAVA%E4%B8%ADObject%E7%B1%BB%E4%B8%AD%E6%9C%89%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/05/31/JAVA中Object类中有几个方法/</id>
    <published>2016-05-31T12:29:09.000Z</published>
    <updated>2016-06-01T03:13:03.432Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>常常在开发的过程中，都会对Java.lang.Object类的一些重要方法进行重写，这些方法包含：hashCode(),toString(),equals(),finalize(),clone(),wait(),notify()/notifyAll() 这八个方法。</p>
</blockquote>
<h3 id="equals()">equals()</h3><p>equals默认实现是用==，比较地址！</p>
<ul>
<li>什么时候用equals? </li>
<li>什么时候需要重写?</li>
</ul>
<p>Java语言规范要求equals方法具有下面的特点：<br>自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。<br>对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。<br>传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。<br>一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals<br>非空性：任何非空的引用值X，x.equals(null)的返回值一定为false<br>从这里看出，上面的例子是Java规范的equals方法的标准实现，推荐用上面例子的写法实现类的equals方法。</p>
<ul>
<li>什么情况下会破坏对称性?<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        Student other = (Student) obj;  </span><br><span class="line">        <span class="keyword">if</span> (age != other.age)  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (other.name != <span class="keyword">null</span>)  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>重写equals装到容器中是得重写hashcode()</p>
<p>###hashCode()<br>几个关键点：<br>1、hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；<br>2、如果两个对象相同，就是适用于equals(Java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；<br>3、如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；<br>4、两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”。</p>
<p>hashCode()的返回值和equals()的关系如下：</p>
<p>如果x.equals(y)返回“true”，那么x和y的hashCode()必须相等。<br>如果x.equals(y)返回“false”，那么x和y的hashCode()有可能相等，也有可能不等。</p>
<h3 id="Reference">Reference</h3><ol>
<li><a href="http://lavasoft.blog.51cto.com/62575/15456/" target="_blank" rel="external">深入研究java.lang.Object类</a></li>
<li><a href="Java 重写Object类的常见方法">Java 重写Object类的常见方法</a></li>
<li><a href="http://blog.csdn.net/lonely_fireworks/article/details/7974307" target="_blank" rel="external">java-覆盖equals时规则不容忽视</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Object是JAVA中所有类的基类，那Object中方法你又知道多少呢？开发中常常需要注意些什么。 -- 来自阿里面试官的提问]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java设计模式]]></title>
    <link href="http://yoursite.com/2016/04/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/25/Java设计模式/</id>
    <published>2016-04-25T14:31:27.000Z</published>
    <updated>2016-04-29T12:08:01.643Z</updated>
    <content type="html"><![CDATA[<h3 id="单例模式">单例模式</h3><p>在一个虚拟机内只存在一个实例，hashcode一致；<br>需要考虑两点</p>
<ol>
<li>线程安全</li>
<li>延迟加载<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Example1:</span><br><span class="line">/**</span><br><span class="line"> * Created by Paul on 2016/3/23.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. 静态私有实例</span><br><span class="line"> * 2. 私有构造</span><br><span class="line"> * 3. 公有静态方法</span><br><span class="line"> */<span class="keyword"></span><br><span class="line">public</span> class SingletonDemo &#123;</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> SingletonDemo<span class="instruction"> instance </span>= null;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span><span class="function"> SingletonDemo(</span><span class="function">)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletonDemo<span class="function"> getInstance(</span><span class="function">)</span> &#123;</span><br><span class="line">       <span class="instruction"> if </span>(instance == null<span class="function">)</span> &#123;</span><br><span class="line">            synchronized<span class="function"> (</span>SingletonDemo.class<span class="function">)</span> &#123;</span><br><span class="line">               <span class="instruction"> if </span>(instance == null<span class="function">)</span> &#123;</span><br><span class="line">                   <span class="instruction"> instance </span>=<span class="instruction"> new </span>SingletonDemo(<span class="function">)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="instruction"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo2</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SingleFactory</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo2 instance = <span class="keyword">new</span> SingletonDemo2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo2 <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleFactory.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//串行化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="状态模式">状态模式</h3><p>State模式在实际使用中比较多，适合“状态”的切换。因为我们经常会使用If else if else 进行状态切换，如果针对状态的这样判断切换反复出现，我们就要联想到是否可以采取State模式了。</p>
<ul>
<li>show me your code!<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">State</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span>(<span class="params">String sampleParameter</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Paul on 2016/4/26.</span><br><span class="line"> */</span></span><br><span class="line"> <span class="comment">//具体状态A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String sampleParameter)</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"this is concreteStateA..."</span> + sampleParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体状态B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String sampleParameter)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is concreteStateB..."</span> + sampleParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//状态管理者</span><br><span class="line">public class Context &#123;</span><br><span class="line">    private State <span class="keyword">state</span>;</span><br><span class="line">    public void <span class="built_in">set</span>State(State <span class="keyword">state</span>)&#123;</span><br><span class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void request(String sampleParameter)&#123;</span><br><span class="line">        <span class="keyword">state</span>.handle(sampleParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//测试类</span><br><span class="line">public class TestState &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        State <span class="keyword">state</span>A = new ConcreteStateA();</span><br><span class="line">        State <span class="keyword">state</span>B = new ConcreteStateB();</span><br><span class="line">        Context context = new Context();</span><br><span class="line">        context.<span class="built_in">set</span>State(<span class="keyword">state</span>A);</span><br><span class="line">        context.request(<span class="string">"happy"</span>);</span><br><span class="line">        context.<span class="built_in">set</span>State(<span class="keyword">state</span>B);</span><br><span class="line">        context.request(<span class="string">"sorrow"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="观察者模式">观察者模式</h3><p>来自网易的笔试，在订阅新闻中，运用了什么设计模式？<br>Oberver-Subject 设计模式</p>
<ul>
<li><p><a href="http://blog.csdn.net/swengineer/article/details/6268244" target="_blank" rel="external">应用场景</a></p>
</li>
<li><p>show me your code!</p>
</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象观察者角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> update(String <span class="keyword">str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span>(<span class="params">Observer observer</span>)</span>;</span><br><span class="line">    <span class="comment">//取消订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer observer</span>)</span>;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span>(<span class="params">String str</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> update(String <span class="keyword">str</span>) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现通知</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observers)</span><br><span class="line">            observer.update(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试观察者模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestObserver</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        Observer observer1 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        Observer observer2 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        Observer observer3 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        Subject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line"></span><br><span class="line">        subject.addObserver(observer1);</span><br><span class="line">        subject.addObserver(observer2);</span><br><span class="line">        subject.addObserver(observer3);</span><br><span class="line">        subject.notifyObservers(<span class="string">"糗事百科"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[掌握必要的设计模式，能助你一臂之力！程序设计之精髓篇(一)]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近校招算法题整理]]></title>
    <link href="http://yoursite.com/2016/04/20/%E6%9C%80%E8%BF%91%E6%A0%A1%E6%8B%9B%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/04/20/最近校招算法题整理/</id>
    <published>2016-04-20T07:05:02.000Z</published>
    <updated>2016-04-20T09:14:53.857Z</updated>
    <content type="html"><![CDATA[<h3 id="幂次"><a href="http://blog.sina.com.cn/s/blog_638f5b130102dr0t.html" target="_blank" rel="external">幂次</a></h3><p>判断一个数的幂次</p>
<blockquote>
<p>个位数是2的n次方的尾数循环为：2486 2486 2486 2486….<br>个位数是3的n次方的尾数循环为：3971 3971 3971 3971….<br>[公式] : n&amp;(n-1)判断n中有多少个1;</p>
</blockquote>
<ul>
<li>判断一个数是2的幂次<br>[code]</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"iostream"</span></span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is2sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">1000</span>;i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = is2sN(i);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is2sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &amp; (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>判断一个数是3的幂次<br>[code]</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"iostream"</span></span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"math.h"</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is3sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">1000</span>;i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = is3sN(i);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d  %d \n"</span>,i,flag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is3sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">floor</span>(a) == <span class="built_in">ceil</span>(a))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="[完全数]梅森素数">[完全数]梅森素数</h3><p>大数学家欧几里德曾推算出完全数的获得公式：如果2^p-1质数,那么(2^p-1)2^(p-1)便是一个完全数.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example:</span><br><span class="line">         p=<span class="number">2</span>,<span class="number">2</span>^p-<span class="number">1</span>=<span class="number">3</span>是质数,(<span class="number">2</span>^p-<span class="number">1</span>)*<span class="number">2</span>^(p-<span class="number">1</span>)=<span class="number">3</span>*<span class="number">2</span>=<span class="number">6</span></span><br><span class="line">         p=<span class="number">3</span>,<span class="number">2</span>^p-<span class="number">1</span>=<span class="number">7</span>是质数,(<span class="number">2</span>^p-<span class="number">1</span>)*<span class="number">2</span>^(p-<span class="number">1</span>)=<span class="number">7</span>X4=<span class="number">28</span></span><br><span class="line">         p=<span class="number">5</span>,<span class="number">2</span>^p-<span class="number">1</span>=<span class="number">31</span>是质数,(<span class="number">2</span>^p-<span class="number">1</span>)*<span class="number">2</span>^(p-<span class="number">1</span>)=<span class="number">31</span>X16=<span class="number">496</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是2^p-1什么条件下才是质数呢?当2^p-1是质数的时候,称其为梅森素数!顾名思义,就是梅森第一个系统地研究这种形式的素数的!事实上,至今(2006.9.4)为止,人类只发现了44个梅森素数,也就是只发现了44个完全数!</p>
</blockquote>
<p>[算法]：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"iostream"</span></span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isPerfectNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10000</span>;i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = isPerfectNumber(i);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isPerfectNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">6</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n/<span class="number">2</span> + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>)sum += i;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[算法]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode算法题]]></title>
    <link href="http://yoursite.com/2016/04/14/LeetCode%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/14/LeetCode算法题/</id>
    <published>2016-04-14T10:32:38.000Z</published>
    <updated>2016-04-25T11:58:10.705Z</updated>
    <content type="html"><![CDATA[<h3 id="Day9-Power_of_Four">Day9.<a href="https://leetcode.com/problems/power-of-four/" target="_blank" rel="external">Power of Four</a></h3><blockquote>
<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Given num = <span class="number">16</span>, <span class="keyword">return</span> <span class="literal">true</span>. Given num = <span class="number">5</span>, <span class="keyword">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>
<p>Solution:O(n)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(num &amp; (num-<span class="number">1</span>)))&#123;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="built_in">log</span>(num) * <span class="number">1.0</span>/<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(res - round(res)) &lt; <span class="number">0.0000001</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day8-Integer_Break">Day8.<a href="https://leetcode.com/problems/integer-break/" target="_blank" rel="external">Integer Break</a></h3><blockquote>
<p>Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For example, given n = <span class="number">2</span>, <span class="keyword">return</span> <span class="number">1</span> (<span class="number">2</span> = <span class="number">1</span> + <span class="number">1</span>); given n = <span class="number">10</span>, <span class="keyword">return</span> <span class="number">36</span> (<span class="number">10</span> = <span class="number">3</span> + <span class="number">3</span> + <span class="number">4</span>).</span><br></pre></td></tr></table></figure>
<p>Solution:O(n)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">4</span>)<span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        res *= <span class="number">3</span>;</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)<span class="keyword">return</span> res / <span class="number">3</span> * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)<span class="keyword">return</span> res * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day7-Reverse_String">Day7.<a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">Reverse String</a></h3><blockquote>
<p>Write a function that takes a string as input and returns the string reversed.</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Example:</span></span><br><span class="line">Given s = <span class="string">"hello"</span>, <span class="keyword">return</span> <span class="string">"olleh"</span>.</span><br></pre></td></tr></table></figure>
<p>My solution:O(n)<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span>* reverseString(<span class="built_in">char</span>* s) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s == NULL)<span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = strlen(s);</span><br><span class="line">    <span class="built_in">char</span>* start,*<span class="keyword">end</span>;</span><br><span class="line">    start = s;</span><br><span class="line">    <span class="keyword">end</span> = s + <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; <span class="keyword">end</span>)&#123;</span><br><span class="line">        <span class="built_in">char</span> temp = *start;</span><br><span class="line">        *start = *<span class="keyword">end</span>;</span><br><span class="line">        *<span class="keyword">end</span> = temp;</span><br><span class="line">        start ++;</span><br><span class="line">        <span class="keyword">end</span> --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day6-Reverse_Vowels_of_a_String">Day6.<a href="https://leetcode.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="external">Reverse Vowels of a String</a></h3><blockquote>
<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Example <span class="number">1</span>:</span><br><span class="line">Given s = <span class="string">"hello"</span>, <span class="keyword">return</span> <span class="string">"holle"</span>.</span><br><span class="line">Example <span class="number">2</span>:</span><br><span class="line">Given s = <span class="string">"leetcode"</span>, <span class="keyword">return</span> <span class="string">"leotcede"</span>.</span><br></pre></td></tr></table></figure>
<p>My solution:O(n)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isVowels</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="comment">//大写转小写</span></span><br><span class="line">    <span class="keyword">if</span>(c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">        c += <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'a'</span> || c == <span class="string">'e'</span> || c == <span class="string">'i'</span> || c == <span class="string">'o'</span> || c == <span class="string">'u'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">reverseVowels</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">char</span> *pre,*end;</span><br><span class="line">    pre = s;</span><br><span class="line">    end = s + len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pre &lt; end)&#123;</span><br><span class="line">        <span class="keyword">while</span>(pre &lt; end &amp;&amp; !isVowels(*pre))pre ++;</span><br><span class="line">        <span class="keyword">while</span>(pre &lt; end &amp;&amp; !isVowels(*end))end --;</span><br><span class="line">        <span class="keyword">if</span>(isVowels(*pre) &amp;&amp; isVowels(*end)) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = *pre;</span><br><span class="line">            *pre = *end;</span><br><span class="line">            *end = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        pre++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day5-Power_of_Three">Day5.<a href="https://leetcode.com/problems/power-of-three/" target="_blank" rel="external">Power of Three</a></h3><blockquote>
<p>Given an integer, write a function to determine if it is a power of three.<br>Follow up:<br>Could you do it without using any loop / recursion?</p>
</blockquote>
<p>Solution:O(1)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//误差限制,另外本来应该用round，但是发现ceil所有测试实例都通过了，也就是所有情况res &lt; ceil(res)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> <span class="built_in">exp</span> = <span class="number">10e-15</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(res - <span class="built_in">ceil</span>(res)) &lt; <span class="built_in">exp</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day4-Median_of_Two_Sorted_Arrays">Day4.<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">Median of Two Sorted Arrays</a></h3><blockquote>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
</blockquote>
<p>My Solution1:O(N)<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">double findMedianSortedArrays(<span class="type">int</span>* nums1, <span class="type">int</span> nums1Size, <span class="type">int</span>* nums2, <span class="type">int</span> nums2Size) &#123;</span><br><span class="line">    //？这里有个想法，建两个个小根堆，大小为index - <span class="number">1</span>(n) ，index，直接夹出来那个一个或n个中间元素</span><br><span class="line">    <span class="type">int</span> size = nums1Size + nums2Size;</span><br><span class="line">    double <span class="literal">result</span>;</span><br><span class="line">    //全为空</span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    //不全为空</span><br><span class="line">    <span class="type">int</span> flag = size % <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> midIndex = (size - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    //一个为空</span><br><span class="line">    <span class="keyword">if</span>(nums1Size == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)<span class="literal">result</span> = *(nums2 + midIndex);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="literal">result</span> = (*(nums2 + midIndex) + *(nums2 + midIndex +<span class="number">1</span>))/<span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nums2Size == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)<span class="literal">result</span> = *(nums1 + midIndex);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="literal">result</span> = (*(nums1 + midIndex) + *(nums1 + midIndex +<span class="number">1</span>))/<span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //两个均不为空</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i + j &lt; midIndex)&#123;</span><br><span class="line">        //防止数组越界</span><br><span class="line">        <span class="keyword">if</span>(i &lt; nums1Size &amp;&amp; *(nums1 + i) &lt;= *(nums2 + j))i ++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j &lt; nums1Size &amp;&amp; *(nums1 + i) &gt; *(nums2 + j))j ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="literal">result</span> = (*(nums1 + i) + *(nums2 + j))/<span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="literal">result</span> = *(nums1 + i) &lt; *(nums2 + j)?*(nums1 + i):*(nums2 + j);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>My Solution2:O(n)</p>
<h3 id="Day3-Longest_Substring_Without_Repeating_Characters">Day3.<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="external">Longest Substring Without Repeating Characters</a></h3><blockquote>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given <span class="string">"abcabcbb"</span>, <span class="operator">the</span> answer is <span class="string">"abc"</span>, which <span class="operator">the</span> <span class="built_in">length</span> is <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">Given <span class="string">"bbbbb"</span>, <span class="operator">the</span> answer is <span class="string">"b"</span>, <span class="operator">with</span> <span class="operator">the</span> <span class="built_in">length</span> <span class="operator">of</span> <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">Given <span class="string">"pwwkew"</span>, <span class="operator">the</span> answer is <span class="string">"wke"</span>, <span class="operator">with</span> <span class="operator">the</span> <span class="built_in">length</span> <span class="operator">of</span> <span class="number">3.</span> Note that <span class="operator">the</span> answer must be <span class="operator">a</span> substring, <span class="string">"pwke"</span> is <span class="operator">a</span> subsequence <span class="operator">and</span> <span class="operator">not</span> <span class="operator">a</span> substring.</span><br></pre></td></tr></table></figure>
<p>My Solution:O(N):<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/14.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"iostream"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"string.h"</span></span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 最长不重复子串</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span>* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入字符串\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> length = lengthOfLongestSubstring(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n子串长度为 %d"</span>, length);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录字符串位置</span></span><br><span class="line">    <span class="keyword">int</span> hashTable[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(hashTable, -<span class="number">1</span>, <span class="keyword">sizeof</span>(hashTable));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *slow, *fast;</span><br><span class="line">    fast = slow = s;</span><br><span class="line">    <span class="comment">//缓存一次历史数据</span></span><br><span class="line">    <span class="keyword">int</span> history_fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> history_slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*fast != <span class="string">'\0'</span>) &#123;</span><br><span class="line">        <span class="comment">//大于或等于碰撞点进入数据更改，初始碰撞点为0</span></span><br><span class="line">        <span class="keyword">if</span> (hashTable[*fast] &gt;= history_fast &amp;&amp; hashTable[*fast] &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//未更新的fast位置</span></span><br><span class="line">            history_fast = hashTable[*fast];</span><br><span class="line">            <span class="comment">//未更新slow的位置</span></span><br><span class="line">            history_slow = hashTable[*slow];</span><br><span class="line">            slow = s + history_fast + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新碰撞位置</span></span><br><span class="line">        hashTable[*fast] = i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            length = hashTable[*fast] - history_slow;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            length = hashTable[*fast] - hashTable[*slow] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxLength &lt; length)maxLength = length;</span><br><span class="line">        <span class="comment">//O(n)的指针不回退</span></span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印出该字符串</span></span><br><span class="line">    <span class="keyword">int</span> x = maxLength;</span><br><span class="line">    <span class="keyword">while</span>(x -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,*slow);</span><br><span class="line">        slow ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day2-add-two-numbers">Day2.<a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="external">add-two-numbers</a></h3><blockquote>
<p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>My Solution:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct ListNode *next;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) &#123;</span><br><span class="line">    //分配头结点内存</span><br><span class="line">    struct ListNode* la;</span><br><span class="line">    struct ListNode* p = (struct ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">    la = p;</span><br><span class="line">    if(l1 == NULL)&#123;</span><br><span class="line">        return l2;</span><br><span class="line">    &#125;</span><br><span class="line">    if(l2 == NULL)&#123;</span><br><span class="line">        return l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int carrier = <span class="number">0</span>;</span><br><span class="line">    int sum;</span><br><span class="line">    while(l1-&gt;next != NULL &amp;&amp; l2-&gt;next != NULL)&#123;</span><br><span class="line"></span><br><span class="line">        sum = l1-&gt;val + l2-&gt;val + carrier;</span><br><span class="line"></span><br><span class="line">        carrier = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        struct ListNode* <span class="keyword">node</span><span class="identifier"> </span><span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;next</span> = NULL;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">        p</span> = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line"></span><br><span class="line">        l1</span> = l1-&gt;next;</span><br><span class="line">        l2 = l2-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int flag = <span class="number">0</span>;</span><br><span class="line">    //必定有一个到达链表末端</span><br><span class="line">    //l2到达末端</span><br><span class="line">    sum = l1-&gt;val + l2-&gt;val + carrier;</span><br><span class="line">    while(l1-&gt;next != NULL)&#123;</span><br><span class="line">        if(flag == <span class="number">0</span>)flag = <span class="number">1</span>;</span><br><span class="line">        struct ListNode* <span class="keyword">node</span><span class="identifier"> </span><span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        carrier = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">        l1 = l1-&gt;next;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">        p</span> = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">        sum</span> = l1-&gt;val + carrier;</span><br><span class="line">    &#125;</span><br><span class="line">    //l1 到达末端</span><br><span class="line">    while(l2-&gt;next != NULL)&#123;</span><br><span class="line">        if(flag == <span class="number">0</span>)flag = <span class="number">2</span>;</span><br><span class="line">        struct ListNode* <span class="keyword">node</span><span class="identifier"> </span><span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        carrier = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">        l2 = l2-&gt;next;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">        p</span> = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">        sum</span> = l2-&gt;val + carrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct ListNode* <span class="keyword">node</span><span class="identifier"> </span><span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">    if(flag == <span class="number">0</span>)&#123;</span><br><span class="line">        sum = carrier + l1-&gt;val + l2-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag == <span class="number">1</span>)&#123;</span><br><span class="line">        sum = carrier + l1-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag == <span class="number">2</span>)&#123;</span><br><span class="line">        sum = carrier +l2-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    carrier = sum / <span class="number">10</span>;</span><br><span class="line">    sum = sum % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">    <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;next</span> = NULL;</span><br><span class="line">    p-&gt;next = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">    p</span> = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line"></span><br><span class="line">    if</span>(carrier != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"> </span><span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;val</span> = carrier;</span><br><span class="line">        <span class="keyword">node</span><span class="identifier"></span><span class="title">-&gt;next</span> = NULL;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="identifier"></span><span class="title">;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return</span> la-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day1-two-sum">Day1.<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">two-sum</a></h3><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure>
<p>my solution:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Note</span>: <span class="type">The</span> returned <span class="type">array</span> must be malloced, assume caller calls free().</span><br><span class="line"> */</span><br><span class="line"><span class="type">int</span> <span class="literal">result</span>[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span>* twoSum(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>* p = nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numsSize &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; numsSize;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>;j &lt; numsSize;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*(p + i) + *(p + j) == target)&#123;</span><br><span class="line">                <span class="literal">result</span>[<span class="number">0</span>] = i;</span><br><span class="line">                <span class="literal">result</span>[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == numsSize &amp;&amp; j == numsSize)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果数组有序,可以用二分法查找<br>Solution：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bSearch</span><span class="params">(<span class="keyword">int</span>* nums,<span class="keyword">int</span> numsSize,<span class="keyword">int</span> target)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nums[<span class="number">4</span>] = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>* p = twoSum(nums,<span class="number">4</span>,<span class="number">13</span>);</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,*p,*(p + <span class="number">1</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"未找到"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> result[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = nums;</span><br><span class="line">    <span class="keyword">if</span>(numsSize &lt; <span class="number">2</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numsSize;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> bTarget = target - *(p + i);</span><br><span class="line">        <span class="keyword">int</span>* pS = p + i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> bSize = numsSize - i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">if</span>(bSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = bSearch(pS, bSize, bTarget);</span><br><span class="line">            <span class="keyword">if</span>(index != -<span class="number">1</span> &amp;&amp; *(p + i) + *(p + index + i + <span class="number">1</span>) == target)&#123;</span><br><span class="line">                result[<span class="number">1</span>] = index + i + <span class="number">1</span>;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bSearch</span><span class="params">(<span class="keyword">int</span>* nums,<span class="keyword">int</span> numsSize,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>,high = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span>(target &lt; *nums)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(target &gt; *(nums + numsSize - <span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (*(nums + mid) == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*(nums + mid) &gt; target)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[一天一道算法题，持之以恒！up!  up!   up!]]>
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Algrithm" scheme="http://yoursite.com/categories/Algrithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[腾讯SNG面试经历]]></title>
    <link href="http://yoursite.com/2016/04/11/%E8%85%BE%E8%AE%AFSNG%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>http://yoursite.com/2016/04/11/腾讯SNG面试经历/</id>
    <published>2016-04-11T06:37:50.000Z</published>
    <updated>2016-04-11T07:42:06.357Z</updated>
    <content type="html"><![CDATA[<h3 id="一面（回忆版）">一面（回忆版）</h3><blockquote>
<p>本来是准备等到下午六点就准备回去，因为放在那儿的简历一直躺在那儿，没人要。早晨10点钟过来，到了霸面区，hr姐姐说，霸面的同学简历放在这儿，我穿过人群过去一看，好多简历，各种漂亮的简历。<br>晚上5点45分有个面试官过来看了下后台开发的简历，晒走了两份，我一看，哎，命中了，有点欣喜。<br>大约6点钟，经过签到，然后去等待叫号。</p>
</blockquote>
<p>面试开始了，首先自我介绍。<br>面试官很年轻，一开始在填写我的信息。然后说他们那个系统很烂，然后不是他开发的，所以很无语。</p>
<ol>
<li>你最熟悉的语言是什么？为什么选择java,哪一点最吸引你！</li>
<li>Java语言的优缺点？</li>
<li>Java的特性</li>
<li>SSH三个分别是什么东西？struts负责那一部分，Spring干嘛的，hibernate作用。 </li>
<li>有了解过平衡二叉树，红黑树吗？查找的时间复杂度是多少，怎么来的？<br><a href="http://blog.csdn.net/niteip/article/details/11840691" target="_blank" rel="external">平衡二叉树</a><br><a href="http://blog.csdn.net/chenhuajie123/article/details/11951777" target="_blank" rel="external">红黑树</a></li>
<li>对排序算法熟悉吗？快排序时间复杂度，为什么是O(nlogn)<br><a href="http://blog.csdn.net/whuslei/article/details/6442755" target="_blank" rel="external">常见排序算法</a></li>
<li>mysql的性能？<br>（一脸懵逼）然后我问是指什么，面试官说TPS，还是不知道，我说大约10w吧，之前查询数据的时候1s差不多10w条，然后面试官说，你这有依据吗<br><a href="http://f.dataguru.cn/thread-385925-1-1.html" target="_blank" rel="external">关于qps一点资料</a></li>
<li>你对mysql的了解，说说？（好多这样开放性的题目，能说多少就说多少）mysql索引是什么数据结构<br><a href="http://my.oschina.net/u/554660/blog/284653" target="_blank" rel="external">B+</a></li>
<li>数据库的ACID了解吗？1,2,3NF知道吗？<br><a href="http://www.cnblogs.com/CareySon/archive/2012/01/29/2331088.html" target="_blank" rel="external">ACID</a><br><a href="http://blog.csdn.net/xuxurui007/article/details/7738330" target="_blank" rel="external">1,2,3,BCNF</a></li>
<li>在海量数据里面选出最大的1000条数据怎么做？（内存不够）</li>
</ol>
<h3 id="二面">二面</h3><blockquote>
<p>在昨天晚上，实验室大部分人都走了，正在看一个人B+树博客的时候，突然手机一响，我看了下。竟然是一面过了，邀请明天10点面试，想想好激动。去大堂签到，然后等待叫号,惴惴不安。突然一个短信来了，心里一叮咚，这就开始啦。</p>
</blockquote>
<p>上楼看了找房间，房号，结果们关着。。。<br>我礼貌的敲了下们，没人。我纳闷，结果发现门旁边有个门铃，我按了两下，好像有动静，然后再按了下，门开了。</p>
<p>打了个招呼，我报了下自己的名字，是来面试的。<br>面试开始了，首先自我介绍。</p>
<ol>
<li>直接就开始聊起了项目，了解最熟悉最拿手的项目。</li>
<li>对js熟悉吗，angular js, facebook的js框架。<br><a href="http://www.apjs.net/" target="_blank" rel="external">angular js</a><br><a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="external">React.js</a></li>
<li>项目里面有个安卓自己开发的项目，然后面试官想看看效果，刚好前几天，我把它放在我的github博客上了！</li>
<li>研究生阶段是学的什么课程，学过一些什么，知道AWS吗？</li>
<li>本科学校是什么，专业，估计面试官很看重出身吧！</li>
<li>然后面试官介绍了他们项目组是SNG,目前最业务状况和需要哪方面的人才！</li>
</ol>
<p>全程下来没有聊任何技术方面的，不知道结果如何，waiting!</p>
]]></content>
    <summary type="html">
    <![CDATA[尽管没参加腾讯的笔试，听同学说可以霸面，去试了试自己的水平。昨晚腾讯社交网络事业群SNG后台面试相关内容，record一下！]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近面试集锦]]></title>
    <link href="http://yoursite.com/2016/03/24/%E6%9C%80%E8%BF%91%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2016/03/24/最近面试集锦/</id>
    <published>2016-03-24T06:15:39.000Z</published>
    <updated>2016-03-29T12:42:51.444Z</updated>
    <content type="html"><![CDATA[<h3 id="蘑菇街二面">蘑菇街二面</h3><blockquote>
<p>蘑菇街，在大学有女朋友的时候听说的，倡导一种弹性自由轻时尚女性购物文化。开始以为蘑菇街是阿里旗下，原来淘宝也只是供货商而已（PS:实话实说）。值得一提的是，相比阿里，我更喜欢蘑菇街的面试官的准时和HR对待面试人员的贴心程度！</p>
</blockquote>
<p>整个面试半个小时</p>
<ol>
<li>自我介绍</li>
<li>LinkedList和ArrayList的区别？LinkedList实现是单链表还是双链表结构？</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Doubly-linked list implementation of the &#123;@code List&#125; and &#123;@code Deque&#125;</span><br><span class="line"> * interfaces.  Implements all optional list operations, and permits all</span><br><span class="line"> * elements (including &#123;@code null&#125;).</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>JDK上面的解释：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure>
<p>List 接口的链接列表实现。实现所有可选的列表操作，并且允许所有元素（包括 null）。除了实现 List 接口外，LinkedList 类还为在列表的开头及结尾 get、remove 和 insert 元素提供了统一的命名方法。这些操作允许将链接列表用作堆栈、队列或双端队列。</p>
<p>此类实现 Deque 接口，为 add、poll 提供先进先出队列操作，以及其他堆栈和双端队列操作。</p>
<p>所有操作都是按照双重链接列表的需要执行的。在列表中编索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。</p>
<p>注意，此实现不是同步的。如果多个线程同时访问一个链接列表，而其中至少一个线程从结构上修改了该列表，则它必须 保持外部同步。（结构修改指添加或删除一个或多个元素的任何操作；仅设置元素的值不是结构修改。）这一般通过对自然封装该列表的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 Collections.synchronizedList 方法来“包装”该列表。最好在创建时完成这一操作，以防止对列表进行意外的不同步访问，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> LinkedList(...));</span><br></pre></td></tr></table></figure>
<p>此类的 iterator 和 listIterator 方法返回的迭代器是快速失败 的：在迭代器创建之后，如果从结构上对列表进行修改，除非通过迭代器自身的 remove 或 add 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来不确定的时间任意发生不确定行为的风险。</p>
<p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何硬性保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。</p>
<p>此类是 Java Collections Framework 的成员。</p>
<ol>
<li>了解HashMap吗？与HashTable有什么区别？</li>
<li>Java里面的基本类型<br>基本类型：boolean char short byte int long float double(8个)</li>
<li>谈谈你是怎么学习android，遇到过哪些困难，如何解决的<br><a href="http://www.cnblogs.com/newcj/archive/2011/05/30/2061370.html" target="_blank" rel="external">http://www.cnblogs.com/newcj/archive/2011/05/30/2061370.html</a></li>
<li>算法题：将一个数分解为素数的乘积<br>我写了一个很蹩脚的程序。。。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resolve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">            n = n / i;</span><br><span class="line">            print(<span class="string">"%d"</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="阿里一面">阿里一面</h3><blockquote>
<p>很普通的面试，每个问题问到你不懂为止。但是这个面试官是唯一一个认真看完我的简历的人，很感动！因为没提到的一个问题都是关于我的项目。虽然很不堪，但是自身的不足是明显的事情！所以继续加油准备。</p>
<h4 id="数据结构">数据结构</h4></blockquote>
<ol>
<li><a href="http://www.cnblogs.com/perfy/p/3820594.html" target="_blank" rel="external">堆和栈的区别</a><br>成员变量存放在堆上<br>局部变量，Java栈上<br>操作数存放在栈顶，一般实现是物理CPU寄存器</li>
<li><a href="http://blog.csdn.net/stormlovetao/article/details/8665506" target="_blank" rel="external">大根堆和小根堆</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4e0c21cc01010itp.html" target="_blank" rel="external">B+树是什么数</a></li>
</ol>
<h4 id="IDEA和eclipse_ide有和区别">IDEA和eclipse ide有和区别</h4><h4 id="java基础">java基础</h4><ol>
<li>熟悉的classLoader有哪些<br><a href="http://www.cnblogs.com/Lawson/archive/2012/07/31/2616623.html" target="_blank" rel="external">http://www.cnblogs.com/Lawson/archive/2012/07/31/2616623.html</a><br><a href="http://ifeve.com/classloader/" target="_blank" rel="external">http://ifeve.com/classloader/</a></li>
<li><a href="http://www.open-open.com/bbs/view/1320131360999/" target="_blank" rel="external">Concurrent包有了解多少</a></li>
<li>CAS是怎么实现的<br><a href="http://www.tuicool.com/articles/zuui6z" target="_blank" rel="external">http://www.tuicool.com/articles/zuui6z</a><br><a href="http://blog.csdn.net/hsuxu/article/details/9467651" target="_blank" rel="external">http://blog.csdn.net/hsuxu/article/details/9467651</a><br><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-cas/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/opensource/os-cn-cas/</a></li>
<li><p>JVM内存模型和回收机制<br><a href="http://www.cnblogs.com/dingyingsi/p/3760447.html" target="_blank" rel="external">http://www.cnblogs.com/dingyingsi/p/3760447.html</a><br><a href="http://jbutton.iteye.com/blog/1569746" target="_blank" rel="external">http://jbutton.iteye.com/blog/1569746</a></p>
</li>
<li><p>类什么时候被卸载<br><a href="http://www.cnblogs.com/mengdd/p/3594608.html" target="_blank" rel="external">http://www.cnblogs.com/mengdd/p/3594608.html</a><br><a href="http://yhjhappy234.blog.163.com/blog/static/316328322011101413730764/" target="_blank" rel="external">http://yhjhappy234.blog.163.com/blog/static/316328322011101413730764/</a></p>
</li>
<li>线程同步lock里面的一些方法<br><a href="http://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3923167.html</a><br><a href="http://www.2cto.com/kf/201302/189404.html" target="_blank" rel="external">http://www.2cto.com/kf/201302/189404.html</a></li>
</ol>
<h4 id="JavaEE">JavaEE</h4><ol>
<li>Spring 的AOP和IOC分别是什么，日常使用在哪些方面了？<br>基本原则：业务逻辑代码应该写在 M 里面，而应用程序逻辑应该写在 C 里面。V 只是单纯的展示数据。<br>1：数据访问层：主要看数据层里面有没有包含逻辑处理，实际上它的各个函数主要完成各个对数据文件的操作。而不必管其他操作。<br>2：业务逻辑层：主要负责对数据层的操作。也就是说把一些数据层的操作进行组合。<br>3：表示层：主要对用户的请求接受，以及数据的返回，为客户端提供应用程序的访问。<br>而Struts只实现了MVC的View和Controller两个部分，Model部分需要开发者自己来实现，Struts提供了抽象类Action使开发者能将Model应用于Struts框架中。<br><a href="http://blog.csdn.net/kiss_vicente/article/details/6902879" target="_blank" rel="external">http://blog.csdn.net/kiss_vicente/article/details/6902879</a><br><a href="http://bbs.csdn.net/topics/350251143" target="_blank" rel="external">http://bbs.csdn.net/topics/350251143</a></li>
<li>hibernate缓存机制？<br><a href="http://zhidao.baidu.com/link?url=5nqJQAJH4UahoxwzeTs-G1enHJ_s-5mCer-Xr91y5PQ7KmDtDjS0r_coyKxQ2qBtCrXJVmuCYkNpE2NWyCaLBa" target="_blank" rel="external">http://zhidao.baidu.com/link?url=5nqJQAJH4UahoxwzeTs-G1enHJ_s-5mCer-Xr91y5PQ7KmDtDjS0r_coyKxQ2qBtCrXJVmuCYkNpE2NWyCaLBa</a><br><a href="http://blog.csdn.net/defonds/article/details/2308972" target="_blank" rel="external">http://blog.csdn.net/defonds/article/details/2308972</a></li>
<li>谈谈你是怎么学习android，遇到过哪些困难，如何解决的？<br><a href="http://blog.csdn.net/mirkerson/article/details/7238815" target="_blank" rel="external">http://blog.csdn.net/mirkerson/article/details/7238815</a><br><a href="http://blog.csdn.net/hpoi/article/details/4629065" target="_blank" rel="external">android生命周期</a></li>
</ol>
<h3 id="网易笔试（部分回忆）">网易笔试（部分回忆）</h3><ol>
<li>观察者模式，设计模式20+！</li>
<li>关于Eden,From Survivor,To Survivor,Old计算<br>Xms指你的程序的初始化内存大小，Xmx指定你的程序占用的最大内存。单位默认字节，可以采用k,m做为单位。<br>Xmn是指分给年轻代大小<br>SurvivorRation:是Eden：Survivor比例.<br>-XX:NewRatio=4，年轻代和老年代的比值是1:4<br>-XX:MaxPermSize=16m:设置持久代大小为16m。<br>-XX:MaxTenuringThreshold=0：设置垃圾最大年龄。</li>
<li>ClassNotFoundException和ClassNotDefException区别<br>一个是加载时候没找到，一个是在连接时候没找到</li>
<li>shell语言里面的权限<br><a href="http://www.cnblogs.com/younes/archive/2009/11/20/1607174.html" target="_blank" rel="external">http://www.cnblogs.com/younes/archive/2009/11/20/1607174.html</a></li>
</ol>
<h3 id="java学习">java学习</h3><ol>
<li><a href="http://www.zhihu.com/question/19851109" target="_blank" rel="external">知识图谱</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3592500.html" target="_blank" rel="external">关于equals和==的最佳解释</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[这两天忙于论文版权注册和面试，蘑菇街给我的印象是这个公司很亲切很自由，打电话HR妹纸也非常贴心，点个赞！]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BAT面试准备]]></title>
    <link href="http://yoursite.com/2016/03/21/BAT%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2016/03/21/BAT面试准备/</id>
    <published>2016-03-21T13:44:05.000Z</published>
    <updated>2016-04-20T04:39:35.559Z</updated>
    <content type="html"><![CDATA[<h3 id="算法">算法</h3><h4 id="数组、链表">数组、链表</h4><ol>
<li><a href="http://www.cppblog.com/cxiaojia/archive/2012/07/31/185760" target="_blank" rel="external">http://www.cppblog.com/cxiaojia/archive/2012/07/31/185760</a></li>
<li><a href="http://blog.csdn.net/hackbuteer1/article/details/6591486/" target="_blank" rel="external">http://blog.csdn.net/hackbuteer1/article/details/6591486/</a></li>
<li><a href="http://blog.csdn.net/pony_maggie/article/details/38390513" target="_blank" rel="external">http://blog.csdn.net/pony_maggie/article/details/38390513</a></li>
<li><a href="http://blog.csdn.net/niteip/article/details/11840691" target="_blank" rel="external">AVL</a> </li>
</ol>
<ul>
<li><a href="http://blog.csdn.net/vesper305/article/details/13614403" target="_blank" rel="external">AVL平衡二叉树中旋转操作的本质及其实现</a></li>
</ul>
<ol>
<li><a href="http://blog.csdn.net/stpeace/article/details/9067029" target="_blank" rel="external">BST</a></li>
<li><a href="http://www.cnblogs.com/oldhorse/archive/2009/11/16/1604009.html" target="_blank" rel="external">B，B+,B-</a></li>
<li><a href="http://blog.csdn.net/tonyxf121/article/details/8393545" target="_blank" rel="external">http://blog.csdn.net/tonyxf121/article/details/8393545</a></li>
<li><a href="http://blog.csdn.net/chenhuajie123/article/details/11900153" target="_blank" rel="external">http://blog.csdn.net/chenhuajie123/article/details/11900153</a></li>
<li><a href="http://blog.csdn.net/ganggexiongqi/article/details/7449970" target="_blank" rel="external">http://blog.csdn.net/ganggexiongqi/article/details/7449970</a></li>
<li><a href="http://blog.csdn.net/yutianzuijin/article/details/11954939/" target="_blank" rel="external">http://blog.csdn.net/yutianzuijin/article/details/11954939/</a> </li>
</ol>
<h4 id="排序">排序</h4><h3 id="Java">Java</h3><h4 id="String，StringBuffer,StringBuilder区别">String，StringBuffer,StringBuilder区别</h4><ol>
<li><a href="http://blog.csdn.net/clam_clam/article/details/6831345" target="_blank" rel="external">http://blog.csdn.net/clam_clam/article/details/6831345</a></li>
<li><a href="http://www.cnblogs.com/xudong-bupt/p/3961159.html" target="_blank" rel="external">http://www.cnblogs.com/xudong-bupt/p/3961159.html</a></li>
</ol>
<h4 id="HashMap和HashMap区别，能否存储空值">HashMap和HashMap区别，能否存储空值</h4><ol>
<li><a href="http://www.cnblogs.com/carbs/archive/2012/07/04/2576995" target="_blank" rel="external">http://www.cnblogs.com/carbs/archive/2012/07/04/2576995</a></li>
<li><a href="http://blog.csdn.net/wl_ldy/article/details/5941770" target="_blank" rel="external">http://blog.csdn.net/wl_ldy/article/details/5941770</a></li>
</ol>
<h4 id="ArrayList和HashMap初始容量">ArrayList和HashMap初始容量</h4><ol>
<li><a href="http://blog.csdn.net/java2000_net/article/details/5215882" target="_blank" rel="external">http://blog.csdn.net/java2000_net/article/details/5215882</a></li>
<li><a href="http://ask.csdn.net/questions/178013" target="_blank" rel="external">http://ask.csdn.net/questions/178013</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_45ff7c3f0100bwan.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_45ff7c3f0100bwan.html</a></li>
<li><a href="http://blog.csdn.net/ghsau/article/details/16890151" target="_blank" rel="external">http://blog.csdn.net/ghsau/article/details/16890151</a></li>
</ol>
<h4 id="并发编程，线程，线程池，加锁">并发编程，线程，线程池，加锁</h4><ol>
<li><a href="http://blog.csdn.net/jackfrued/article/details/44499227" target="_blank" rel="external">并发思想</a></li>
<li><a href="http://www.cnblogs.com/riskyer/p/3263032" target="_blank" rel="external">http://www.cnblogs.com/riskyer/p/3263032</a></li>
<li><a href="http://blog.csdn.net/aboy123/article/details/38307539" target="_blank" rel="external">http://blog.csdn.net/aboy123/article/details/38307539</a></li>
<li><a href="http://blog.jobbole.com/76308/" target="_blank" rel="external">http://blog.jobbole.com/76308/</a></li>
<li><a href="http://developer.51cto.com/art/201509/490965.htm" target="_blank" rel="external">http://developer.51cto.com/art/201509/490965.htm</a></li>
<li><a href="http://blog.csdn.net/yangzhijun_cau/article/details/6432216" target="_blank" rel="external">http://blog.csdn.net/yangzhijun_cau/article/details/6432216</a></li>
<li><a href="http://cuisuqiang.iteye.com/blog/2019372" target="_blank" rel="external">http://cuisuqiang.iteye.com/blog/2019372</a></li>
<li><a href="http://www.cnblogs.com/lxzh/archive/2013/01/20/2868736.html" target="_blank" rel="external">http://www.cnblogs.com/lxzh/archive/2013/01/20/2868736.html</a></li>
</ol>
<h4 id="Comparable和Comparator的区别">Comparable和Comparator的区别</h4><ol>
<li><a href="http://www.cnblogs.com/sunflower627/p/3158042.html" target="_blank" rel="external">http://www.cnblogs.com/sunflower627/p/3158042.html</a></li>
<li><a href="http://www.codeceo.com/article/java-comparable-comparator.html" target="_blank" rel="external">http://www.codeceo.com/article/java-comparable-comparator.html</a></li>
</ol>
<h4 id="GC回收分代和回收">GC回收分代和回收</h4><ol>
<li><a href="http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html" target="_blank" rel="external">http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html</a></li>
<li><a href="http://blog.csdn.net/kennyrose/article/details/7543696" target="_blank" rel="external">http://blog.csdn.net/kennyrose/article/details/7543696</a></li>
</ol>
<h4 id="Collections方法">Collections方法</h4><ol>
<li><a href="http://pengcqu.iteye.com/blog/492196" target="_blank" rel="external">http://pengcqu.iteye.com/blog/492196</a></li>
<li><a href="http://blog.csdn.net/lskyne/article/details/8961014" target="_blank" rel="external">http://blog.csdn.net/lskyne/article/details/8961014</a></li>
<li><a href="http://blog.csdn.net/ameyume/article/details/6282051" target="_blank" rel="external">http://blog.csdn.net/ameyume/article/details/6282051</a></li>
<li><a href="http://www.cnblogs.com/gw811/archive/2012/10/10/2719134.html" target="_blank" rel="external">http://www.cnblogs.com/gw811/archive/2012/10/10/2719134.html</a></li>
</ol>
<h3 id="SQL">SQL</h3><h4 id="SQL基础，group_by等，修改表结构">SQL基础，group by等，修改表结构</h4><ol>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html</a></li>
<li><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="external">http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html</a></li>
<li><a href="http://www.cnblogs.com/daxian2012/articles/2767989.html" target="_blank" rel="external">http://www.cnblogs.com/daxian2012/articles/2767989.html</a></li>
<li><a href="http://www.cnblogs.com/rainman/archive/2013/05/01/3053703.html" target="_blank" rel="external">group by</a></li>
</ol>
<h4 id="缓存机制和MySQL调优">缓存机制和MySQL调优</h4><ol>
<li><a href="http://blog.csdn.net/wulantian/article/details/11043121" target="_blank" rel="external">http://blog.csdn.net/wulantian/article/details/11043121</a></li>
<li><a href="http://blog.csdn.net/gzh0222/article/details/8001362" target="_blank" rel="external">http://blog.csdn.net/gzh0222/article/details/8001362</a></li>
<li><a href="http://www.cnblogs.com/adforce/archive/2012/06/02/2532086.html" target="_blank" rel="external">http://www.cnblogs.com/adforce/archive/2012/06/02/2532086.html</a></li>
<li><a href="http://www.cnblogs.com/not-code/archive/2011/11/01/2231493.html" target="_blank" rel="external">http://www.cnblogs.com/not-code/archive/2011/11/01/2231493.html</a></li>
</ol>
<h3 id="进程调度">进程调度</h3><ol>
<li><a href="http://blog.csdn.net/dc_726/article/details/7985430" target="_blank" rel="external">进程基础知识</a></li>
<li><a href="http://blog.csdn.net/dc_726/article/details/8001783" target="_blank" rel="external">进程调度</a></li>
</ol>
<h3 id="Reference">Reference</h3><ol>
<li><a href="http://www.nowcoder.com/discuss/3043" target="_blank" rel="external">面试心得与总结—BAT、网易、蘑菇街</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_53f7991701000a2l.html" target="_blank" rel="external">JAVA和C++相比有什么优点呢？</a></li>
<li><a href="http://blog.csdn.net/lk_blog/article/details/13760999" target="_blank" rel="external">Java项目性能监控和调优工具-Javamelody</a></li>
<li><a href="http://liudeh-009.iteye.com/blog/1847876" target="_blank" rel="external">java内存调优工具</a></li>
<li><a href="http://www.cnblogs.com/magialmoon/archive/2013/11/23/3439042.html" target="_blank" rel="external">MySQL优化</a></li>
<li><a href="http://blog.csdn.net/xueshuangshuang123/article/details/8462261" target="_blank" rel="external">Hibernate 性能优化</a></li>
<li><a href="http://bbs.csdn.net/topics/390843777?page=1" target="_blank" rel="external">实际生活hibernate调优</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5198c7370100hvxb.html" target="_blank" rel="external">使用Spring进行面向切面编程</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[一年一度的BAT校招，千军万马过独木桥。失败，别气馁，勇敢向前冲！]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[互动派面试回忆]]></title>
    <link href="http://yoursite.com/2016/03/17/%E4%BA%92%E5%8A%A8%E6%B4%BE%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86/"/>
    <id>http://yoursite.com/2016/03/17/互动派面试回忆/</id>
    <published>2016-03-17T07:35:36.000Z</published>
    <updated>2016-03-17T09:09:35.339Z</updated>
    <content type="html"><![CDATA[<h3 id="笔试">笔试</h3><ol>
<li>linux查看系统目录</li>
<li>linux结束一个用户的进程，用管道的方式</li>
<li>单例模式</li>
<li>设计模式</li>
<li>浏览器输入URL到收到页面内容发生了什么？</li>
<li>MapReduce,HDFS,HBase,Hive等都用在什么情形</li>
<li>怎样用O(1)的空间复杂度和O(n)的时间复杂度旋转单链表</li>
<li>怎么确定单链表是否有环</li>
</ol>
<h3 id="面试">面试</h3><ol>
<li>怎么从重复的电话号码中查找出电话号码和重复次数，写出mysql</li>
<li>简历中模型里面的实现</li>
<li>SVM中如何判断一个进行分类的</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[塔布数据]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CVTE面试回忆]]></title>
    <link href="http://yoursite.com/2016/03/17/CVTE%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86/"/>
    <id>http://yoursite.com/2016/03/17/CVTE面试回忆/</id>
    <published>2016-03-17T07:02:36.000Z</published>
    <updated>2016-03-17T07:36:18.355Z</updated>
    <content type="html"><![CDATA[<h3 id="笔试">笔试</h3><ol>
<li><a href="http://wenku.baidu.com/link?url=u5nwwseVQMZZgdG0LYac0ve8D5XSXvAktz5Y9SG7XDExPb6xIBHBNn3GzcaDLRiD6l4GZbLvCpwSQloFQRWuah3wu54zAd3hKbUNbwJrCe7" target="_blank" rel="external">笔试题文档</a></li>
<li>笔试程序题：两个班成绩从高到低存放list1、list2怎样才能得到全年级的成绩？（假设全年级只有两个班）</li>
</ol>
<h3 id="技术面试">技术面试</h3><ol>
<li>hibernate优化</li>
<li>HashMap的结构、能不能存空值，HashTable能不能存空值 ArrayList的初始容量</li>
<li>LinkedList和ArrayList的区别</li>
<li>多线程的实现方式、加锁用过吗、线程池有没有接触过</li>
<li>怎么样自定义比较两个对象，提示Comparable和Comparator区别。</li>
<li>青蛙一次跳一步一次跳两步解决方法？（写出了递归方法，主考官还问到，这种方法的弊端；然后又写了个迭代方法）</li>
<li>sql，为什么mysql是小型数据库（后来想想答错了，应该是mysql并发量小，数据量不大）</li>
<li>写出mysql，学生表id name, 课程表 id course , 成绩表 stuid couid score.查询成绩大于两百分的学生名和分数</li>
<li>和导师的关系怎么样？导师如何评价你</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[短短CVTE二面结束了]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[腾讯OMG一面]]></title>
    <link href="http://yoursite.com/2016/03/02/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/03/02/腾讯一面/</id>
    <published>2016-03-02T02:01:37.000Z</published>
    <updated>2016-03-17T08:52:33.323Z</updated>
    <content type="html"><![CDATA[<h3 id="区域">区域</h3><h4 id="首先第一个问题就是，你对你工作的城市有没有限制？">首先第一个问题就是，你对你工作的城市有没有限制？</h4><ol>
<li>这个是在问你对我们事业群的位置有没有了解。比如腾讯OMG是在北京，而我目前是在广州，<br>你会觉得有点远。对于我嘛，我觉得没什么问题，毕竟我是一个人，没那么多牵挂。</li>
<li>当然如果你回答不想去北京，基本一面就结束了(一同学亲身经历)。</li>
</ol>
<h3 id="项目">项目</h3><h4 id="你最拿手的项目是哪个？">你最拿手的项目是哪个？</h4><p>从项目简介到项目架构来说，和使用的技术。</p>
<h4 id="你熟悉哪些前端js框架？">你熟悉哪些前端js框架？</h4><p>如EXT JS,DWR,Amazi UI,Bootstrap,Angular js等等。</p>
<h4 id="你熟悉哪些除了主流数据库mysql以外的数据库">你熟悉哪些除了主流数据库mysql以外的数据库</h4><p>mangodb,redis,nosql。</p>
<h4 id="MVC设计模式有什么好处？">MVC设计模式有什么好处？</h4><p>MVC设计模式优点在于:<br>1):测试友好性(如果你需要写单元测试的话,MVC会很不错的)<br>2):可定制性(在MVC中基本上所有的东西都是可以定制的,对于某些定制性要求比较高的工作可以轻易胜任)<br>3):代码清晰(CodeBehind虽说分离的不错,但是还是有很多人直接在CodeBehind里面写SQL的)<br>4):轻量级.(没有控件,没有视图状态,没有控件状态,页面加载速度快)<br>5):对HTML的控制比较深,比如div的id之类的(好吧,ASP.NET WebForm 4.0也加深了控制允许你控制控件生成的html的id)只有对HTML的结构比较清晰才容易写脚本不是.<br>6):开源.</p>
<p>MVC的不足体现在以下几个方面：<br>1):增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。<br>2):视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。<br>3):视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。<br>4):目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。</p>
<h4 id="java语言的优劣？">java语言的优劣？</h4><p>这个没答完全。<br>优点：简单性、面向对象、分布式、解释型、可靠、安全、平台无关、可移植、高性能、多线程、动态性等。<br>缺点：<br>第一: 运行速度慢，众所周知，Java程序的运行依赖于Java虚拟机，所以相对于其他语言(汇编,C,C++)编写的程序慢，因为它不是直接，执行机器码。<br>第二: 因为Java考虑到了跨平台性。所以他不能像语言<br>（例如:汇编,C) 那样更接近操作系统。也就不能和操作系统的底层打交道了。但可以通过Java的JNI<br>(即Java本地接口。顾名思义：也就是利用Java语言调用，在当前系统上 其他的程序语言 “汇编或C等”所编写的程序)技术，解决这一问题，但这只是解决了。</p>
<h4 id="如果要你重新学习php的话，你应该怎么学习它呢？">如果要你重新学习php的话，你应该怎么学习它呢？</h4><p>先看看php基本语法，然后再看设计思想和框架，最后在实战中一步一步的修炼。</p>
]]></content>
    <summary type="html">
    <![CDATA[昨晚的腾讯网络媒体事业群后台面试相关内容，record一下！]]>
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[医疗健康管理系统APP]]></title>
    <link href="http://yoursite.com/2016/03/01/%E5%8C%BB%E7%96%97%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FAPP/"/>
    <id>http://yoursite.com/2016/03/01/医疗健康管理系统APP/</id>
    <published>2016-03-01T08:43:41.000Z</published>
    <updated>2016-05-31T12:03:19.193Z</updated>
    <content type="html"><![CDATA[<h3 id="基本介绍">基本介绍</h3><p>私人健康小助手，它需要为用户提供友好的操作交互界面，方面用户的使用，并给出实时的合适的评测和建议，提供附近医生的地点并聊天。我们在客户的功能需求主要包含一下内容：</p>
<ul>
<li>身体信息采集<br>用户能够提交自己的身体参数，如血糖，血压，心跳等8个参数，心跳可以通过手机后置摄像头测得，其他参数需要手动输入。</li>
<li>饮食图片分析<br>用户可以上传当天的所食食物图片，后台根据图片分析出该图片是什么菜，并给出菜的大致的营养含量，如蛋白质，热量，碳水化合物含量。</li>
<li>历史分析<br>根据用户每天提交的身体参数，app会通过后台数据挖掘的模型，分析出一个概率，比如糖尿病：32.5%，高血压：20%。将每次测得的最高概率记录生成历史记录。用户可以根据曲线是否平稳，知道自己的身体是不是有生病的趋势。</li>
<li>预测并给出生活和饮食建议<br>根据图片分析和身体信息分析，综合给出生活建议和饮食建议。如果该用户可能会有潜在的糖尿病风险，那么不要吃含糖量比较高的食物。</li>
</ul>
<h3 id="软件详情">软件详情</h3><h4 id="启动页面">启动页面</h4><p>图2-1中SHMS为开发的软件 私人健康小助手，首先查看手机是否连网，连网后，点击图标SHMS打开应用。<br><img src="/uploads/softwares/s0.jpg" alt="图2-1"><br>图2-1</p>
<h4 id="APP启动页面">APP启动页面</h4><p>图2-2是APP启动欢迎页面，私人健康小助手，为页面初始化和数据准备做一个简单的缓冲。<br><img src="/uploads/softwares/s0_1.jpg" alt="图2-2"><br>图2-2</p>
<h4 id="程序页面介绍">程序页面介绍</h4><h5 id="自我诊断页面">自我诊断页面</h5><ol>
<li>输入手环或者智能终端测试的数据提交到后台分析得病的潜在概率。</li>
<li>用手机按住摄像头读取红色色素点傅里叶变换成心率曲线。<br>图2-3展示的是自我诊断页面(Self diagnose),用户可以通过点击右边的数字，会弹出对话框。可以填写自己的身体状况信息。<br><img src="/uploads/softwares/s2.jpg" alt="图2-3"><br>图2-3</li>
</ol>
<h5 id="信息输入">信息输入</h5><p>图2-4展示的是信息输入页面，点击图2-3中数字，可以弹出如下的对话框，可以上下滑动，然后Confirm确认输入，Cancel取消输入。输入的数据会最终显示在图2-3中，点击按钮Submit会提交至图2-6所示的页面，预测结果会以饼状图显示。<br><img src="/uploads/softwares/s2_1.jpg" alt="图2-4"><br>图2-4</p>
<h5 id="脉搏测量">脉搏测量</h5><p>点击图2-3HeartBeat右侧的数字会显示如图2-5所示的界面。界面会提示用户将手指按住后置摄像头，然后会出现心跳的频率。并将结果提交到图2-3<br>中。<br><img src="/uploads/softwares/s3_1.jpg" alt="图2-5"><br>图2-5</p>
<h5 id="预测结果展示">预测结果展示</h5><p>图2-3中点击Submit,会将输入的身体状况信息提交至图2-6，并以饼图的形式展示，里面百分比数据是代表预测出该疾病的潜在发生概率，如果超过60%就表明身体状况有些危险。该页面有历史分析（Historic Analysis），点击该按钮，跳转至图2-13的历史分析图。<br><img src="/uploads/softwares/s4_2.jpg" alt="图2-6"><br>图2-6</p>
<p>输入不同的数据，会展示不同的概率饼图，图2-7展示就是血糖过高的一个实际例子，高达90%的概率，这基本已经确定是糖尿病人。</p>
<p><img src="/uploads/softwares/s4_2.jpg" alt="图2-7"><br>图2-7</p>
<h5 id="饮食分析">饮食分析</h5><ul>
<li>读取并拍摄获取手机里的食物照片，分析食物的分量如含糖量，碳水化合物的含量。<br>图2-8中展示的是饮食分析页面。用户可以上传当天饮食情况，打出相关标签，并上传至服务器。分析菜的分量。点击Submit提交至图2-10。</li>
</ul>
<p><img src="/uploads/softwares/s5.jpg" alt="图2-8"><br>图2-8</p>
<p>点击图2-8中的小龙虾图片，会展示如图2-9底栏对话框。可以选择拍照，上传图片等功能。最终选择的图片会展示在图2-8小龙虾的位置。下面有一个文本框。这个是在后台无法识别该图片的时候。用户可以打一个标签，如小龙虾。这样后台可以给出一个如图2-10的图片。</p>
<p><img src="/uploads/softwares/s5_1.jpg" alt="图2-9"><br>图2-9</p>
<h5 id="食物摄入量">食物摄入量</h5><p>图2-9中上传的图片和打出的标签，传入服务器后台，会给出一个营养成分柱状表。有卡路里，碳水化合物，脂肪，蛋白质，纤维素的含量。单位为100g。<br><img src="/uploads/softwares/s5_2.jpg" alt="图2-10"><br>图2-10</p>
<h5 id="健康建议">健康建议</h5><ul>
<li>根据前两者给出相关饮食和生活建议。<br>图2-11中根据自我诊断和饮食分析建立的该用户的画像，分析给出适当的生活和饮食建议。点击右上方的时间图标同样可以看到图2-13的历史分析页面。记录用户使用以来的身体状况是否平稳。<br><img src="/uploads/softwares/s12.jpg" alt="图2-11"><br>图2-11</li>
</ul>
<p>图2-12展示的是不同的信息输入和饮食分析，会出现不同的分析结果。图2-11展示的是胆固醇高的用户，图2-12展示的是图2-7展示对应的血糖高的用户。<br><img src="/uploads/softwares/s13.jpg" alt="图2-12"><br>图2-12</p>
<h5 id="历史记录">历史记录</h5><p>图2-13展示的是历史记录。每次用户测试之后都会有一个最高概率，如果最高概率超过阈值就会被记录在折线图中。此处展示的是没有设置阈值的情况。<br><img src="/uploads/softwares/s14.jpg" alt="图2-13"><br>图2-13</p>
<h5 id="查找医生">查找医生</h5><ul>
<li>根据百度地图定位周边医生，发送自己的身体状况分析报告，并可以和医生在线聊天询问病情发展。<br>会根据百度地图提供附近医生的信息，可以向医生传输发送自己的数据，让医生给出一些合适的建议。此功能正在修改当中，未来会逐渐完善。</li>
</ul>
<h3 id="问题反馈">问题反馈</h3><p>以上就是私人健康小助手的全部功能介绍。如有问题,欢迎发送邮件至chxu@m.scnu.edu.cn.</p>
]]></content>
    <summary type="html">
    <![CDATA[论文demo中的一个小android程序，大部分实现过程都是之前发过的Android教程。]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之相机相册服务调用]]></title>
    <link href="http://yoursite.com/2015/12/22/Android%E4%B9%8B%E7%9B%B8%E6%9C%BA%E7%9B%B8%E5%86%8C%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2015/12/22/Android之相机相册服务调用/</id>
    <published>2015-12-22T06:38:43.000Z</published>
    <updated>2015-12-23T07:10:20.406Z</updated>
    <content type="html"><![CDATA[<h3 id="相册服务">相册服务</h3><ol>
<li>判断是否有外存</li>
<li>通过startActivityForResult(intent, MainActivity.GALLERY_REQUET)返回主Activity获得result.</li>
<li>重写方法 protected void onActivityResult(int requestCode, int resultCode, Intent data);</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 调用相册服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>&#123;</span><br><span class="line">         Intent intent = <span class="keyword">null</span>;</span><br><span class="line">         String state = Environment.getExternalStorageState();  </span><br><span class="line">         <span class="keyword">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;  </span><br><span class="line">             intent=<span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">             intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">             intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">             intent.putExtra(<span class="string">"cameraPhoto"</span>, <span class="keyword">true</span>);</span><br><span class="line">             startActivityForResult(intent, MainActivity.GALLERY_REQUET);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                 Toast.makeText(<span class="keyword">this</span>, <span class="string">"请确认已经插入SD卡"</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">             &#125;  </span><br><span class="line">             Log.i(<span class="string">"Target"</span>, <span class="string">"选取照片"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="相机服务">相机服务</h3><p>这里给出的就是拍照并根据时间保存相片，然后image_path作为全局变量，在onActivityResult(int requestCode, int resultCode, Intent data);继续使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 调用相机服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeCamera</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory()+File.separator+Environment.DIRECTORY_DCIM;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="annotation">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</span><br><span class="line">            String temName = <span class="keyword">new</span> DateFormat().format(<span class="string">"yyMMdd_hhmmss"</span>,System.currentTimeMillis()) + <span class="string">"_"</span> + (Math.random()*<span class="number">100</span>)+<span class="string">".jpg"</span>;</span><br><span class="line">            image_path = path + File.separator + temName;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Uri uri=Uri.fromFile(file);</span><br><span class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); </span><br><span class="line">            startActivityForResult(intent, CAMERA_REQUEST);</span><br><span class="line">            Log.i(<span class="string">"Target"</span>, <span class="string">"照相"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="onActivityResult">onActivityResult</h3><p>在Activity跳转中很常用<br>这里用于系统服务和我们程序跳转，我想原理应该类似<br>onActivityResult(int requestCode, int resultCode, Intent data)不多说，生命周期<br>WARNING：</p>
<ol>
<li>CAMERA_REQUEST中是通过image_path生成File再生成的Uri，没有使用Intent data中的数据</li>
<li>在Fragment中调用MainActivity时候要强转为Activity类，即((MainActivity)getActivity()).takeCamera();<br>这两点我在做的时候，疑惑了好久！后来发现，不难理解</li>
</ol>
<h3 id="源代码">源代码</h3><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap photo;</span><br><span class="line">    <span class="comment">//系统参数</span></span><br><span class="line">    <span class="keyword">private</span> String image_path;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(requestCode == CAMERA_REQUEST &amp;&amp; resultCode == RESULT_OK)&#123;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Uri uri = Uri.fromFile(file);</span><br><span class="line">                BitmapFactory.Options options=<span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">                options.inJustDecodeBounds=<span class="keyword">true</span>;                </span><br><span class="line">                BitmapFactory.decodeStream(getContentResolver().openInputStream(uri), <span class="keyword">null</span>, options);</span><br><span class="line">                options.inSampleSize=<span class="number">4</span>;</span><br><span class="line">                options.inJustDecodeBounds=<span class="keyword">false</span>;</span><br><span class="line">                Bitmap map=BitmapFactory.decodeStream(getContentResolver().openInputStream(uri), <span class="keyword">null</span>, options);</span><br><span class="line">                android.provider.MediaStore.Images.Media.insertImage(getContentResolver(), map, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                sendBroadcast(<span class="keyword">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));</span><br><span class="line"><span class="comment">//              image.setImageBitmap(map);</span></span><br><span class="line">                photo = map;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(requestCode == GALLERY_REQUET &amp;&amp; resultCode == RESULT_OK)&#123;</span><br><span class="line">            ContentResolver resolver = getContentResolver();</span><br><span class="line">            Uri selectedImage = data.getData();  </span><br><span class="line">            String[] filePathColumn = &#123; MediaStore.Images.Media.DATA &#125;;  </span><br><span class="line">       </span><br><span class="line">            Cursor cursor = resolver.query(selectedImage,  </span><br><span class="line">                     filePathColumn, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">            cursor.moveToFirst();  </span><br><span class="line">            <span class="keyword">int</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class="number">0</span>]);  </span><br><span class="line">            String choosePicturePath = cursor.getString(columnIndex);  </span><br><span class="line">            cursor.close(); </span><br><span class="line">            Log.i(<span class="string">"Target"</span>,choosePicturePath);</span><br><span class="line">            photo = BitmapFactory.decodeFile(choosePicturePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================华丽丽的分割线============================</span></span><br><span class="line"><span class="comment">//=========================调用系统服务============================</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 调用相机服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeCamera</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory()+File.separator+Environment.DIRECTORY_DCIM;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="annotation">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</span><br><span class="line">            String temName = <span class="keyword">new</span> DateFormat().format(<span class="string">"yyMMdd_hhmmss"</span>,System.currentTimeMillis()) + <span class="string">"_"</span> + (Math.random()*<span class="number">100</span>)+<span class="string">".jpg"</span>;</span><br><span class="line">            image_path = path + File.separator + temName;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Uri uri=Uri.fromFile(file);</span><br><span class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); </span><br><span class="line">            startActivityForResult(intent, CAMERA_REQUEST);</span><br><span class="line">            Log.i(<span class="string">"Target"</span>, <span class="string">"照相"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 调用相册服务</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>&#123;</span><br><span class="line">         Intent intent = <span class="keyword">null</span>;</span><br><span class="line">         String state = Environment.getExternalStorageState();  </span><br><span class="line">         <span class="keyword">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;  </span><br><span class="line">             intent=<span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">             intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">             intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">             intent.putExtra(<span class="string">"cameraPhoto"</span>, <span class="keyword">true</span>);</span><br><span class="line">             startActivityForResult(intent, MainActivity.GALLERY_REQUET);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                 Toast.makeText(<span class="keyword">this</span>, <span class="string">"请确认已经插入SD卡"</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">             &#125;  </span><br><span class="line">             Log.i(<span class="string">"Target"</span>, <span class="string">"选取照片"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[相机相册很常用，分享下！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之异步任务AsyncTask]]></title>
    <link href="http://yoursite.com/2015/12/21/Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2015/12/21/Android之异步任务/</id>
    <published>2015-12-21T05:56:35.000Z</published>
    <updated>2015-12-23T07:10:21.716Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p>
</blockquote>
<h3 id="AsyncTask介绍">AsyncTask介绍</h3><p>AsyncTask源码中有写到如何通过ThreadFactory管理Thread线程,不多介绍。<br>主要参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AsyncTask&lt;Params, Progress, Result&gt;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Params 启动任务执行的输入参数，比如HTTP请求的URL。</li>
<li>Progress 后台任务执行的百分比。</li>
<li>Result 后台执行任务最终返回的结果，比如String。<br>主要方法：</li>
<li>onPreExecute()    线程开始前执行(仍然是主线程)</li>
<li>doInBackground(Void… params)    异步执行(异步线程)</li>
<li>onPostExecute(String result)  线程结束后(主线程)</li>
<li>onProgressUpdate(Progress…) 进度条数据(主线程)</li>
</ul>
<h3 id="AsyncTask实例">AsyncTask实例</h3><p>场景:Fragment A提交数据给服务器，服务器返回数据给Fragment B,并更新B的UI</p>
<ol>
<li>Fragment A中写入内部类，写入异步任务</li>
<li>onPreExecute()组建json格式数据，以url参数传值给服务器端</li>
<li>doInBackground(Void… params)执行http请求，根据返回码判断执行是否请求成功！发送消息给主线程</li>
<li>handler中接收消息解析code,并解析msg.obj，设置Activity全局变量setter</li>
<li>onPostExecute(String result) 执行Fragment跳转</li>
<li>Fragment加载Activity全局变量getter进入其UI数据<br>SUCCESS!</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncImageTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> StringBuilder url= <span class="keyword">new</span> StringBuilder(<span class="string">"http://10.0.3.2:8080/medical_big_data/servlet/androidRequest?"</span>);</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            JSONObject status = <span class="keyword">new</span> JSONObject();  </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                status.put(<span class="string">"Age"</span>, dis_tv1.getText());</span><br><span class="line">                status.put(<span class="string">"Height"</span>, dis_tv2.getText());</span><br><span class="line">                status.put(<span class="string">"Weight"</span>, dis_tv3.getText());              </span><br><span class="line">           &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">               <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           Log.i(<span class="string">"Target"</span>, status.toString());</span><br><span class="line">           url.append(<span class="string">"json=["</span>+status.toString()+<span class="string">"]"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> code;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               URL url = <span class="keyword">new</span> URL(<span class="keyword">this</span>.url.toString());</span><br><span class="line">               <span class="comment">/**</span><br><span class="line">                * 这里网络请求使用的是类HttpURLConnection，另外一种可以选择使用类HttpClient。</span><br><span class="line">                */</span></span><br><span class="line">               HttpURLConnection conn = (HttpURLConnection) url</span><br><span class="line">                       .openConnection();</span><br><span class="line">               conn.setRequestMethod(<span class="string">"GET"</span>);<span class="comment">//使用GET方法获取</span></span><br><span class="line">               conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">               code = conn.getResponseCode();</span><br><span class="line">               Log.i(<span class="string">"Target"</span>, code+<span class="string">""</span>);</span><br><span class="line">               <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="comment">/**</span><br><span class="line">                    * 如果获取的code为200，则证明数据获取是正确的。</span><br><span class="line">                    */</span></span><br><span class="line">                   InputStream is = conn.getInputStream();</span><br><span class="line">                   String result = HttpUtils.readMyInputStream(is);</span><br><span class="line">                   </span><br><span class="line">                   <span class="comment">/**</span><br><span class="line">                    * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。</span><br><span class="line">                    */</span></span><br><span class="line">                   Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                   msg.obj = result;</span><br><span class="line">                   msg.what = SUCCESS;</span><br><span class="line">                   handler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               </span><br><span class="line">                   Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                   msg.what = ERRORCODE;</span><br><span class="line">                   handler.sendMessage(msg);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="comment">/**</span><br><span class="line">                * 如果获取失败，或出现异常，那么子线程发送失败的消息（FAILURE）到主线程，主线程显示Toast，来告诉使用者，数据获取是失败。</span><br><span class="line">                */</span></span><br><span class="line">               Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">               msg.what = FAILURE;</span><br><span class="line">               handler.sendMessage(msg);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">           MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">           FragmentTransaction transaction =getFragmentManager().beginTransaction();</span><br><span class="line">           transaction.replace(R.id.content,mpFragment);</span><br><span class="line">           transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">           transaction.commit();</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="异步线程和主线程通信">异步线程和主线程通信</h3><p>Message类<br>[int] msg.what 主要是设置code,可参看Message源码英文解释<br>[Object] msg.obj 主要是返回的数据对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。</span><br><span class="line"> */</span></span><br><span class="line">    Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">    msg.obj = result;</span><br><span class="line">    msg.what = SUCCESS;</span><br><span class="line">    handler.sendMessage(msg);</span><br></pre></td></tr></table></figure></p>
<h3 id="主线程接收Message类Handler">主线程接收Message类Handler</h3><p>必须实现handleMessage接收消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Subclasses must implement this to receive messages.</span><br><span class="line"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> SUCCESS:</span><br><span class="line">                <span class="comment">/**</span><br><span class="line">                 * 获取信息成功后，对该信息进行JSON解析，得到所需要的信息，然后在textView上展示出来。</span><br><span class="line">                 */</span></span><br><span class="line">                JSONAnalysis(msg.obj.toString());</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"获取数据成功"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                .show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> FAILURE:</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"获取数据失败"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> ERRORCODE:</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"获取的CODE码不为200！"</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[Android项目中有时候会用到url请求服务器数据，比如登陆后加载个人信息数据和图片。这里介绍一个android中的异步任务AsyncTask]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="AsyncTask" scheme="http://yoursite.com/tags/AsyncTask/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之SharedPreferences存储数据]]></title>
    <link href="http://yoursite.com/2015/12/20/Android%E4%B9%8BSharedPreferences%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2015/12/20/Android之SharedPreferences存储数据/</id>
    <published>2015-12-20T10:57:03.000Z</published>
    <updated>2015-12-23T07:10:23.959Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>SharedPreferences一般是用于系统设置数据的存储，在项目中我用在了Fragment返回前一个Fragment，保证前一个Fragment数据不丢失！</p>
</blockquote>
<h3 id="SharedPreferences基本存取">SharedPreferences基本存取</h3><h4 id="存数据">存数据</h4><p>SharedPreferences.Editor  一个类似map的东西，生成键值对，存入xml中。</p>
<ul>
<li>我这个是写在Fragment中，所以要getActivity();</li>
<li>你也可以写个静态方法在MainActivity中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">/**</span><br><span class="line">  * 存入SharedPreferences</span><br><span class="line">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化SharedPreferences对象（第一步） </span></span><br><span class="line">    SharedPreferences mySharedPreferences= getActivity().getSharedPreferences(<span class="string">"bodyinfo"</span>, </span><br><span class="line">    Activity.MODE_PRIVATE); </span><br><span class="line">    <span class="comment">//实例化SharedPreferences.Editor对象（第二步） </span></span><br><span class="line">    SharedPreferences.Editor editor = mySharedPreferences.edit(); </span><br><span class="line">    <span class="comment">//用putString的方法保存数据 </span></span><br><span class="line">    editor.putString(<span class="string">"Age"</span>, dis_tv1.getText().toString());</span><br><span class="line">    editor.putString(<span class="string">"Height"</span>, dis_tv2.getText().toString());</span><br><span class="line">    editor.putString(<span class="string">"Weight"</span>, dis_tv3.getText().toString());    </span><br><span class="line">    <span class="comment">//提交当前数据 </span></span><br><span class="line">    editor.commit(); </span><br><span class="line">    <span class="comment">//使用toast信息提示框提示成功写入数据 </span></span><br><span class="line">    Toast.makeText(getActivity(), <span class="string">"数据成功写入SharedPreferences！"</span> , Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="取数据">取数据</h4><p>写入控件中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 取SharedPreferences数据</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SharedPreferences sharedPreferences= getActivity().getSharedPreferences(<span class="string">"bodyinfo"</span>, </span><br><span class="line">                Activity.MODE_PRIVATE); </span><br><span class="line">                <span class="comment">// 使用getString方法获得value，注意第2个参数是value的默认值 </span></span><br><span class="line">                dis_tv1.setText(sharedPreferences.getString(<span class="string">"Age"</span>, <span class="string">""</span>));</span><br><span class="line">                dis_tv2.setText(sharedPreferences.getString(<span class="string">"Height"</span>, <span class="string">""</span>));</span><br><span class="line">                dis_tv3.setText(sharedPreferences.getString(<span class="string">"Weight"</span>, <span class="string">""</span>));        </span><br><span class="line">                <span class="comment">//使用toast信息提示框显示信息 </span></span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"读取数据如下成功"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Fragment跳转Fragment数据不丢失">Fragment跳转Fragment数据不丢失</h3><ul>
<li>跳转前A将数据存储到SharedPreferences中</li>
<li>跳转B后返回时候加载<br>  通过A设置全局变量mStack，在每次跳转时候，mStack++;<br>  当然你会问mStack在transaction.replace()方法时候移除了，在加载又是初始值。看下一条</li>
<li>为了保存Fragment中的变量，一般会重写onSaveInstanceState(Bundle outState)和 onCreate(Bundle savedInstanceState) 。一个存一个取</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">         outState.putInt(<span class="string">"level"</span>, mStackLevel);</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">             mStackLevel = savedInstanceState.getInt(<span class="string">"level"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后，在onCreateView重新加载视图<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mStackLevel != <span class="number">0</span>)&#123;</span><br><span class="line">                    outStore();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[SharedPreferences一般是用于系统设置数据的存储，在项目中我用在了Fragment返回前一个Fragment，保证前一个Fragment数据不丢失！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="SharedPreferences" scheme="http://yoursite.com/tags/SharedPreferences/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android之自定义Dialog]]></title>
    <link href="http://yoursite.com/2015/12/19/android%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89dialog/"/>
    <id>http://yoursite.com/2015/12/19/android之自定义dialog/</id>
    <published>2015-12-19T09:20:58.000Z</published>
    <updated>2015-12-23T07:09:34.574Z</updated>
    <content type="html"><![CDATA[<h3 id="自定义Dialog">自定义Dialog</h3><h4 id="自定义Dialog的创建">自定义Dialog的创建</h4><ol>
<li>定义控件，</li>
<li>onCreate()加载视图view</li>
<li>设置控件的监听事件</li>
<li>设置一个内部接口，定义抽象监听方法</li>
<li>构造方法回调listener</li>
</ol>
<p>ChooseDialog.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChooseDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Button btn_take_photo;</span><br><span class="line">    <span class="keyword">private</span> Button btn_pick_photo;</span><br><span class="line">    <span class="keyword">private</span> Button btn_pick_cancel;</span><br><span class="line">    <span class="keyword">private</span> ChooserDialogListener listener;    </span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChooserDialogListener</span></span>&#123;   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChoose</span><span class="params">(View view)</span></span>;   </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ChooseDialog</span><span class="params">(Context context,<span class="keyword">int</span> theme,ChooserDialogListener listener)</span> </span>&#123;   </span><br><span class="line">         <span class="keyword">super</span>(context,theme);  </span><br><span class="line">         <span class="keyword">this</span>.listener = listener;</span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="annotation">@Override</span>   </span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;   </span><br><span class="line">         <span class="keyword">super</span>.onCreate(savedInstanceState);   </span><br><span class="line">         setContentView(R.layout.imgchooser_dialog);   </span><br><span class="line">         initViews();   </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>&#123;   </span><br><span class="line">        btn_take_photo = (Button)findViewById(R.id.btn_take_photo);   </span><br><span class="line">        btn_pick_photo = (Button)findViewById(R.id.btn_pick_photo);   </span><br><span class="line">        btn_pick_cancel = (Button)findViewById(R.id.btn_pick_cancel);   </span><br><span class="line">    </span><br><span class="line">        btn_take_photo.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">        btn_pick_photo.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">        btn_pick_cancel.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">     <span class="annotation">@Override</span>   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123; </span><br><span class="line">         listener.onChoose(v); </span><br><span class="line">         <span class="keyword">this</span>.dismiss();</span><br><span class="line">     &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Dialog调用">Dialog调用</h4><ol>
<li>直接使用,初始化之后，dialog.show();</li>
<li>DialogFragment中onCreateDialog(Bundle savedInstanceState)返回</li>
</ol>
<p>源代码:DialogFragment.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ChooseDialog  dialog = <span class="keyword">new</span> ChooseDialog(getActivity(),R.style.ActionTheme,   </span><br><span class="line">                 <span class="keyword">new</span> ChooserDialogListener() &#123;   </span><br><span class="line">             <span class="annotation">@Override</span>   </span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChoose</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">switch</span>(view.getId())&#123; </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_take_photo:</span><br><span class="line">                         ((MainActivity)getActivity()).takeCamera();</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_pick_photo:</span><br><span class="line">                         ((MainActivity)getActivity()).takePhoto();</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_pick_cancel:</span><br><span class="line">                         Log.i(<span class="string">"Target"</span>, <span class="string">"取消"</span>);</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//TODO 分析图片</span></span><br><span class="line">             &#125;   </span><br><span class="line">     &#125;);  </span><br><span class="line">        </span><br><span class="line">    dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    Window window = dialog.getWindow();</span><br><span class="line">    <span class="comment">//dialog全屏</span></span><br><span class="line">    window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">    lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">    lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">    window.setAttributes(lp);</span><br><span class="line">    <span class="comment">//dialog显示在底层</span></span><br><span class="line">    window.setGravity(Gravity.BOTTOM);</span><br><span class="line">    window.setWindowAnimations(R.style.mystyle); </span><br><span class="line">    <span class="comment">//直接调用的话</span></span><br><span class="line">    <span class="comment">//dialog.show();</span></span><br><span class="line">    <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="AlertDialog简单示例">AlertDialog简单示例</h3><p>介绍：alert上有两个Numberpicker，一个Numberpicker为整数，一个Numberpicker表示小数点后一位。<br>通过AlertDialog.Builder去直接生成一个builder.create()生成一个Dialog,可以自己参看android源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> <span class="keyword">implements</span> <span class="title">OnValueChangeListener</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">        <span class="comment">// Get the layout inflater</span></span><br><span class="line">        LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">        View view = inflater.inflate(R.layout.dialog, <span class="keyword">null</span>);</span><br><span class="line">        np_integer = (NumberPicker) view.findViewById(R.id.np_integer);</span><br><span class="line">        np_integer.setMinValue(<span class="number">0</span>);</span><br><span class="line">        np_integer.setMaxValue(<span class="number">999</span>);</span><br><span class="line">        np_integer.setOnValueChangedListener(<span class="keyword">this</span>);</span><br><span class="line">        np_decimal = (NumberPicker) view.findViewById(R.id.np_decimal);</span><br><span class="line">        np_decimal.setMinValue(<span class="number">0</span>);</span><br><span class="line">        np_decimal.setMaxValue(<span class="number">9</span>);</span><br><span class="line">        np_decimal.setOnValueChangedListener(<span class="keyword">this</span>);</span><br><span class="line">        builder.setView(view)</span><br><span class="line">                .setTitle(<span class="string">"PLEASE INPUT AND SAVE"</span>)</span><br><span class="line">                <span class="comment">// Add action buttons</span></span><br><span class="line">                .setPositiveButton(<span class="string">"Confirm"</span>,</span><br><span class="line">                        <span class="keyword">new</span> DialogInterface.OnClickListener()</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="annotation">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span><br><span class="line">                            </span>&#123;</span><br><span class="line">                                Log.i(<span class="string">"Target"</span>, getTargetFragment().getClass().getName());</span><br><span class="line">                                LoginInputListener listener = (LoginInputListener) getTargetFragment();</span><br><span class="line">                                <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">                                listener.onLoginInputComplete(result);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    onValueChange <span class="comment">//不写了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和Dialog一样 如果需要传值，它的调用处，去实现接口LoginInputListener,就可以先显示出来。<br>android传值，之前有写过一篇！传值其实都是类似，内部类，内部接口，似有变量设置getter,setter</p>
]]></content>
    <summary type="html">
    <![CDATA[android中常用的一个就是弹框，比如微信添加图片低栏会弹框一个选择相机，照片，取消三个按钮！最近medical的项目中使用到了。分享下心得！]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Dialog" scheme="http://yoursite.com/tags/Dialog/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[冬月初八忆初恋]]></title>
    <link href="http://yoursite.com/2015/12/18/%E5%86%AC%E6%9C%88%E5%88%9D%E5%85%AB%E5%BF%86%E5%88%9D%E6%81%8B/"/>
    <id>http://yoursite.com/2015/12/18/冬月初八忆初恋/</id>
    <published>2015-12-18T04:35:07.000Z</published>
    <updated>2015-12-18T06:35:56.698Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>愿我们在彼此看不到的岁月里熠熠生辉</p>
</blockquote>
<p><img src="/uploads/love_poem.png" alt="love_poem.png"></p>
<h3 id="SHARE_IT">SHARE IT</h3><p>人总是在犹豫中失去。原本以为自己可以掌控事态的发展趋势。直到最珍惜的人离开，才发现只有在人成功的时候才能控局。</p>
<p>沉潜的时候你只能带上你的精锐亲兵，不要轻易进入不熟悉的地方。也许那就是鸿门宴！</p>
<p>失败不用解释。</p>
<p>没有人会在原地等你，奋斗吧，少年！</p>
<p>时间就像潮水，抹平你在海滩留下的脚印。曾经一去不复返。时间会抹平一切！留下的都是历史。</p>
<p>人生总有起起伏伏，起时宠辱不惊，心细思虑如常；落时默默忍让，等待黑暗前的黎明到来。</p>
<p>朋友们，愿你们把握现在，把握好身边的每一个人！不管你处于什么状态，乐观去生活，努力奋斗！</p>
<p>时间束缚不住你前行的脚步，只要你迈步向前，就能看见光明。</p>
]]></content>
    <summary type="html">
    <![CDATA[Let's not start with a bang and end with a whimper！]]>
    
    </summary>
    
      <category term="September" scheme="http://yoursite.com/tags/September/"/>
    
      <category term="Emotion" scheme="http://yoursite.com/categories/Emotion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android之Fragment跳转与传值]]></title>
    <link href="http://yoursite.com/2015/12/17/android%E4%B9%8BFragment%E8%B7%B3%E8%BD%AC%E4%B8%8E%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2015/12/17/android之Fragment跳转与传值/</id>
    <published>2015-12-17T12:13:57.000Z</published>
    <updated>2015-12-23T06:39:14.184Z</updated>
    <content type="html"><![CDATA[<h3 id="Fragment跳转">Fragment跳转</h3><ul>
<li>开启碎片事务</li>
<li>添加，删除，替换碎片</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">transaction.replace(R.id.content,mpFragment);</span><br><span class="line">transaction.add(R.id.content,mpFragment);</span><br><span class="line">transaction.remove(R.id.content,mpFragment);</span><br></pre></td></tr></table></figure>
<ul>
<li>添加到返回栈中(可选)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>提交事务，commit()!!!!!</li>
</ul>
<h4 id="Fragment跳转Fragment">Fragment跳转Fragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">FragmentTransaction transaction =getFragmentManager().beginTransaction();</span><br><span class="line">transaction.replace(R.id.content,mpFragment);</span><br><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure>
<h4 id="Activity舔砖Fragment">Activity舔砖Fragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">DietFragment dietFragment;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (dietFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果Fragment为空，则创建一个并添加到界面上</span></span><br><span class="line">                dietFragment = <span class="keyword">new</span> DietFragment();</span><br><span class="line">                transaction.add(R.id.content, dietFragment);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果Fragment不为空，则直接将它显示出来</span></span><br><span class="line">                transaction.show(dietFragment);</span><br><span class="line">            &#125;</span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure>
<h3 id="Frament传值">Frament传值</h3><h4 id="Acitivity传值给Fragment,同Activity下Fragment传值给Fragment">Acitivity传值给Fragment,同Activity下Fragment传值给Fragment</h4><ul>
<li>直接在Activity中添加全局变量,并设置getter和setter<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,Double&gt; percentMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAcitvity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Double&gt; getPercentMap() &#123;</span><br><span class="line">    <span class="keyword">return</span> percentMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPercentMap</span><span class="params">(Map&lt;String, Double&gt; percentMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.percentMap = percentMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Fragment传值给Activity">Fragment传值给Activity</h4><ul>
<li>在Fragment中写个内部接口</li>
<li>让宿主去实现该接口</li>
<li>在Fragment事件中强转宿主为该接口变为实例，返回给宿主</li>
<li>宿主实现接口中方法，获得结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fragment部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        LoginInputListener listener = (LoginInputListener) getTargetFragment();</span><br><span class="line">        <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">        listener.onLoginInputComplete(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">LoginInputListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"輸入的數字是："</span> + result,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Fragment传值给Fragment（方法2）">Fragment传值给Fragment（方法2）</h4><ul>
<li>为了防止混淆，这个方法和上面基本一致，仔细阅读便可发现.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fragment部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        LoginInputListener listener = (LoginInputListener) getActivity();</span><br><span class="line">        <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">        listener.onLoginInputComplete(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">LoginInputListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"輸入的數字是："</span> + result,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Fragment是android3.0引入的一个模块，很常用，也方便了布局！可以利用Fragment实现灵活的布局，改善用户体验。]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Fragment" scheme="http://yoursite.com/tags/Fragment/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
</feed>
