<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[沉思]]></title>
  <subtitle><![CDATA[万般皆下品，惟有读书高]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-27T09:49:55.401Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Rollingdeep]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java多线程]]></title>
    <link href="http://yoursite.com/2015/11/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2015/11/27/Java多线程/</id>
    <published>2015-11-27T07:47:35.000Z</published>
    <updated>2015-11-27T09:49:55.401Z</updated>
    <content type="html"><![CDATA[<h4 id="继承Thread">继承Thread</h4><p>缺点：继承只能继承一次。扩展性不强<br>重写run方法，来自定义线程执行任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">		System.out.println(<span class="string">"MyThread.run()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		MyThread thread1 = new MyThread();</span><br><span class="line">		MyThread thread2 = new MyThread();</span><br><span class="line">		thread1.start();</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现Runnable接口">实现Runnable接口</h4><p>优点：可扩展性强<br>方法：通过实现接口，然后Thread构造方法传参新建thread2类，start()启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread2 implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">		System.out.print(<span class="string">"MyThread2.run()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		MyThread2 thread = new MyThread2();</span><br><span class="line">		Thread thread2 = new Thread(thread);</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Thread类本身实现了Runable接口，而且除了默认构造，还有一个带参构造，传入target<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//Thread源代码</span><br><span class="line">public <span class="function"><span class="title">Thread</span></span>() &#123;</span><br><span class="line">       init(null, null, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">public Thread(Runnable target) &#123;</span><br><span class="line">       init(null, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">       <span class="keyword">if</span> (target != null) &#123;</span><br><span class="line">           target.run();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="ExecutorService、Callable、Future带返回结果的线程实现">ExecutorService、Callable、Future带返回结果的线程实现</h4><p>Callable：执行任务并返回结果。<br>Future<v>：Future接口是Java线程Future模式的实现，可以来进行异步计算。</v></p>
<blockquote>
<p>Future模式：我有一个任务，提交给了Future，Future替我完成这个任务。期间我自己可以去做任何想做的事情。一段时间之后，我就便可以从Future那儿取出结果。就相当于下了一张订货单，一段时间后可以拿着提订单来提货，这期间可以干别的任何事情。其中Future 接口就是订货单，真正处理订单的是Executor类，它根据Future接口的要求来生产产品。</p>
</blockquote>
<p>ExecutorService：继承自Executor，线程池操作类，创建，执行，关闭</p>
<h5 id="核心">核心</h5><ul>
<li>Future<object> f = pool.submit(c);</object></li>
<li>Void f = pool.execute(RunnableImplements);</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//ExecutorService部分源码 </span><br><span class="line"></span><br><span class="line"> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span><br><span class="line"></span><br><span class="line"> &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</span><br><span class="line"></span><br><span class="line"> Future&lt;?&gt; submit(Runnable task);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">另外 </span><br><span class="line">//Executor源码</span><br><span class="line">public interface Executor &#123;</span><br><span class="line">    void execute(Runnable <span class="built_in">command</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="小例子">小例子</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 有返回值的线程</span><br><span class="line"> */</span><br><span class="line">public class MyThread3 &#123;</span><br><span class="line">	public static void main(String[] args) throws ExecutionException,</span><br><span class="line">			InterruptedException &#123;</span><br><span class="line">		System.out.println(<span class="string">"----程序开始运行----"</span>);</span><br><span class="line">		Date date1 = new Date();</span><br><span class="line"></span><br><span class="line">		int taskSize = <span class="number">5</span>;</span><br><span class="line">		// 创建一个线程池</span><br><span class="line">		ExecutorService pool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">		// 创建多个有返回值的任务</span><br><span class="line">		List&lt;Future&lt;Object&gt;&gt; list = new ArrayList&lt;Future&lt;Object&gt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;</span><br><span class="line">			Callable&lt;Object&gt; c = new MyCallable(i + <span class="string">" "</span>);</span><br><span class="line">			// 执行任务并获取Future对象</span><br><span class="line">			Future&lt;Object&gt; f = pool.submit(c);</span><br><span class="line">			// System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());</span><br><span class="line">			list.add(f);</span><br><span class="line">		&#125;</span><br><span class="line">		// 关闭线程池</span><br><span class="line">		pool.shutdown();</span><br><span class="line"></span><br><span class="line">		// 获取所有并发任务的运行结果</span><br><span class="line">		<span class="keyword">for</span> (Future&lt;Object&gt; f : list) &#123;</span><br><span class="line">			// 从Future对象上获取任务的返回值，并输出到控制台</span><br><span class="line">			System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Date date2 = new Date();</span><br><span class="line">		System.out.println(<span class="string">"----程序结束运行----，程序运行时间【"</span></span><br><span class="line">				+ (date2.getTime() - date1.getTime()) + <span class="string">"毫秒】"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyCallable implements Callable&lt;Object&gt; &#123;</span><br><span class="line">	private String taskNum;</span><br><span class="line"></span><br><span class="line">	MyCallable(String taskNum) &#123;</span><br><span class="line">		this.taskNum = taskNum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Object call() throws Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务启动"</span>);</span><br><span class="line">		Date dateTmp1 = new Date();</span><br><span class="line">		Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">		Date dateTmp2 = new Date();</span><br><span class="line">		long time = dateTmp2.getTime() - dateTmp1.getTime();</span><br><span class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务终止"</span>);</span><br><span class="line">		<span class="built_in">return</span> taskNum + <span class="string">"任务返回运行结果,当前任务时间【"</span> + time + <span class="string">"毫秒】"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如有不懂，可以多翻阅源代码。</p>
<h4 id="Reference">Reference</h4><p><a href="http://blog.csdn.net/aboy123/article/details/38307539" target="_blank" rel="external">JAVA多线程实现的三种方式</a><br><a href="java Future 接口介绍">java Future 接口介绍</a><br><a href="http://blog.sina.com.cn/s/blog_64d5ddbe0100ydyv.html" target="_blank" rel="external">线程池中execute和submit的区别</a><br><a href="http://www.cnphp6.com/archives/61093" target="_blank" rel="external">EXECUTORSERVICE线程池讲解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，多线程的有几种创建方式？run方法启动线程还是start方法启动？sleep的时候有无交出锁？。刚好看到这里，分享之！]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Collection和Collections]]></title>
    <link href="http://yoursite.com/2015/11/26/Collection%E5%92%8CCollections/"/>
    <id>http://yoursite.com/2015/11/26/Collection和Collections/</id>
    <published>2015-11-26T09:23:04.000Z</published>
    <updated>2015-11-26T10:10:23.781Z</updated>
    <content type="html"><![CDATA[<h3 id="Collection">Collection</h3><pre><code class="bash">Collection   
├List   
│├LinkedList   
│├ArrayList   
│└Vector   
│　└Stack   
└Set
</code></pre>
<p>Collection是集合类的上级接口，继承与他的接口主要有Set 和 List.</p>
<h3 id="Collections">Collections</h3><p>Collections是针对集合类的一个帮助类，它提供一系列静态方法实现对各种集合的搜索、排序[底层是二分法]、线程安全化等操作。</p>
<ul>
<li>此类不能实例化，就像一个工具类，服务于Java的Collection框架</li>
</ul>
<h3 id="小例子">小例子</h3><pre><code class="bash">//注意List是实现Collection接口的
List list = new ArrayList();
double array[] = {<span class="number">112</span>, <span class="number">111</span>, <span class="number">23</span>, <span class="number">456</span>, <span class="number">231</span>};
<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.length; i++) {
    list.add(new Double(array[i]));
}
Collections.sort(list);//
<span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.length; i++) {
    System.out.println(list.get(i));
}
// 结果：<span class="number">23.0</span> <span class="number">111.0</span> <span class="number">112.0</span> <span class="number">231.0</span> <span class="number">456.0</span>
</code></pre>
<h3 id="Reference">Reference</h3><p><a href="http://trinea.iteye.com/blog/1248517" target="_blank" rel="external">对象数组或list排序及Collections排序原理</a><br><a href="http://www.blogjava.net/hgc-ghc/archive/2013/03/28/397084.html" target="_blank" rel="external">Java中的CompareTo</a><br><a href="http://825635381.iteye.com/blog/2017650" target="_blank" rel="external">Java基础中的泛型</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，集合接口Collection和集合帮助类Collections的工作原理。刚好看到这里，分享之！]]>
    
    </summary>
    
      <category term="Collection" scheme="http://yoursite.com/tags/Collection/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HashMap工作原理]]></title>
    <link href="http://yoursite.com/2015/11/26/HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2015/11/26/HashMap工作原理/</id>
    <published>2015-11-26T07:47:34.000Z</published>
    <updated>2015-11-26T09:24:12.703Z</updated>
    <content type="html"><![CDATA[<h3 id="数组">数组</h3><p>数组存储区间是连续的，占用内存严重，故空间复杂的很大。但数组的二分查找时间复杂度小，为O(1)；<br>数组的特点是：寻址容易，插入和删除困难；</p>
<h3 id="链表">链表</h3><p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O（N）。<br>链表的特点是：寻址困难，插入和删除容易。</p>
<h3 id="哈希表">哈希表</h3><p>那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表。<br>哈希表（(Hash table）既满足了数据的查找方便，同时不占用太多的内容空间，使用也十分方便。</p>
<p><img src="http://img.blog.csdn.net/20131105152201453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="哈希表"></p>
<p><img src="http://img.blog.csdn.net/20131105152215718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="哈希表例子"></p>
<h4 id="基本原理">基本原理</h4><p>表达式：hash(key)%arr.length(这里hash(key)是f(k),即我们常说的散列函数)</p>
<ol>
<li>f(k1)=f(k2)则散列到数组的同一个下标中，通过链表next依次存放，通过匹配key，获取值。</li>
<li>f(null)会被存放在arr[0]中,只能存一个元素，再次存取会返回oldValue;两个key相同时也是采取这种策略，新的值替换旧值，并返回旧值。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (key == null)  </span><br><span class="line">          <span class="built_in">return</span> putForNullKey(value);  </span><br><span class="line">      int <span class="built_in">hash</span> = <span class="built_in">hash</span>(key.hashCode());  </span><br><span class="line">      int i = indexFor(<span class="built_in">hash</span>, table.length);  </span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;  </span><br><span class="line">          Object k;  </span><br><span class="line">          <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </span><br><span class="line">              V oldValue = e.value;  </span><br><span class="line">              e.value = value;  </span><br><span class="line">              e.recordAccess(this);  </span><br><span class="line">              <span class="built_in">return</span> oldValue;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      modCount++;  </span><br><span class="line">      addEntry(<span class="built_in">hash</span>, key, value, i);  </span><br><span class="line">      <span class="built_in">return</span> null;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h5 id="定位数组中的位置">定位数组中的位置</h5><p>书本上是采用 % 模运算<br>而实际是用的 &amp; 按位与运算，“模”运算的消耗还是比较大的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length) &#123;  </span><br><span class="line">       <span class="built_in">return</span> h &amp; (length-<span class="number">1</span>);  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>巧妙之处：通过哈希值和length 按位与获得位置<br>一个简单的情况：length = 16,length-1 = 15,二进制码是1111,那么任意一个h（如1110，1111）按位与都是它自身h,而且没有冲突。</p>
<h5 id="哈希表长度">哈希表长度</h5><p>length总是2^n(2的倍数),每次超过阈值之后会采用一个,这也是为什么length总是2^n(2的倍数)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br></pre></td></tr></table></figure>
<p>threshold = capacity * loadFactor,loadFactor默认为0.75.</p>
<h3 id="HashTable和HashMap">HashTable和HashMap</h3><ul>
<li>ashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，效率要高于Hashtable。</li>
<li>HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</li>
<li>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。</li>
<li>Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。<br>最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。<br>Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。同步上的性能，HashMap会更优秀</li>
</ul>
<p>就HashMap与HashTable主要从三方面来说，</p>
<ol>
<li>历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现</li>
<li>同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的</li>
<li>值：只有HashMap可以让你将空值作为一个表的条目的key或value</li>
</ol>
<h3 id="Reference">Reference</h3><p><a href="http://blog.csdn.net/vking_wang/article/details/14166593" target="_blank" rel="external">HashMap实现原理分析</a><br><a href="http://blog.csdn.net/heyutao007/article/details/6206153" target="_blank" rel="external">HashMap源码分析</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Java面试经常问到的一个问题，哈希表的工作原理。刚好看到这里，分享之！]]>
    
    </summary>
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java文件写入项目根目录]]></title>
    <link href="http://yoursite.com/2015/11/25/java%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2015/11/25/java文件写入项目根目录/</id>
    <published>2015-11-25T10:07:55.000Z</published>
    <updated>2015-11-25T11:21:14.433Z</updated>
    <content type="html"><![CDATA[<h2 id="创建路径或文件">创建路径或文件</h2><p>方法：new File(<a href="#路径问题">路径</a>，文件夹或文件)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File folder = new File(rootPath,<span class="string">"src/data/weibo1"</span>);</span><br><span class="line">	<span class="keyword">if</span>(!folder.exists())&#123;</span><br><span class="line">	    folder.mkdirs(); </span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>
<p>文件夹中创建文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(folder, filename);</span><br></pre></td></tr></table></figure>
<p>当然也可以一步到位，本人习惯这样，层次感强。</p>
<h2 id="读写文件示例">读写文件示例</h2><p>见<a href="#源代码">源代码</a></p>
<h2 id="路径问题">路径问题</h2><p>在Java开发工具eclipse,myeclipse的project中使用相对路径<br>也就是说，在jar包或者cmd下无效。只在ide成立</p>
<p>项目结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">├─src </span><br><span class="line">│    └─com </span><br><span class="line">│       └─javasoft </span><br><span class="line">│             ├─entity</span><br><span class="line">│             └─db </span><br><span class="line">├─doc</span><br></pre></td></tr></table></figure></p>
<p>文件创建：<br>以“/”开头，指的是ide workspace所在磁盘的根目录<br>不以“/”开头，指的是project下子文件夹或者文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File f = new File(<span class="string">"src/com/javasoft/db/a.txt"</span>);</span><br><span class="line">//or</span><br><span class="line">File f = new File(<span class="string">"doc/b.txt"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="通过CLASSPATH读取包内文件">通过CLASSPATH读取包内文件</h2><p>获取类路径下文件，也就是classes文件夹下文件，以“/”开头</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = ReadFile.class.getResourceAsStream(<span class="string">"/com/javasoft/db/a.txt"</span>);</span><br><span class="line">//获取classes(classpath)路径</span><br><span class="line">String classpath = getClass().getResource(<span class="string">"/"</span>).getFile().toString();</span><br></pre></td></tr></table></figure>
<p>获取类加载器下文件 不以“/”开头</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream is=TestAction.class.getClassLoader().getResourceAsStream(<span class="string">"com/javasoft/db/test.txt"</span>); </span><br><span class="line">//获取classes(classpath)路径</span><br><span class="line">String rootPath = FileUtil.class.getClassLoader().getResource(<span class="string">""</span>).getFile().toString();</span><br></pre></td></tr></table></figure>
<h2 id="可行的解决办法">可行的解决办法</h2><p>absolutePath可以直接获取到项目路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String path = Thread.currentThread().getContextClassLoader().getResource(<span class="string">""</span>).getPath(); </span><br><span class="line">String secendPath = path.substring(<span class="number">1</span>, path.lastIndexOf(<span class="string">"/"</span>)); </span><br><span class="line">String absolutelyPath = secendPath.substring(<span class="number">0</span>,secendPath.lastIndexOf(<span class="string">"/"</span>));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/D:/j2ee/m_workspace/LDA4j-master/target/<span class="built_in">test</span>-classes/</span><br><span class="line">D:/j2ee/m_workspace/LDA4j-master/target/<span class="built_in">test</span>-classes</span><br><span class="line">D:/j2ee/m_workspace/LDA4j-master/target</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><blockquote>
<p>使用工程相对路径是靠不住的。<br>使用CLASSPATH路径是可靠的。</p>
</blockquote>
<hr>
<h2 id="源代码">源代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">package com.your.package;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line">public class TxtUtil &#123;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 创建文件</span><br><span class="line">  * @param fileName</span><br><span class="line">  * @<span class="built_in">return</span></span><br><span class="line">  */</span><br><span class="line"> public static boolean createFile(File fileName)throws Exception&#123;</span><br><span class="line">	 </span><br><span class="line">	  boolean flag=<span class="literal">false</span>;</span><br><span class="line">	  try&#123;</span><br><span class="line">		   <span class="keyword">if</span>(!fileName.exists())&#123;</span><br><span class="line">			    fileName.createNewFile();</span><br><span class="line">			    flag=<span class="literal">true</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">	  &#125;catch(Exception e)&#123;</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="built_in">return</span> flag;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 读TXT文件内容</span><br><span class="line">  * @param fileName</span><br><span class="line">  * @<span class="built_in">return</span></span><br><span class="line">  */</span><br><span class="line"> public static String <span class="built_in">read</span>TxtFile(File fileName)throws Exception&#123;</span><br><span class="line">	  String result=null;</span><br><span class="line">	  FileReader fileReader=null;</span><br><span class="line">	  BufferedReader bufferedReader=null;</span><br><span class="line">	  try&#123;</span><br><span class="line">		   fileReader=new FileReader(fileName);</span><br><span class="line">		   bufferedReader=new BufferedReader(fileReader);</span><br><span class="line">		   try&#123;</span><br><span class="line">			   String <span class="built_in">read</span>=null;</span><br><span class="line">			    <span class="keyword">while</span>((<span class="built_in">read</span>=bufferedReader.readLine())!=null)&#123;</span><br><span class="line">			    	result=result+<span class="built_in">read</span>+<span class="string">"\r\n"</span>;</span><br><span class="line">			    &#125;</span><br><span class="line">		   &#125;catch(Exception e)&#123;</span><br><span class="line">			   e.printStackTrace();</span><br><span class="line">		   &#125;</span><br><span class="line">	  &#125;catch(Exception e)&#123;</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;finally&#123;</span><br><span class="line">		   <span class="keyword">if</span>(bufferedReader!=null)&#123;</span><br><span class="line">		    bufferedReader.close();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(fileReader!=null)&#123;</span><br><span class="line">    fileReader.close();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">"读取出来的文件内容是："</span>+<span class="string">"\r\n"</span>+result);</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> public static boolean writeTxtFile(String content,File  fileName)throws Exception&#123;</span><br><span class="line">	  RandomAccessFile mm=null;</span><br><span class="line">	  boolean flag=<span class="literal">false</span>;</span><br><span class="line">	  FileOutputStream o=null;</span><br><span class="line">	  try &#123;</span><br><span class="line">	   o = new FileOutputStream(fileName);</span><br><span class="line">	      o.write(content.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">	      o.close();</span><br><span class="line">	//   mm=new RandomAccessFile(fileName,<span class="string">"rw"</span>);</span><br><span class="line">	//   mm.writeBytes(content);</span><br><span class="line">	   flag=<span class="literal">true</span>;</span><br><span class="line">	  &#125; catch (Exception e) &#123;</span><br><span class="line">	   // TODO: handle exception</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;finally&#123;</span><br><span class="line">	   <span class="keyword">if</span>(mm!=null)&#123;</span><br><span class="line">		   mm.close();</span><br><span class="line">	   &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="built_in">return</span> flag;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 	public static void contentToTxt(String filePath, String content) &#123;</span><br><span class="line">        String str = new String(); //原有txt内容</span><br><span class="line">        String s1 = new String();//内容更新</span><br><span class="line">        try &#123;</span><br><span class="line">            File f = new File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">                System.out.print(<span class="string">"文件存在"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">"文件不存在"</span>);</span><br><span class="line">                f.createNewFile();// 不存在则创建</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedReader input = new BufferedReader(new FileReader(f));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((str = input.readLine()) != null) &#123;</span><br><span class="line">                s1 += str + <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">            input.close();</span><br><span class="line">            s1 += content;</span><br><span class="line"></span><br><span class="line">            BufferedWriter output = new BufferedWriter(new FileWriter(f));</span><br><span class="line">            output.write(s1);</span><br><span class="line">            output.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[在文件操作的过程中，总是会出现路径问题。]]>
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[被世界遗忘的角落]]></title>
    <link href="http://yoursite.com/2015/11/23/%E8%A2%AB%E4%B8%96%E7%95%8C%E9%81%97%E5%BF%98%E7%9A%84%E8%A7%92%E8%90%BD/"/>
    <id>http://yoursite.com/2015/11/23/被世界遗忘的角落/</id>
    <published>2015-11-23T11:13:27.000Z</published>
    <updated>2015-11-24T13:37:03.498Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>当一个人不能拥有的时候，他唯一能做的便是不要忘记<br>我们总以为自己很特别，其实就是别人眼中的普通人<br>如果有一天： 你不再寻找爱情，只是去爱；你不再渴望成功，只是去做；你不再追求成长，只是去修；一切才真正开始！</p>
</blockquote>
<h2 id="遇见">遇见</h2><h3 id="心动_–_恩施">心动 – 恩施</h3><blockquote>
<p>那是一个秋天，风儿那么缠绵</p>
</blockquote>
<p>总是不想抛头露面的我，扭扭咧咧的拿着我准备的竞聘演讲稿。<br>“大家好，我叫。。” 声音忽然有忽然没有。就这样在零星的掌声中，低着头完成了竞聘演讲。历史当中，他为数不多的站在讲台上说话。涨红了脸，手里的汗也浸透了他的讲稿。<br>还没等他坐稳，又一次掌声响起。一个眉目清秀，面容姣好，身材适中的女孩子走上讲台。从容不迫，面带笑容，声音甜美，他听得如此如醉。第一次被她那种气质所打动，也由此而心动。<br>最后给了选票，他任职了班考勤委员，她任团委组织纪检委员。</p>
<p>从登台那天开始，大学的生活由此拉开序幕。同时，也遇见了那个女孩和从未有过的心动。</p>
<h3 id="圣诞节前夜_–_苹果">圣诞节前夜 – 苹果</h3><p>“圣诞节啊，准备买点什么？”<br>“不知道，好多卖苹果的，在寝室呆着无聊，咱们一起去看看！”<br>沿着校道走出学校，好多好多卖苹果的小贩，第一次发现学校这么大规模的圣诞节。还是第一次过圣诞，这么多包装精美的苹果，红的，紫的。平时肃杀的学校瞬间有了不一样的气氛，空气中流动的多了一份温情，仿佛有一种力量催动我前行，动情。<br>“帅哥，送谁呢？”，正当他犹豫，心底立马浮现了一个好看的样子。<br>“送女生”<br>“送女生啊，嘿嘿，来这个”，那小商贩露出诡异的笑容。<br>他选了选，“那就来这个！”<br>选了一个好看的苹果，如获至宝。</p>
<h3 id="圣诞节前夜_–_雨伞">圣诞节前夜 – 雨伞</h3><p>快女生宿舍楼前，也不知道她在哪一栋，打个电话。<br>手抖抖拨通了电话，激动又害怕。<br>“喂”<br>“今天平安夜，我买了个苹果，准备送给你，下来拿一下吧！”<br>“噢”<br>虽然语言简短，害怕的心情一下没了，激动的心情溢于言表。<br>你撑着一把伞，低着头，接走了我的礼物，说了声“谢谢你”，转身就走了。<br>这样温和的气质简直绝了，眼望着黑色的伞，弱弱的身影缓缓的走向宿舍楼下。<br>突然觉得好冷，原来自己忘记了撑伞。</p>
<h2 id="似有若无">似有若无</h2><h3 id="追求_–_襄阳_七夕">追求 – 襄阳 七夕</h3><blockquote>
<p>你存在，我深深的脑海里，我的心里，我的梦里，我的歌声里…</p>
</blockquote>
<p>正在参加课程培训的他，由于培训老师回家休假。获得7天的休假，顿时兴奋了。<br>“我要到襄阳来找你！”他说<br>乘坐5个小时的卧铺来到了襄阳，正值夏末。晚上微风徐徐，俩人一言一语走在襄阳的石板道路上。<br>万达 – 大得有点突破他的想象，之前没有逛过。<br>韩国料理 – 点了好多寿司，一边说一边聊，吃着撑死了。<br>诸葛亮广场 – 广场舞，打羽毛球<br>柬埔寨 – 那时胖胖的你，羞涩的拍照<br>襄阳牛肉面馆吃早点 – 正宗，好吃，牛肉多。虽然下着小雨，虽然只有我们两个，但有一种下雨天和襄阳牛肉面很配的感觉<br>路边店正放着那首歌，记录他的朦胧恋情，“你存在，我深深的脑海里，我的心里，我的梦里，我的歌声里…”</p>
<h2 id="黄金时代">黄金时代</h2><h3 id="热恋_–_恩施城">热恋 – 恩施城</h3><p>古老而神秘的恩施城，那时破落别致，我的母校就在这片大山之中，孕育了一代又一代的优秀学子。</p>
<p>32号火锅店 – 第一次正式约会<br>凤凰山 – 一起学溜冰；冬天复习功课的时候爬爬山，晒晒太阳。<br>枫香坡 – 烧烤，野炊，醉醺醺的我，竟然不知道怎么上车了，烂醉如泥。还照了一张那么龊的相片！<br>柳州城 – 青涩的她他,有一匹骏马，有她和它的合照，一个没有水的木桥，站着是文艺瘦弱的那个他。<br>女儿城 – 新修的商业区，还在完工中，宁静诡异。借着月色，背着她走了很长一段夜路。<br>德克士 – 七夕的粉色气球<br>疯狂土豆 – 逢到即买<br>附近餐馆 – 基本吃遍。最好吃还是香辣虾888，还有一个你为了庆祝他的生日点的虾蟹馆，皇家御厨什么的，忘记名字了，那家很不错。</p>
<h3 id="热恋_–_民院_–_那些如沐春风般的日子">热恋 – 民院 – 那些如沐春风般的日子</h3><p>一起吃过的饭，睡过的觉，滚过的草坪，看过的书。那儿有过我们的一切。</p>
<p>五环 – 冬天一起复习看过的书，晒过的太阳，听过的歌。夕阳下打过的羽毛球，乒乓球。一起跑过的步<br>土操场 – 下雨天，你不想走。最后还是走过一次，还想背着我，我还是有点重。一起吃过的一品香的肉末茄子，香菇肉丝。<br>四食堂，教工食堂 – 拉面，土豆肥肠，味道堪称一绝。<br>英语课 – 蹭到你们班，结果我被点到了。<br>马哲 – 公共课室，那时文艺青年的我，还和你交流看书《微微一笑很倾城》《致我们终将逝去的青春》等，动漫等，只为靠近你。<br>《何以笙箫默》 – 花式虐心终修成眷侣的好书，你的最爱。<br>期末 – 文艺路线开启，非学霸模式，坐在化环院，看窗外的一种很好看的粉白色花。后来，查了才知道是合欢花。<br>合欢花花语 – 象征永远恩爱、两两相对、是夫妻好合。<br>皮蛋瘦肉粥 – 生平第一次吃皮蛋粥，好温暖，幸福。很感动！</p>
<h3 id="倒数第二个暑假_–_兼职">倒数第二个暑假 – 兼职</h3><h4 id="印象地板">印象地板</h4><p>吃遍了学校附近所有的餐馆，也自己动手做了不少好吃的火锅，虽然我下厨比较少。</p>
<p>拉客 – 很多客人，第一次没脸的请别人帮忙。至此之后我的脸皮越来越厚了。</p>
<h3 id="倒数第一个暑假_–_考研">倒数第一个暑假 – 考研</h3><p>正在培训的我，选择了考研。我脑袋被门挤了，对，被驴踢了<br>痛苦，折磨，狂躁，低沉，静心。<br>作息相当规律，吃饭一日三餐，每天三点一线。<br>此处略去N个字…</p>
<h3 id="游戏人生">游戏人生</h3><blockquote>
<p>赢了天下输了她</p>
</blockquote>
<h4 id="CROSS_FIRE">CROSS FIRE</h4><p>那是我还没有电脑，你借给我玩了一个星期。此后就染上了玩游戏的恶习，去网吧，和室友一起玩。<br>因此室友从床上摔下来，在医院住了一个星期，幸好没事，我再也没玩它了。</p>
<h4 id="DNF">DNF</h4><p>也是周末没事，室友去网吧，我也跟着去了，之前都是不会太迷恋游戏。<br>在他们的带领下，我玩上了升级的游戏。一起打怪升级。<br>在我的怂恿下，你也玩起了这个游戏。也有过一段，没日没夜的升级。<br>为了给她游戏人物买时装，在每天早晨室友都还没起床，我就刷上了金钱，坚持了一个半月，终于筹齐7000kw游戏币。<br>室友都说我什么时候变富有了，我只是笑笑。</p>
<p>后来，在买完时装后，你说你只是想陪我玩，我也老是说她。后来都没玩了。我也一时没有喜好。</p>
<h4 id="LOL">LOL</h4><p>你说你想玩LOL,我见室友玩的不知白天黑夜，很是担心。我说这个游戏不适合女生玩。<br>后来你又提到过几次，于是我试着玩了玩。游戏确实很不错，我也因此沉溺其中。</p>
<p>之前我一直认为游戏胜利最重要，在为取得胜利前别妨碍我。后来，发现只是个气氛、消遣而已，和喝酒一样。<br>别逞英豪，多想想身边人！</p>
<p>这注定在大学生活中以及情感生活中留下的最大败笔！</p>
<h2 id="武汉_–_虎泉">武汉 – 虎泉</h2><blockquote>
<p>人世间有百媚千抹<br>我独爱爱你那一种 </p>
</blockquote>
<p>那天你化了美美的妆，当我第一眼看见你的时候，我看傻了，太美了。当我反应过来的时候我已经掉队了。<br>一路上，各处逛街。我一路上也就看看你，像个傻X一样默默的看着。</p>
<p>光谷广场 – 烧烤，噢，我又小气了，你不喜欢吃田螺烧烤，然而我一个人尴尬的吃完了。<br>西班牙风情街 – 拍照，着实那尴尬的场面为何不给我面子。哎，忍不下，没心情。自己拍<br>欢乐谷 – 一起坐过山车，吓坏你了。没有下次了，我保证！</p>
<h2 id="末恋">末恋</h2><h3 id="厨师_–_北京_东馨园">厨师 – 北京 东馨园</h3><blockquote>
<p>喜欢你<br>那双眼动人 笑声更迷人<br>愿再可轻抚你<br>那可爱面容 挽手说梦话</p>
</blockquote>
<p>从未感觉这是最后一段时光，只是感觉生活枯燥疲乏了许多，做饭，洗衣服。拖地，躺在床上玩手机游戏，还要帮她玩。噢，no！<br>生活简朴，带的香肠只够维持了半个月的肉食生活。之后每周末才能吃到肉。她也跟着吃苦，日子过得实在是朴素。</p>
<p>东馨园 – 为你吹头发，一起铺床单，周末一起买菜做饭<br>颐和园 – 苏州街，逛公园。交通太堵，你在车上睡着了，靠着我肩膀，半睡半醒的你萌到我了。<br>什刹海 – 后海，自行车，不开心。丢下你，很担心，后悔。</p>
<h2 id="诀别">诀别</h2><blockquote>
<p>汉兵已掠地，四方楚歌声，大王已气尽，贱妾何潦生。</p>
</blockquote>
<h3 id="回龙观_–_房客">回龙观 – 房客</h3><blockquote>
<p>灯火辉煌的街头<br>突然袭来了一阵寒流</p>
</blockquote>
<p>过来时，刚好她回去参加弟妹婚礼。<br>来时，去机场线接人。地铁站口吹了两个小时的凉风，望眼欲穿，终于等到你，我说了“终于到啦”。<br>我帮她拿起了包裹，看了我一眼，已没有往日温情。<br>生活已经变样了，他们上班，下班。打麻将，玩三国杀。我陪着玩，虽然我不会，只想陪着她。<br>看着她打牌的样子，我又不好意思打扰。看看电视，就睡觉了。<br>或许离开她太久了，似乎已经不需要我的陪伴了。</p>
<p>下班接她 – 唯独的一次独处时间，一起回去。俩人熟悉又陌生，搭乘地铁回去了。<br>日式快餐吉野家 – 味道很普通，我还说，很好吃，很不错，因为只想和你在一起，给你我能给的陪伴。<br>烤串 – 不愿意的争吵终于爆发，绝望，无语。</p>
<p>夏日再绚丽的花朵到了冬天终将枯萎。</p>
<p>第二日，时间没有停留，他也毅然决然的走了。</p>
<p>终！</p>
<h2 id="伤别离">伤别离</h2><blockquote>
<p>拿着你给的照片<br>熟悉的那一条街<br>只是没了你的画面<br>我们回不到那天</p>
</blockquote>
<p>你若安好，便是晴天！<br>还记得我送你的另一半吗？还在吗？</p>
<h2 id="下一站">下一站</h2>]]></content>
    <summary type="html">
    <![CDATA[目前对生活的一些感悟]]>
    
    </summary>
    
      <category term="September" scheme="http://yoursite.com/tags/September/"/>
    
      <category term="Emotion" scheme="http://yoursite.com/categories/Emotion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse开发maven项目60000错误]]></title>
    <link href="http://yoursite.com/2015/11/22/eclipse%E5%BC%80%E5%8F%91maven%E9%A1%B9%E7%9B%AE60000%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2015/11/22/eclipse开发maven项目60000错误/</id>
    <published>2015-11-22T11:37:26.000Z</published>
    <updated>2015-11-22T11:58:13.542Z</updated>
    <content type="html"><![CDATA[<h2 id="坚持每天写一点">坚持每天写一点</h2><h3 id="操作步骤">操作步骤</h3><ol>
<li>首先根据错误提示去~/.m2/repository/下去找org/hamcrest/hamcrest-core/1.3</li>
<li>删除目录下含有lastupdate结尾的jar(无效的jar)</li>
<li>百度maven hamcrest-core-1.3.jar和hamcrest-library-1.3.jar。直接手动下载.</li>
<li>然后直接复制到对应版本的目录下。</li>
</ol>
<p>刷新项目ok！！</p>
]]></content>
    <summary type="html">
    <![CDATA[在使用junit时候出现一个依赖包叫做hankcs，有两个jar包，一个是core，一个是library,创建好项目之后。提示说在所给的mirror地址下网络错误码:60000]]>
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
      <category term="hamcrest" scheme="http://yoursite.com/tags/hamcrest/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GENYMOTION的安装]]></title>
    <link href="http://yoursite.com/2015/11/21/Genymotion%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2015/11/21/Genymotion的安装/</id>
    <published>2015-11-21T13:53:56.000Z</published>
    <updated>2015-11-21T14:17:09.580Z</updated>
    <content type="html"><![CDATA[<h3 id="在genymotion官网上注册一个账号">在genymotion官网上注册一个账号</h3><ol>
<li>然后下载安装genymotion,会自带安装virtualbox</li>
<li>安装完成之可能会出现断网情况。<br>解决办法：选择本地连接和 virtualbox host-only这两个，鼠标右键选择桥接。</li>
</ol>
<h3 id="eclipse的配置">eclipse的配置</h3><ol>
<li>打开eclispe</li>
<li>选择help&gt;install new software</li>
<li>输入<a href="http://plugins.genymotion.com/eclipse。！！然后去掉勾选出现安装items，select" target="_blank" rel="external">http://plugins.genymotion.com/eclipse。！！然后去掉勾选出现安装items，select</a> all</li>
<li>安装，直至完成。这个时候重启eclipse可以发现已经多了一个genymotion图标。</li>
<li>另外在genymotion中也要更改设置 settings&gt;ADB</li>
<li>配置自己的android sdk目录 %android_dir%/_x64_windows/sdk</li>
</ol>
<p>至此已经大工告成！</p>
<h3 id="相关连接">相关连接</h3><p><a href="https://www.genymotion.com/#!/" target="_blank" rel="external">genymotion官网</a></p>
]]></content>
    <summary type="html">
    <![CDATA[android最快的模拟器genymotion]]>
    
    </summary>
    
      <category term="Genymotion" scheme="http://yoursite.com/tags/Genymotion/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的Hexo创建历程]]></title>
    <link href="http://yoursite.com/2015/11/21/%E6%88%91%E7%9A%84Hexo%E5%88%9B%E5%BB%BA%E5%8E%86%E7%A8%8B/"/>
    <id>http://yoursite.com/2015/11/21/我的Hexo创建历程/</id>
    <published>2015-11-21T05:51:56.000Z</published>
    <updated>2015-11-21T06:46:28.322Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>使用hexo在github上搭建个人博客,创建一个属于自己的个人空间。你可以分享技术，分享学术，也可以分享生活中的点点滴滴。让我们从这里开始吧！</p>
</blockquote>
<h2 id="详细步骤">详细步骤</h2><p>1.首先申请一个<a href="github.com">github</a>账号<br>2.创建一个名为your_username.github.io的repository<br>2.然后安装<a href="http://git-scm.com/download/win" target="_blank" rel="external">Git</a>和<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs</a></p>
<h3 id="Git的相关配置">Git的相关配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Paul"</span></span><br><span class="line">$ git config --global user.email <span class="string">"paul@sina.com"</span></span><br></pre></td></tr></table></figure>
<h3 id="生成密钥">生成密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"humingx@yeah.net"</span></span><br></pre></td></tr></table></figure>
<p>连续输入三个回车，没问题就去~/.ssh/目录下，查看是否生成id_rsa和id_rsa.pub</p>
<h3 id="添加密钥到ssh-agent">添加密钥到ssh-agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h3 id="复制密钥">复制密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment">#测试密钥</span></span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub <span class="comment">#复制密钥</span></span><br></pre></td></tr></table></figure>
<h3 id="添加可信任电脑">添加可信任电脑</h3><p>1.到你的github &gt;&gt; setttings &gt;&gt; SSH keys &gt;&gt; add key<br>2.右键鼠标粘贴进去，github设置到此ok。</p>
<h2 id="推荐参考网址">推荐参考网址</h2><p>参考这几个网页<br>1.<a href="http://segmentfault.com/a/1190000002645623" target="_blank" rel="external">git配置ssh</a><br>2.<a href="http://jingyan.baidu.com/article/14bd256e201f12bb6d261222.html" target="_blank" rel="external">git创建静态网页</a><br>3.<a href="http://wsgzao.github.io/post/hexo-guide/#安装GIT" target="_blank" rel="external">nodejs安装</a><br>4.<a href="http://segmentfault.com/a/1190000002632530" target="_blank" rel="external">hexo常用命令</a></p>
<h2 id="注意事项">注意事项</h2><p>1.这里命名方式注意！！！<br>    创建一个项目，命名比较特殊，格式：your_username_in_github.github.io<br>2.nodejs安装完一定要使用npm init来创建一个package.json<br>然后就是hexo设置在全局里面<br>3.不懂多问度娘或者Google!!</p>
]]></content>
    <summary type="html">
    <![CDATA[使用hexo在github上搭建个人博客]]>
    
    </summary>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
      <category term="FirstTry" scheme="http://yoursite.com/categories/FirstTry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Blog]]></title>
    <link href="http://yoursite.com/2015/11/21/First-Blog/"/>
    <id>http://yoursite.com/2015/11/21/First-Blog/</id>
    <published>2015-11-21T05:13:12.000Z</published>
    <updated>2015-11-21T05:22:55.520Z</updated>
    <content type="html"><![CDATA[<p>写点东西吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Rollingdeep" scheme="http://yoursite.com/tags/Rollingdeep/"/>
    
      <category term="FirstTry" scheme="http://yoursite.com/categories/FirstTry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/11/20/hello-world/"/>
    <id>http://yoursite.com/2015/11/20/hello-world/</id>
    <published>2015-11-20T03:34:50.000Z</published>
    <updated>2015-11-23T13:08:22.070Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Guidebook]]>
    
    </summary>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="FirstTry" scheme="http://yoursite.com/categories/FirstTry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客]]></title>
    <link href="http://yoursite.com/2015/09/01/FirstBlog/"/>
    <id>http://yoursite.com/2015/09/01/FirstBlog/</id>
    <published>2015-09-01T11:07:43.000Z</published>
    <updated>2015-11-21T05:22:52.223Z</updated>
    <content type="html"><![CDATA[<p>###怎么写文章啊，不会啊</p>
<p>##我累个去</p>
]]></content>
    <summary type="html">
    <![CDATA[生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="FirstTry" scheme="http://yoursite.com/categories/FirstTry/"/>
    
  </entry>
  
</feed>
