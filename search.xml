<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android之相机相册服务调用</title>
    <url>/2015/12/22/Android%E4%B9%8B%E7%9B%B8%E6%9C%BA%E7%9B%B8%E5%86%8C%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h3 id="相册服务"><a href="#相册服务" class="headerlink" title="相册服务"></a>相册服务</h3><ol>
<li>判断是否有外存</li>
<li>通过startActivityForResult(intent, MainActivity.GALLERY_REQUET)返回主Activity获得result.</li>
<li>重写方法 protected void onActivityResult(int requestCode, int resultCode, Intent data);</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用相册服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>&#123;</span><br><span class="line">         Intent intent = <span class="keyword">null</span>;</span><br><span class="line">         String state = Environment.getExternalStorageState();  </span><br><span class="line">         <span class="keyword">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;  </span><br><span class="line">             intent=<span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">             intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">             intent.setType(<span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">             intent.putExtra(<span class="string">&quot;cameraPhoto&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">             startActivityForResult(intent, MainActivity.GALLERY_REQUET);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                 Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;请确认已经插入SD卡&quot;</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">             &#125;  </span><br><span class="line">             Log.i(<span class="string">&quot;Target&quot;</span>, <span class="string">&quot;选取照片&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="相机服务"><a href="#相机服务" class="headerlink" title="相机服务"></a>相机服务</h3><p>这里给出的就是拍照并根据时间保存相片，然后image_path作为全局变量，在onActivityResult(int requestCode, int resultCode, Intent data);继续使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用相机服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeCamera</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory()+File.separator+Environment.DIRECTORY_DCIM;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;static-access&quot;)</span></span><br><span class="line">            String temName = <span class="keyword">new</span> DateFormat().format(<span class="string">&quot;yyMMdd_hhmmss&quot;</span>,System.currentTimeMillis()) + <span class="string">&quot;_&quot;</span> + (Math.random()*<span class="number">100</span>)+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">            image_path = path + File.separator + temName;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Uri uri=Uri.fromFile(file);</span><br><span class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); </span><br><span class="line">            startActivityForResult(intent, CAMERA_REQUEST);</span><br><span class="line">            Log.i(<span class="string">&quot;Target&quot;</span>, <span class="string">&quot;照相&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="onActivityResult"><a href="#onActivityResult" class="headerlink" title="onActivityResult"></a>onActivityResult</h3><p>在Activity跳转中很常用<br>这里用于系统服务和我们程序跳转，我想原理应该类似<br>onActivityResult(int requestCode, int resultCode, Intent data)不多说，生命周期<br>WARNING：</p>
<ol>
<li>CAMERA_REQUEST中是通过image_path生成File再生成的Uri，没有使用Intent data中的数据</li>
<li>在Fragment中调用MainActivity时候要强转为Activity类，即((MainActivity)getActivity()).takeCamera();<br>这两点我在做的时候，疑惑了好久！后来发现，不难理解</li>
</ol>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap photo;</span><br><span class="line">    <span class="comment">//系统参数</span></span><br><span class="line">    <span class="keyword">private</span> String image_path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(requestCode == CAMERA_REQUEST &amp;&amp; resultCode == RESULT_OK)&#123;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Uri uri = Uri.fromFile(file);</span><br><span class="line">                BitmapFactory.Options options=<span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">                options.inJustDecodeBounds=<span class="keyword">true</span>;                </span><br><span class="line">                BitmapFactory.decodeStream(getContentResolver().openInputStream(uri), <span class="keyword">null</span>, options);</span><br><span class="line">                options.inSampleSize=<span class="number">4</span>;</span><br><span class="line">                options.inJustDecodeBounds=<span class="keyword">false</span>;</span><br><span class="line">                Bitmap map=BitmapFactory.decodeStream(getContentResolver().openInputStream(uri), <span class="keyword">null</span>, options);</span><br><span class="line">                android.provider.MediaStore.Images.Media.insertImage(getContentResolver(), map, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                sendBroadcast(<span class="keyword">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));</span><br><span class="line"><span class="comment">//              image.setImageBitmap(map);</span></span><br><span class="line">                photo = map;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(requestCode == GALLERY_REQUET &amp;&amp; resultCode == RESULT_OK)&#123;</span><br><span class="line">            ContentResolver resolver = getContentResolver();</span><br><span class="line">            Uri selectedImage = data.getData();  </span><br><span class="line">            String[] filePathColumn = &#123; MediaStore.Images.Media.DATA &#125;;  </span><br><span class="line">       </span><br><span class="line">            Cursor cursor = resolver.query(selectedImage,  </span><br><span class="line">                     filePathColumn, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">            cursor.moveToFirst();  </span><br><span class="line">            <span class="keyword">int</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class="number">0</span>]);  </span><br><span class="line">            String choosePicturePath = cursor.getString(columnIndex);  </span><br><span class="line">            cursor.close(); </span><br><span class="line">            Log.i(<span class="string">&quot;Target&quot;</span>,choosePicturePath);</span><br><span class="line">            photo = BitmapFactory.decodeFile(choosePicturePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================华丽丽的分割线============================</span></span><br><span class="line"><span class="comment">//=========================调用系统服务============================</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用相机服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeCamera</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory()+File.separator+Environment.DIRECTORY_DCIM;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;static-access&quot;)</span></span><br><span class="line">            String temName = <span class="keyword">new</span> DateFormat().format(<span class="string">&quot;yyMMdd_hhmmss&quot;</span>,System.currentTimeMillis()) + <span class="string">&quot;_&quot;</span> + (Math.random()*<span class="number">100</span>)+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">            image_path = path + File.separator + temName;</span><br><span class="line">            File file=<span class="keyword">new</span> File(image_path);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            Uri uri=Uri.fromFile(file);</span><br><span class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri); </span><br><span class="line">            startActivityForResult(intent, CAMERA_REQUEST);</span><br><span class="line">            Log.i(<span class="string">&quot;Target&quot;</span>, <span class="string">&quot;照相&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用相册服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>&#123;</span><br><span class="line">         Intent intent = <span class="keyword">null</span>;</span><br><span class="line">         String state = Environment.getExternalStorageState();  </span><br><span class="line">         <span class="keyword">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;  </span><br><span class="line">             intent=<span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">             intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">             intent.setType(<span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">             intent.putExtra(<span class="string">&quot;cameraPhoto&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">             startActivityForResult(intent, MainActivity.GALLERY_REQUET);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> &#123;  </span><br><span class="line">                 Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;请确认已经插入SD卡&quot;</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">             &#125;  </span><br><span class="line">             Log.i(<span class="string">&quot;Target&quot;</span>, <span class="string">&quot;选取照片&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android之SharedPreferences存储数据</title>
    <url>/2015/12/20/Android%E4%B9%8BSharedPreferences%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>SharedPreferences一般是用于系统设置数据的存储，在项目中我用在了Fragment返回前一个Fragment，保证前一个Fragment数据不丢失！</p>
</blockquote>
<h3 id="SharedPreferences基本存取"><a href="#SharedPreferences基本存取" class="headerlink" title="SharedPreferences基本存取"></a>SharedPreferences基本存取</h3><h4 id="存数据"><a href="#存数据" class="headerlink" title="存数据"></a>存数据</h4><p>SharedPreferences.Editor  一个类似map的东西，生成键值对，存入xml中。</p>
<ul>
<li>我这个是写在Fragment中，所以要getActivity();</li>
<li>你也可以写个静态方法在MainActivity中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 存入SharedPreferences</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化SharedPreferences对象（第一步） </span></span><br><span class="line">    SharedPreferences mySharedPreferences= getActivity().getSharedPreferences(<span class="string">&quot;bodyinfo&quot;</span>, </span><br><span class="line">    Activity.MODE_PRIVATE); </span><br><span class="line">    <span class="comment">//实例化SharedPreferences.Editor对象（第二步） </span></span><br><span class="line">    SharedPreferences.Editor editor = mySharedPreferences.edit(); </span><br><span class="line">    <span class="comment">//用putString的方法保存数据 </span></span><br><span class="line">    editor.putString(<span class="string">&quot;Age&quot;</span>, dis_tv1.getText().toString());</span><br><span class="line">    editor.putString(<span class="string">&quot;Height&quot;</span>, dis_tv2.getText().toString());</span><br><span class="line">    editor.putString(<span class="string">&quot;Weight&quot;</span>, dis_tv3.getText().toString());    </span><br><span class="line">    <span class="comment">//提交当前数据 </span></span><br><span class="line">    editor.commit(); </span><br><span class="line">    <span class="comment">//使用toast信息提示框提示成功写入数据 </span></span><br><span class="line">    Toast.makeText(getActivity(), <span class="string">&quot;数据成功写入SharedPreferences！&quot;</span> , Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<h4 id="取数据"><a href="#取数据" class="headerlink" title="取数据"></a>取数据</h4><p>写入控件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取SharedPreferences数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SharedPreferences sharedPreferences= getActivity().getSharedPreferences(<span class="string">&quot;bodyinfo&quot;</span>, </span><br><span class="line">                Activity.MODE_PRIVATE); </span><br><span class="line">                <span class="comment">// 使用getString方法获得value，注意第2个参数是value的默认值 </span></span><br><span class="line">                dis_tv1.setText(sharedPreferences.getString(<span class="string">&quot;Age&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                dis_tv2.setText(sharedPreferences.getString(<span class="string">&quot;Height&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                dis_tv3.setText(sharedPreferences.getString(<span class="string">&quot;Weight&quot;</span>, <span class="string">&quot;&quot;</span>));        </span><br><span class="line">                <span class="comment">//使用toast信息提示框显示信息 </span></span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">&quot;读取数据如下成功&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Fragment跳转Fragment数据不丢失"><a href="#Fragment跳转Fragment数据不丢失" class="headerlink" title="Fragment跳转Fragment数据不丢失"></a>Fragment跳转Fragment数据不丢失</h3><ul>
<li>跳转前A将数据存储到SharedPreferences中</li>
<li>跳转B后返回时候加载<br>  通过A设置全局变量mStack，在每次跳转时候，mStack++;<br>  当然你会问mStack在transaction.replace()方法时候移除了，在加载又是初始值。看下一条</li>
<li>为了保存Fragment中的变量，一般会重写onSaveInstanceState(Bundle outState)和 onCreate(Bundle savedInstanceState) 。一个存一个取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">         outState.putInt(<span class="string">&quot;level&quot;</span>, mStackLevel);</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">             mStackLevel = savedInstanceState.getInt(<span class="string">&quot;level&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后，在onCreateView重新加载视图<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">            Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mStackLevel != <span class="number">0</span>)&#123;</span><br><span class="line">                    outStore();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>SharedPreferences</tag>
      </tags>
  </entry>
  <entry>
    <title>2017网易校招笔试编程整理</title>
    <url>/2016/09/25/2017%E7%BD%91%E6%98%93%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95%E7%BC%96%E7%A8%8B%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="数位和最小"><a href="#数位和最小" class="headerlink" title="数位和最小"></a>数位和最小</h3><p>一个数字的数位和定义为这个数字所有位置的数值的总和，例如：<br>1234的数位和为：1 + 2 + 3 + 4 = 10<br>5463的数位和为：5 + 4 + 6 + 3 = 18<br>现在有三个数A、B、C,需要你求出在A、B范围内(包括A,B)的一个数X,让X的数位和与C的数位和差值最小。</p>
<blockquote>
<p>输入：为一行，一行有三个数A,B,C,使用空额隔开。<br>(1&lt;=A,B,C&lt;=1,000,000,000)<br>(0 &lt;= B-A &lt;=100,000)<br>输出：输出一个数X,如果多个解输出最小的那个解。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span> </span><br></pre></td></tr></table></figure>
<h3 id="二进制权重相同的数字"><a href="#二进制权重相同的数字" class="headerlink" title="二进制权重相同的数字"></a>二进制权重相同的数字</h3><p>给定一个数字N,求与数字N相同权重的数字X。<br>要求：数字X = min(D), D &gt; N<br>权重：数字N的二进制位上’1’的个数。</p>
<blockquote>
<p>N = 5 二进制是101 权重是2  输出X = 6<br>N = 97 二进制是110001 权重是3 输出X= 98</p>
</blockquote>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Main &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="built_in">int</span> N;</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        System.out.<span class="built_in">println</span>(fun(N));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> fun(<span class="built_in">int</span> num)&#123;</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span> =   Integer.toBinaryString(num);</span><br><span class="line">        <span class="built_in">str</span> = flip(<span class="built_in">str</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(<span class="built_in">str</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> flip(<span class="keyword">String</span> <span class="built_in">str</span>)&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="built_in">int</span> strLen = <span class="built_in">str</span>.length();</span><br><span class="line">        <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span> ;i &lt; strLen;i ++)&#123;</span><br><span class="line">            <span class="built_in">char</span> c = <span class="built_in">str</span>.charAt(strLen - i - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//第一个为&#x27;1&#x27;的位置</span></span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span> &amp;&amp; c == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第一个为&#x27;0&#x27;的位置</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span> &amp;&amp; c == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sb.<span class="built_in">append</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若是字符串中没有&#x27;0&#x27;,左移 &lt;&lt; 1</span></span><br><span class="line">        <span class="keyword">if</span>(flag != <span class="number">2</span>)<span class="keyword">return</span> <span class="built_in">str</span> + <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> sb.<span class="built_in">reverse</span>().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2>]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>ANDROID STUDIO 安装提示JDK未安装解决办法</title>
    <url>/2016/06/22/Android-Studio-%E5%AE%89%E8%A3%85%E6%8F%90%E7%A4%BAjdk%E6%9C%AA%E5%AE%89%E8%A3%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>Android Studio安装时候提示未检测path中含有1.7或者1.7+jdk<br>解决办法</li>
</ul>
<ol>
<li>检查系统中是否含有JAVA_HOME，path是否指定到%JAVA_HOME%\bin；</li>
<li>将JAVA_HOME中‘\’替换为‘/’, path中也一致改为%JAVA_HOME%/bin;</li>
</ol>
<ul>
<li>在home目录下创建.开头的文件<br>在dos下用mkdir创建</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android全适配</title>
    <url>/2015/11/27/Android%E5%85%A8%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="屏幕像素密度dpi"><a href="#屏幕像素密度dpi" class="headerlink" title="屏幕像素密度dpi"></a>屏幕像素密度dpi</h3><ul>
<li>屏幕尺寸单位：1英寸=2.54厘米</li>
<li>屏幕像素密度：dpi(每英寸上面像素点个数)</li>
</ul>
<p>例子：1920*1280 5.2inch<br>Dpi = sqrt(1920^2+1280^2)/5.2</p>
<h4 id="关于dp-dip"><a href="#关于dp-dip" class="headerlink" title="关于dp,dip"></a>关于dp,dip</h4><ul>
<li>基准160dpi：1dip=1px<br>320dpi上，1dip = 2px;<br>任意设备上，1dpi是多少。也就是1dip = dpi/160 px。</li>
</ul>
<h2 id="全适配"><a href="#全适配" class="headerlink" title="全适配"></a>全适配</h2><ul>
<li>使用wrap_content、match_parent、weight</li>
<li>使用相对布局、禁用绝对布局</li>
<li>使用限定符</li>
<li>使用自动拉伸位图</li>
</ul>
<h3 id="布局权重layout-weight"><a href="#布局权重layout-weight" class="headerlink" title="布局权重layout_weight"></a>布局权重layout_weight</h3><p>计算出的宽度 = 控件原始宽度 + 剩余宽度*百分比。</p>
<ul>
<li><p>假定屏幕宽度为L，横向线性布局<br>Button1:match_parent 宽度为L<br>Button2:match_parent 宽度为L<br>控件总宽度：2L<br>剩余宽度为 = 屏幕宽度 - 控件总宽度<br>Button1:2/3L = L+(L-2L)<em>(1/3)<br>Button2:1/3L= L+(L-2L)</em>(2/3)</p>
</li>
<li><p>假定线性布局下设置宽度为O<br>Button1:2/3L = 0 + (L-0)<em>(1/3)<br>Button2:1/3L= 0 + (L-0)</em>(2/3)</p>
</li>
</ul>
<h3 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h3><p>这个不多说。</p>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>屏幕最小宽度限定符layout-sw600dp<br>屏幕方向限定符 layout-sw600dp-port layout-sw600dp-land</p>
<h4 id="尺寸限定符"><a href="#尺寸限定符" class="headerlink" title="尺寸限定符"></a>尺寸限定符</h4><p>Google android3.2之前规定<br>在手机上使用，我们一般是单面板模式   res/layout/main.xml 单面板<br>在平板上使用，我们一般采用双面板模式 res/layout-large/main.xml 双面板<br>这样我们在对应文件下写两个布局分别适配。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">res/layout/main.xml 单面板</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment android:id=<span class="string">&quot;@+id/headlines&quot;</span></span><br><span class="line">              android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">              android:name=<span class="string">&quot;com.example.android.newsreader.HeadlinesFragment&quot;</span></span><br><span class="line">              android:layout_width=<span class="string">&quot;match_parent&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">res/layout-large/main.xml 双面板</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">&quot;@+id/headlines&quot;</span></span><br><span class="line">              android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">              android:name=<span class="string">&quot;com.example.android.newsreader.HeadlinesFragment&quot;</span></span><br><span class="line">              android:layout_width=<span class="string">&quot;400dp&quot;</span></span><br><span class="line">              android:layout_marginRight=<span class="string">&quot;10dp&quot;</span>/&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">&quot;@+id/article&quot;</span></span><br><span class="line">              android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">              android:name=<span class="string">&quot;com.example.android.newsreader.ArticleFragment&quot;</span></span><br><span class="line">              android:layout_width=<span class="string">&quot;fill_parent&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="最小宽度限定符"><a href="#最小宽度限定符" class="headerlink" title="最小宽度限定符"></a>最小宽度限定符</h4><p>Google android3.2之后新规：按屏幕最短的那个边，如果大于600dp，要使用layout-sw600dp<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">res/layout/main.xml，单面板（默认）布局：</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment android:id=<span class="string">&quot;@+id/headlines&quot;</span></span><br><span class="line">              android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">              android:name=<span class="string">&quot;com.example.android.newsreader.HeadlinesFragment&quot;</span></span><br><span class="line">              android:layout_width=<span class="string">&quot;match_parent&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">res/layout-sw600dp/main.xml，双面板布局：  Small Width 最小宽度</span><br><span class="line"></span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">&quot;@+id/headlines&quot;</span></span><br><span class="line">              android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">              android:name=<span class="string">&quot;com.example.android.newsreader.HeadlinesFragment&quot;</span></span><br><span class="line">              android:layout_width=<span class="string">&quot;400dp&quot;</span></span><br><span class="line">              android:layout_marginRight=<span class="string">&quot;10dp&quot;</span>/&gt;</span><br><span class="line">    &lt;fragment android:id=<span class="string">&quot;@+id/article&quot;</span></span><br><span class="line">              android:layout_height=<span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">              android:name=<span class="string">&quot;com.example.android.newsreader.ArticleFragment&quot;</span></span><br><span class="line">              android:layout_width=<span class="string">&quot;fill_parent&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="屏幕方向限定符"><a href="#屏幕方向限定符" class="headerlink" title="屏幕方向限定符"></a>屏幕方向限定符</h4><p>这个主要针对平板。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">res/values-sw600dp-land/layouts.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;main&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;layout&quot;</span>&gt;@layout/main_twopanes&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">res/values-sw600dp-port/layouts.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;main&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;layout&quot;</span>&gt;@layout/main&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="布局别名"><a href="#布局别名" class="headerlink" title="布局别名"></a>布局别名</h4><p>让系统去分局values命名去选择要使用的布局文件。<br>并采用布局别名的方式,写法依旧是setContentView(R.layout.main);<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">res/layout/main.xml: 			单面板布局</span><br><span class="line">res/layout-large/main.xml: 		多面板布局</span><br><span class="line">res/layout-sw600dp/main.xml: 	多面板布局</span><br><span class="line"></span><br><span class="line">res/layout/main.xml  			单面板布局</span><br><span class="line">res/layout/main_twopanes.xml 	双面板布局</span><br><span class="line"></span><br><span class="line">setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">默认布局</span><br><span class="line">res/values/layout.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;main&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;layout&quot;</span>&gt;@layout/main&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">Android3.2之前的平板布局</span><br><span class="line">res/values-large/layout.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;main&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;layout&quot;</span>&gt;@layout/main_twopanes&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">Android3.2之后的平板布局</span><br><span class="line">res/values-sw600dp/layout.xml:</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;main&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;layout&quot;</span>&gt;@layout/main_twopanes&lt;/item&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="自动拉伸位图"><a href="#自动拉伸位图" class="headerlink" title="自动拉伸位图"></a>自动拉伸位图</h4><p>图片格式的自适应<br>.9图：picture.9.png:<br>左、上：拉伸区域(横纵向放缩)<br>右、下:padding box(optical)(和边框的距离即为padding)</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>BAT面试准备</title>
    <url>/2016/03/21/BAT%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="数组、链表"><a href="#数组、链表" class="headerlink" title="数组、链表"></a>数组、链表</h4><ol>
<li><a href="http://www.cppblog.com/cxiaojia/archive/2012/07/31/185760">http://www.cppblog.com/cxiaojia/archive/2012/07/31/185760</a></li>
<li><a href="http://blog.csdn.net/hackbuteer1/article/details/6591486/">http://blog.csdn.net/hackbuteer1/article/details/6591486/</a></li>
<li><a href="http://blog.csdn.net/pony_maggie/article/details/38390513">http://blog.csdn.net/pony_maggie/article/details/38390513</a></li>
<li><a href="http://blog.csdn.net/niteip/article/details/11840691">AVL</a> </li>
</ol>
<ul>
<li><a href="http://blog.csdn.net/vesper305/article/details/13614403">AVL平衡二叉树中旋转操作的本质及其实现</a></li>
</ul>
<ol>
<li><a href="http://blog.csdn.net/stpeace/article/details/9067029">BST</a></li>
<li><a href="http://www.cnblogs.com/oldhorse/archive/2009/11/16/1604009.html">B，B+,B-</a></li>
<li><a href="http://blog.csdn.net/tonyxf121/article/details/8393545">http://blog.csdn.net/tonyxf121/article/details/8393545</a></li>
<li><a href="http://blog.csdn.net/chenhuajie123/article/details/11900153">http://blog.csdn.net/chenhuajie123/article/details/11900153</a></li>
<li><a href="http://blog.csdn.net/ganggexiongqi/article/details/7449970">http://blog.csdn.net/ganggexiongqi/article/details/7449970</a></li>
<li><a href="http://blog.csdn.net/yutianzuijin/article/details/11954939/">http://blog.csdn.net/yutianzuijin/article/details/11954939/</a> </li>
</ol>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="String，StringBuffer-StringBuilder区别"><a href="#String，StringBuffer-StringBuilder区别" class="headerlink" title="String，StringBuffer,StringBuilder区别"></a>String，StringBuffer,StringBuilder区别</h4><ol>
<li><a href="http://blog.csdn.net/clam_clam/article/details/6831345">http://blog.csdn.net/clam_clam/article/details/6831345</a></li>
<li><a href="http://www.cnblogs.com/xudong-bupt/p/3961159.html">http://www.cnblogs.com/xudong-bupt/p/3961159.html</a></li>
</ol>
<h4 id="HashMap和HashMap区别，能否存储空值"><a href="#HashMap和HashMap区别，能否存储空值" class="headerlink" title="HashMap和HashMap区别，能否存储空值"></a>HashMap和HashMap区别，能否存储空值</h4><ol>
<li><a href="http://www.cnblogs.com/carbs/archive/2012/07/04/2576995">http://www.cnblogs.com/carbs/archive/2012/07/04/2576995</a></li>
<li><a href="http://blog.csdn.net/wl_ldy/article/details/5941770">http://blog.csdn.net/wl_ldy/article/details/5941770</a></li>
</ol>
<h4 id="ArrayList和HashMap初始容量"><a href="#ArrayList和HashMap初始容量" class="headerlink" title="ArrayList和HashMap初始容量"></a>ArrayList和HashMap初始容量</h4><ol>
<li><a href="http://blog.csdn.net/java2000_net/article/details/5215882">http://blog.csdn.net/java2000_net/article/details/5215882</a></li>
<li><a href="http://ask.csdn.net/questions/178013">http://ask.csdn.net/questions/178013</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_45ff7c3f0100bwan.html">http://blog.sina.com.cn/s/blog_45ff7c3f0100bwan.html</a></li>
<li><a href="http://blog.csdn.net/ghsau/article/details/16890151">http://blog.csdn.net/ghsau/article/details/16890151</a></li>
</ol>
<h4 id="并发编程，线程，线程池，加锁"><a href="#并发编程，线程，线程池，加锁" class="headerlink" title="并发编程，线程，线程池，加锁"></a>并发编程，线程，线程池，加锁</h4><ol>
<li><a href="http://blog.csdn.net/jackfrued/article/details/44499227">并发思想</a></li>
<li><a href="http://www.cnblogs.com/riskyer/p/3263032">http://www.cnblogs.com/riskyer/p/3263032</a></li>
<li><a href="http://blog.csdn.net/aboy123/article/details/38307539">http://blog.csdn.net/aboy123/article/details/38307539</a></li>
<li><a href="http://blog.jobbole.com/76308/">http://blog.jobbole.com/76308/</a></li>
<li><a href="http://developer.51cto.com/art/201509/490965.htm">http://developer.51cto.com/art/201509/490965.htm</a></li>
<li><a href="http://blog.csdn.net/yangzhijun_cau/article/details/6432216">http://blog.csdn.net/yangzhijun_cau/article/details/6432216</a></li>
<li><a href="http://cuisuqiang.iteye.com/blog/2019372">http://cuisuqiang.iteye.com/blog/2019372</a></li>
<li><a href="http://www.cnblogs.com/lxzh/archive/2013/01/20/2868736.html">http://www.cnblogs.com/lxzh/archive/2013/01/20/2868736.html</a></li>
</ol>
<h4 id="Comparable和Comparator的区别"><a href="#Comparable和Comparator的区别" class="headerlink" title="Comparable和Comparator的区别"></a>Comparable和Comparator的区别</h4><ol>
<li><a href="http://www.cnblogs.com/sunflower627/p/3158042.html">http://www.cnblogs.com/sunflower627/p/3158042.html</a></li>
<li><a href="http://www.codeceo.com/article/java-comparable-comparator.html">http://www.codeceo.com/article/java-comparable-comparator.html</a></li>
</ol>
<h4 id="GC回收分代和回收"><a href="#GC回收分代和回收" class="headerlink" title="GC回收分代和回收"></a>GC回收分代和回收</h4><ol>
<li><a href="http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html">http://www.cnblogs.com/hnrainll/archive/2013/11/06/3410042.html</a></li>
<li><a href="http://blog.csdn.net/kennyrose/article/details/7543696">http://blog.csdn.net/kennyrose/article/details/7543696</a></li>
</ol>
<h4 id="Collections方法"><a href="#Collections方法" class="headerlink" title="Collections方法"></a>Collections方法</h4><ol>
<li><a href="http://pengcqu.iteye.com/blog/492196">http://pengcqu.iteye.com/blog/492196</a></li>
<li><a href="http://blog.csdn.net/lskyne/article/details/8961014">http://blog.csdn.net/lskyne/article/details/8961014</a></li>
<li><a href="http://blog.csdn.net/ameyume/article/details/6282051">http://blog.csdn.net/ameyume/article/details/6282051</a></li>
<li><a href="http://www.cnblogs.com/gw811/archive/2012/10/10/2719134.html">http://www.cnblogs.com/gw811/archive/2012/10/10/2719134.html</a></li>
</ol>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="SQL基础，group-by等，修改表结构"><a href="#SQL基础，group-by等，修改表结构" class="headerlink" title="SQL基础，group by等，修改表结构"></a>SQL基础，group by等，修改表结构</h4><ol>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html">http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html</a></li>
<li><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html">http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html</a></li>
<li><a href="http://www.cnblogs.com/daxian2012/articles/2767989.html">http://www.cnblogs.com/daxian2012/articles/2767989.html</a></li>
<li><a href="http://www.cnblogs.com/rainman/archive/2013/05/01/3053703.html">group by</a></li>
</ol>
<h4 id="缓存机制和MySQL调优"><a href="#缓存机制和MySQL调优" class="headerlink" title="缓存机制和MySQL调优"></a>缓存机制和MySQL调优</h4><ol>
<li><a href="http://blog.csdn.net/wulantian/article/details/11043121">http://blog.csdn.net/wulantian/article/details/11043121</a></li>
<li><a href="http://blog.csdn.net/gzh0222/article/details/8001362">http://blog.csdn.net/gzh0222/article/details/8001362</a></li>
<li><a href="http://www.cnblogs.com/adforce/archive/2012/06/02/2532086.html">http://www.cnblogs.com/adforce/archive/2012/06/02/2532086.html</a></li>
<li><a href="http://www.cnblogs.com/not-code/archive/2011/11/01/2231493.html">http://www.cnblogs.com/not-code/archive/2011/11/01/2231493.html</a></li>
</ol>
<h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><ol>
<li><a href="http://blog.csdn.net/dc_726/article/details/7985430">进程基础知识</a></li>
<li><a href="http://blog.csdn.net/dc_726/article/details/8001783">进程调度</a></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="http://www.nowcoder.com/discuss/3043">面试心得与总结—-BAT、网易、蘑菇街</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_53f7991701000a2l.html">JAVA和C++相比有什么优点呢？</a></li>
<li><a href="http://blog.csdn.net/lk_blog/article/details/13760999">Java项目性能监控和调优工具-Javamelody</a></li>
<li><a href="http://liudeh-009.iteye.com/blog/1847876">java内存调优工具</a></li>
<li><a href="http://www.cnblogs.com/magialmoon/archive/2013/11/23/3439042.html">MySQL优化</a></li>
<li><a href="http://blog.csdn.net/xueshuangshuang123/article/details/8462261">Hibernate 性能优化</a></li>
<li><a href="http://bbs.csdn.net/topics/390843777?page=1">实际生活hibernate调优</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5198c7370100hvxb.html">使用Spring进行面向切面编程</a></li>
</ol>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Android之异步任务AsyncTask</title>
    <url>/2015/12/21/Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p>
</blockquote>
<h3 id="AsyncTask介绍"><a href="#AsyncTask介绍" class="headerlink" title="AsyncTask介绍"></a>AsyncTask介绍</h3><p>AsyncTask源码中有写到如何通过ThreadFactory管理Thread线程,不多介绍。<br>主要参数:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AsyncTask&lt;Params, Progress, Result&gt;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Params 启动任务执行的输入参数，比如HTTP请求的URL。</li>
<li>Progress 后台任务执行的百分比。</li>
<li>Result 后台执行任务最终返回的结果，比如String。<br>主要方法：</li>
<li>onPreExecute()    线程开始前执行(仍然是主线程)</li>
<li>doInBackground(Void… params)    异步执行(异步线程)</li>
<li>onPostExecute(String result)  线程结束后(主线程)</li>
<li>onProgressUpdate(Progress…) 进度条数据(主线程)</li>
</ul>
<h3 id="AsyncTask实例"><a href="#AsyncTask实例" class="headerlink" title="AsyncTask实例"></a>AsyncTask实例</h3><p>场景:Fragment A提交数据给服务器，服务器返回数据给Fragment B,并更新B的UI</p>
<ol>
<li>Fragment A中写入内部类，写入异步任务</li>
<li>onPreExecute()组建json格式数据，以url参数传值给服务器端</li>
<li>doInBackground(Void… params)执行http请求，根据返回码判断执行是否请求成功！发送消息给主线程</li>
<li>handler中接收消息解析code,并解析msg.obj，设置Activity全局变量setter</li>
<li>onPostExecute(String result) 执行Fragment跳转</li>
<li>Fragment加载Activity全局变量getter进入其UI数据<br>SUCCESS!</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncImageTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> StringBuilder url= <span class="keyword">new</span> StringBuilder(<span class="string">&quot;http://10.0.3.2:8080/medical_big_data/servlet/androidRequest?&quot;</span>);</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            JSONObject status = <span class="keyword">new</span> JSONObject();  </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                status.put(<span class="string">&quot;Age&quot;</span>, dis_tv1.getText());</span><br><span class="line">                status.put(<span class="string">&quot;Height&quot;</span>, dis_tv2.getText());</span><br><span class="line">                status.put(<span class="string">&quot;Weight&quot;</span>, dis_tv3.getText());              </span><br><span class="line">           &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">               <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           Log.i(<span class="string">&quot;Target&quot;</span>, status.toString());</span><br><span class="line">           url.append(<span class="string">&quot;json=[&quot;</span>+status.toString()+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> code;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               URL url = <span class="keyword">new</span> URL(<span class="keyword">this</span>.url.toString());</span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 这里网络请求使用的是类HttpURLConnection，另外一种可以选择使用类HttpClient。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               HttpURLConnection conn = (HttpURLConnection) url</span><br><span class="line">                       .openConnection();</span><br><span class="line">               conn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);<span class="comment">//使用GET方法获取</span></span><br><span class="line">               conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">               code = conn.getResponseCode();</span><br><span class="line">               Log.i(<span class="string">&quot;Target&quot;</span>, code+<span class="string">&quot;&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    * 如果获取的code为200，则证明数据获取是正确的。</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   InputStream is = conn.getInputStream();</span><br><span class="line">                   String result = HttpUtils.readMyInputStream(is);</span><br><span class="line">                   </span><br><span class="line">                   <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                   msg.obj = result;</span><br><span class="line">                   msg.what = SUCCESS;</span><br><span class="line">                   handler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               </span><br><span class="line">                   Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                   msg.what = ERRORCODE;</span><br><span class="line">                   handler.sendMessage(msg);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 如果获取失败，或出现异常，那么子线程发送失败的消息（FAILURE）到主线程，主线程显示Toast，来告诉使用者，数据获取是失败。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">               msg.what = FAILURE;</span><br><span class="line">               handler.sendMessage(msg);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">           MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">           FragmentTransaction transaction =getFragmentManager().beginTransaction();</span><br><span class="line">           transaction.replace(R.id.content,mpFragment);</span><br><span class="line">           transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">           transaction.commit();</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="异步线程和主线程通信"><a href="#异步线程和主线程通信" class="headerlink" title="异步线程和主线程通信"></a>异步线程和主线程通信</h3><p>Message类<br>[int] msg.what 主要是设置code,可参看Message源码英文解释<br>[Object] msg.obj 主要是返回的数据对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">    msg.obj = result;</span><br><span class="line">    msg.what = SUCCESS;</span><br><span class="line">    handler.sendMessage(msg);</span><br></pre></td></tr></table></figure></p>
<h3 id="主线程接收Message类Handler"><a href="#主线程接收Message类Handler" class="headerlink" title="主线程接收Message类Handler"></a>主线程接收Message类Handler</h3><p>必须实现handleMessage接收消息<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Subclasses must implement this to receive messages.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> SUCCESS:</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 获取信息成功后，对该信息进行JSON解析，得到所需要的信息，然后在textView上展示出来。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                JSONAnalysis(msg.obj.toString());</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">&quot;获取数据成功&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                .show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> FAILURE:</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">&quot;获取数据失败&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> ERRORCODE:</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">&quot;获取的CODE码不为200！&quot;</span>,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>AsyncTask</tag>
      </tags>
  </entry>
  <entry>
    <title>E: Could not read response to hello message from hook</title>
    <url>/2020/03/18/E-Could-not-read-response-to-hello-message-from-hook/</url>
    <content><![CDATA[<p>win10 子系统 wsl 安装的 ubuntu，sudo apt-get install python3 时候出现。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ <span class="comment"># sudo apt-get install python3</span></span><br><span class="line">E: Could not <span class="built_in">read</span> response to hello message from hook [ ! -f /usr/bin/snap ] || /usr/bin/snap advise-snap --from-apt 2&gt;/dev/null || <span class="literal">true</span>: Success</span><br></pre></td></tr></table></figure><br>解决方法：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ <span class="comment"># sudo rm -rf /etc/apt/apt.conf.d/20snapd.conf</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>奇技</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>First Blog</title>
    <url>/2015/11/21/First-Blog/</url>
    <content><![CDATA[<p>写点东西吧！</p>
]]></content>
      <categories>
        <category>FirstTry</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Rollingdeep</tag>
      </tags>
  </entry>
  <entry>
    <title>GENYMOTION的安装</title>
    <url>/2015/11/21/Genymotion%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="在genymotion官网上注册一个账号"><a href="#在genymotion官网上注册一个账号" class="headerlink" title="在genymotion官网上注册一个账号"></a>在genymotion官网上注册一个账号</h3><ol>
<li>然后下载安装genymotion,会自带安装virtualbox</li>
<li>安装完成之可能会出现断网情况。<br>解决办法：选择本地连接和 virtualbox host-only这两个，鼠标右键选择桥接。</li>
</ol>
<h3 id="eclipse的配置"><a href="#eclipse的配置" class="headerlink" title="eclipse的配置"></a>eclipse的配置</h3><ol>
<li>打开eclispe</li>
<li>选择help&gt;install new software</li>
<li>输入<a href="http://plugins.genymotion.com/eclipse。！！然后去掉勾选出现安装items，select">http://plugins.genymotion.com/eclipse。！！然后去掉勾选出现安装items，select</a> all</li>
<li>安装，直至完成。这个时候重启eclipse可以发现已经多了一个genymotion图标。</li>
<li>另外在genymotion中也要更改设置 settings&gt;ADB</li>
<li>配置自己的android sdk目录 %android_dir%/_x64_windows/sdk</li>
</ol>
<p>至此已经大工告成！</p>
<h3 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h3><p><a href="https://www.genymotion.com/#!/">genymotion官网</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>Genymotion</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap工作原理</title>
    <url>/2015/11/26/HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组存储区间是连续的，占用内存严重，故空间复杂的很大。但数组的二分查找时间复杂度小，为O(1)；<br>数组的特点是：寻址容易，插入和删除困难；</p>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O（N）。<br>链表的特点是：寻址困难，插入和删除容易。</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表。<br>哈希表（(Hash table）既满足了数据的查找方便，同时不占用太多的内容空间，使用也十分方便。</p>
<p><img src="http://img.blog.csdn.net/20131105152201453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="哈希表"></p>
<p><img src="http://img.blog.csdn.net/20131105152215718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmtpbmdfd2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="哈希表例子"></p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>表达式：hash(key)%arr.length(这里hash(key)是f(k),即我们常说的散列函数)</p>
<ol>
<li>f(k1)=f(k2)则散列到数组的同一个下标中，通过链表next依次存放，通过匹配key，获取值。</li>
<li>f(null)会被存放在arr[0]中,只能存一个元素，再次存取会返回oldValue;两个key相同时也是采取这种策略，新的值替换旧值，并返回旧值。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public V put(K key, V value) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (key == null)  </span><br><span class="line">          <span class="built_in">return</span> putForNullKey(value);  </span><br><span class="line">      int <span class="built_in">hash</span> = <span class="built_in">hash</span>(key.hashCode());  </span><br><span class="line">      int i = indexFor(<span class="built_in">hash</span>, table.length);  </span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;  </span><br><span class="line">          Object k;  </span><br><span class="line">          <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </span><br><span class="line">              V oldValue = e.value;  </span><br><span class="line">              e.value = value;  </span><br><span class="line">              e.recordAccess(this);  </span><br><span class="line">              <span class="built_in">return</span> oldValue;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      modCount++;  </span><br><span class="line">      addEntry(<span class="built_in">hash</span>, key, value, i);  </span><br><span class="line">      <span class="built_in">return</span> null;  </span><br><span class="line">  &#125;  </span><br></pre></td></tr></table></figure>
<h5 id="定位数组中的位置"><a href="#定位数组中的位置" class="headerlink" title="定位数组中的位置"></a>定位数组中的位置</h5><p>书本上是采用 % 模运算<br>而实际是用的 &amp; 按位与运算，“模”运算的消耗还是比较大的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">static int indexFor(int h, int length) &#123;  </span><br><span class="line">       <span class="built_in">return</span> h &amp; (length-1);  </span><br><span class="line">   &#125;  </span><br></pre></td></tr></table></figure>
<p>巧妙之处：通过哈希值和length 按位与获得位置<br>一个简单的情况：length = 16,length-1 = 15,二进制码是1111,那么任意一个h（如1110，1111）按位与都是它自身h,而且没有冲突。</p>
<h5 id="哈希表长度"><a href="#哈希表长度" class="headerlink" title="哈希表长度"></a>哈希表长度</h5><p>length总是2^n(2的倍数),每次超过阈值之后会采用一个,这也是为什么length总是2^n(2的倍数)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">            resize(2 * table.length);</span><br></pre></td></tr></table></figure>
<p>threshold = capacity * loadFactor,loadFactor默认为0.75.</p>
<h3 id="HashTable和HashMap"><a href="#HashTable和HashMap" class="headerlink" title="HashTable和HashMap"></a>HashTable和HashMap</h3><ul>
<li>Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，效率要高于Hashtable。</li>
<li>HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</li>
<li>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。</li>
<li>Hashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。<br>最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。<br>Hashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。同步上的性能，HashMap会更优秀</li>
</ul>
<p>就HashMap与HashTable主要从三方面来说，</p>
<ol>
<li>历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现</li>
<li>同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的</li>
<li>值：只有HashMap可以让你将空值作为一个表的条目的key或value</li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://blog.csdn.net/vking_wang/article/details/14166593">HashMap实现原理分析</a><br><a href="http://blog.csdn.net/heyutao007/article/details/6206153">HashMap源码分析</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>INSIST ON!</title>
    <url>/2015/12/16/Insist-on-doing-one-thing/</url>
    <content><![CDATA[<blockquote>
<p>业精于勤荒于嬉，行成于思毁于随！        —-     韩愈 ·《劝学解》<br>善始者实繁，克终者盖寡！                —-     魏征 ·《谏太宗十思疏》</p>
</blockquote>
<h2 id="Latest-Works"><a href="#Latest-Works" class="headerlink" title="Latest Works"></a>Latest Works</h2><h3 id="2015-12-16"><a href="#2015-12-16" class="headerlink" title="2015/12/16"></a>2015/12/16</h3><ol>
<li>学习完成了android项目SHMS中的Fragment跳转和传值.</li>
<li>异步 URL json传值访问web服务器,并返回需要的json,异步完成后跳转Fragment并加载json数据.</li>
<li>Fragment上点击TextView事件跳转DialogFragment. </li>
<li>搭建weka学习maven项目，预处理股票数据生成.arff数据格式。</li>
</ol>
<h3 id="2015-12-17"><a href="#2015-12-17" class="headerlink" title="2015/12/17"></a>2015/12/17</h3><ol>
<li>weka api学习,学会了加载不同的分类器</li>
<li>weka数据文件.arff，java自动写入格式</li>
<li>weka实例的增量加载方式，增量训练与预测</li>
<li>指导师弟毕设。</li>
</ol>
<h3 id="2015-12-20"><a href="#2015-12-20" class="headerlink" title="2015/12/20"></a>2015/12/20</h3><ol>
<li>SharedPreferences保存用户输入的数据，返回前一个Fragment保证数据不丢失！</li>
<li>自定义dialog,写入按钮，设置按钮的监听事件。</li>
<li>解决了读取照片，放入ImageView里。</li>
<li>哎，我的博客又没有写!</li>
</ol>
<h3 id="2015-12-21"><a href="#2015-12-21" class="headerlink" title="2015/12/21"></a>2015/12/21</h3><ol>
<li>android拍照和照片代码重构，</li>
<li>百度地图key总是有问题，转入高德。my god,help me!</li>
<li>高德地图key找不到!!</li>
<li>哎，我的博客又没有写!</li>
</ol>
]]></content>
      <categories>
        <category>Emotion</category>
      </categories>
      <tags>
        <tag>September</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA中Object类中有几个方法</title>
    <url>/2016/05/31/JAVA%E4%B8%ADObject%E7%B1%BB%E4%B8%AD%E6%9C%89%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>常常在开发的过程中，都会对Java.lang.Object类的一些重要方法进行重写，这些方法包含：hashCode(),toString(),equals(),finalize(),clone(),wait(),notify()/notifyAll() 这八个方法。</p>
</blockquote>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p>equals默认实现是用==，比较地址！</p>
<ul>
<li>什么时候用equals? </li>
<li>什么时候需要重写?</li>
</ul>
<p>Java语言规范要求equals方法具有下面的特点：<br>自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。<br>对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。<br>传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。<br>一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals<br>非空性：任何非空的引用值X，x.equals(null)的返回值一定为false<br>从这里看出，上面的例子是Java规范的equals方法的标准实现，推荐用上面例子的写法实现类的equals方法。</p>
<ul>
<li>什么情况下会破坏对称性?<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> boolean equals(Object obj) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        Student other = (Student) obj;  </span><br><span class="line">        <span class="keyword">if</span> (age != other.age)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (other.name != <span class="literal">null</span>)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>重写equals装到容器中是得重写hashcode()</p>
<h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>几个关键点：<br>1、hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；<br>2、如果两个对象相同，就是适用于equals(Java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；<br>3、如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；<br>4、两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”。</p>
<p>hashCode()的返回值和equals()的关系如下：</p>
<p>如果x.equals(y)返回“true”，那么x和y的hashCode()必须相等。<br>如果x.equals(y)返回“false”，那么x和y的hashCode()有可能相等，也有可能不等。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="http://lavasoft.blog.51cto.com/62575/15456/">深入研究java.lang.Object类</a></li>
<li><a href="Java 重写Object类的常见方法">Java 重写Object类的常见方法</a></li>
<li><a href="http://blog.csdn.net/lonely_fireworks/article/details/7974307">java-覆盖equals时规则不容忽视</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA位运算以及在大数据上的应用</title>
    <url>/2016/09/23/JAVA%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8A%E5%9C%A8%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">* &amp; : 与运算</span><br><span class="line">* | : 或运算</span><br><span class="line">* ^ : 异或运算</span><br><span class="line">* ~ : 非运算</span><br><span class="line">* &lt;&lt; : 左移操作，右侧补0</span><br><span class="line">* &gt;&gt; : 右移操作，左侧补1</span><br><span class="line">* &gt;&gt;&gt; : 右移操作，左侧补0</span><br></pre></td></tr></table></figure>
<h3 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h3><ol>
<li>判别奇数偶数<br>(num &amp; 1) != 0 为奇数  (常规情况下, 取余操作没有逻辑操作快)</li>
<li>判别某一位为1<br>num = num &gt;&gt; indexBit; //右移indexBit位<br>(num &amp; 1) == 1         //判断当前位是不是1</li>
<li>二进制数1的个数<br>(n &amp; (n -1))           //不断清除最右边的 1</li>
<li>异或 数学逻辑<br>b = a ^ b ^ a<br>a ^ a = 0<br>a ^ 0 = a<br>eg:加密运算，将text和psd异或加密。</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<ol>
<li>数组中有两个元素出现了奇数次，其他元素出现了偶数次。找出这两个元素。</li>
</ol>
</blockquote>
<p>解析：a^b^c^d^…^z,出现偶数次可以抵消，奇数次则最终留下来运算。<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package com.leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Paul on 2016/9/23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">TwoEven</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line">        <span class="built_in">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        fun(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> fun(<span class="built_in">int</span>[] data)&#123;</span><br><span class="line">        <span class="built_in">int</span> e0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; data.length;i ++)&#123;</span><br><span class="line">            e0 = e0 ^ data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在indexBit这个位置上面，一定有一个是1，另外一个为0</span></span><br><span class="line">        <span class="built_in">int</span> indexBit = findFirstBit(e0);</span><br><span class="line">        <span class="built_in">int</span> num1 = <span class="number">0</span>, num2 =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; data.length;i ++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isbit1(data[i] ,indexBit))num1 = num1 ^ data[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                num2 = num2 ^ data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(num1 + <span class="string">&quot; | &quot;</span> + num2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static  <span class="built_in">int</span> findFirstBit(<span class="built_in">int</span> num)&#123;</span><br><span class="line">        <span class="comment">// 64位机器</span></span><br><span class="line">        <span class="built_in">int</span> indexBit = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// num &amp; 1 == 0  如果这样写，会报错。原来位运算 优先级 比 == 低</span></span><br><span class="line">        <span class="keyword">while</span>((num &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (indexBit &lt; <span class="number">32</span>))&#123;</span><br><span class="line">            num = num &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            indexBit ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> indexBit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应bit位是0还是1</span></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">bool</span>ean isbit1(<span class="built_in">int</span> num,<span class="built_in">int</span> indexBit)&#123;</span><br><span class="line">        num = num &gt;&gt; indexBit;</span><br><span class="line">        <span class="keyword">return</span> (num &amp; <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li>对于两个32位整数a和b，请设计一个算法返回a和b中较大的。但是不能用任何比较判断。若两数相同，返回任意一个。<br>给定两个整数a和b，请返回较大的数。</li>
</ol>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Compare</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> flip(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> n ^ <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> sign(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> flip((n &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getMax(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="built_in">int</span> c = a - b;</span><br><span class="line">        <span class="built_in">int</span> sa = sign(a);</span><br><span class="line">        <span class="built_in">int</span> sb = sign(b);</span><br><span class="line">        <span class="built_in">int</span> sc = sign(c);</span><br><span class="line">        <span class="built_in">int</span> difSab = sa ^ sb;</span><br><span class="line">        <span class="built_in">int</span> sameSab = flip(difSab);</span><br><span class="line">        <span class="built_in">int</span> returnA = difSab * sa + sameSab * sc;</span><br><span class="line">        <span class="built_in">int</span> returnB = flip(returnA);</span><br><span class="line">        <span class="keyword">return</span> a * returnA + b * returnB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="大数据之位存储"><a href="#大数据之位存储" class="headerlink" title="大数据之位存储"></a>大数据之位存储</h3><h4 id="BitSet"><a href="#BitSet" class="headerlink" title="BitSet"></a>BitSet</h4><p>1.set(int bitIndex)<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the bit at the specified index to &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  bitIndex a bit index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IndexOutOfBoundsException if the specified index is negative</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span>  JDK1.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">       expandTo(wordIndex);</span><br><span class="line"></span><br><span class="line">       words[wordIndex] |= (<span class="number">1</span>L &lt;&lt; bitIndex); <span class="comment">// Restores invariants</span></span><br><span class="line"></span><br><span class="line">       checkInvariants();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>2.get(int bitIndex) 取值<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">        checkInvariants();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">        <span class="keyword">return</span> (wordIndex &lt; wordsInUse)</span><br><span class="line">            &amp;&amp; ((words[wordIndex] &amp; (<span class="number">1L</span> &lt;&lt; bitIndex)) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>3.flip(int bitIndex) 置反<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the bit at the specified index to the complement of its</span></span><br><span class="line"><span class="comment">     * current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param  bitIndex the index of the bit to flip</span></span><br><span class="line"><span class="comment">     * @throws IndexOutOfBoundsException if the specified index is negative</span></span><br><span class="line"><span class="comment">     * @since  1.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public void flip(<span class="built_in">int</span> bitIndex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">            throw <span class="keyword">new</span> <span class="constructor">IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + <span class="params">bitIndex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> wordIndex = word<span class="constructor">Index(<span class="params">bitIndex</span>)</span>;</span><br><span class="line">        expand<span class="constructor">To(<span class="params">wordIndex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        words<span class="literal">[<span class="identifier">wordIndex</span>]</span> ^= (<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">        recalculate<span class="constructor">WordsInUse()</span>;</span><br><span class="line">        check<span class="constructor">Invariants()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>4.clear(int bitIndex)清除<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public void clear(<span class="built_in">int</span> bitIndex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">            throw <span class="keyword">new</span> <span class="constructor">IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + <span class="params">bitIndex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> wordIndex = word<span class="constructor">Index(<span class="params">bitIndex</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (wordIndex &gt;= wordsInUse)</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line">        words<span class="literal">[<span class="identifier">wordIndex</span>]</span> &amp;= ~(<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">        recalculate<span class="constructor">WordsInUse()</span>;</span><br><span class="line">        check<span class="constructor">Invariants()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Bloom-filter"><a href="#Bloom-filter" class="headerlink" title="Bloom filter"></a>Bloom filter</h4><p>原理 : hash + BitSet<br>(1) 一般情况：通过hash函数映射到BitSet上<br>y = f(x) % BitSet.size();<br>y的位置在BitSet上为1<br>(2) 布隆过滤器 : n个独立的hash函数 + m位的BitSet;<br>hash函数之后投射到m位的BitSet上，需要index = f(x) % m;<br>(3) 如果当前的x输入，经过映射会出现y1,y2,…,yn.如果y1,y2,….,yn位置上全是1.<br>则返回true.否则，返回false,即从未出现过。</p>
<p>常用场景：<br>1.网页黑名单系统<br>2.垃圾邮件过滤系统<br>3.爬虫的网址判断</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>IJCAI论文爬虫</title>
    <url>/2016/07/12/IJCAI%E8%AE%BA%E6%96%87%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>最简易的爬虫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># requests.get([link])</span></span><br><span class="line"><span class="comment"># status_code:200 成功</span></span><br><span class="line"></span><br><span class="line">r = requests.get(root_link)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">  soup = BeautifulSoup(r.text)</span><br></pre></td></tr></table></figure>
<h3 id="保存为pdf文档"><a href="#保存为pdf文档" class="headerlink" title="保存为pdf文档"></a>保存为pdf文档</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def download_file(url, index):</span><br><span class="line">  # 工作目录相对地址</span><br><span class="line">  local_filename = <span class="string">&#x27;./ijcai-papers/&#x27;</span> + url.split(<span class="string">&#x27;/&#x27;</span>)[-1].split(<span class="string">&#x27;.&#x27;</span>)[0] + index + <span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">  #<span class="built_in"> NOTE </span>the <span class="attribute">stream</span>=<span class="literal">True</span> parameter</span><br><span class="line">  r = requests.<span class="builtin-name">get</span>(url, stream = <span class="literal">True</span>)</span><br><span class="line">  with open(local_filename, <span class="string">&#x27;wb&#x27;</span>) as f:</span><br><span class="line">      <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size = 1024):</span><br><span class="line">          <span class="keyword">if</span> chunk: #<span class="built_in"> filter </span>out keep-alive new chunks</span><br><span class="line">              #f.write(r.content)</span><br><span class="line">              f.write(chunk)</span><br><span class="line">              f.flush()</span><br><span class="line">  return local_filename</span><br></pre></td></tr></table></figure>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Paul&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># email : chxu@m.scnu.edu.cn</span></span><br><span class="line"><span class="comment"># wechat : WX24315548</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_excel</span>(<span class="params">names</span>):</span></span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>)</span><br><span class="line">    sheet1 = book.add_sheet(<span class="string">&#x27;目录&#x27;</span>,cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="keyword">print</span> name</span><br><span class="line">        sheet1.write(index,<span class="number">0</span>,name.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    book.save(<span class="string">&#x27;index.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Paper_Names</span>(<span class="params">soup</span>):</span></span><br><span class="line">  name = []</span><br><span class="line">  start = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> pDiv <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;p&#x27;</span>):</span><br><span class="line">      <span class="keyword">if</span> start &lt; <span class="number">7</span>:</span><br><span class="line">          start += <span class="number">1</span></span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment"># if (start - 1) % 3 == 0:</span></span><br><span class="line">          content = pDiv.getText().split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">          <span class="comment"># print content</span></span><br><span class="line">          name.append(content)</span><br><span class="line">          start += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_file</span>(<span class="params">url, index</span>):</span></span><br><span class="line">  local_filename = <span class="string">&#x27;./ijcai-papers2/&#x27;</span> + url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + index + <span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">  <span class="comment"># NOTE the stream=True parameter</span></span><br><span class="line">  r = requests.get(url, stream = <span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">with</span> open(local_filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size = <span class="number">1024</span>):</span><br><span class="line">          <span class="keyword">if</span> chunk: <span class="comment"># filter out keep-alive new chunks</span></span><br><span class="line">      <span class="comment">#         f.write(r.content)</span></span><br><span class="line">              f.write(chunk)</span><br><span class="line">              f.flush()</span><br><span class="line">  <span class="keyword">return</span> local_filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://ijcai.org/Proceedings/16/Papers/001.pdf</span></span><br><span class="line">root_link = <span class="string">&quot;http://ijcai.org/Proceedings/2016&quot;</span></span><br><span class="line">r = requests.get(root_link)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">  soup = BeautifulSoup(r.text)</span><br><span class="line">  <span class="comment"># print soup.prettify()</span></span><br><span class="line"></span><br><span class="line">  name = get_Paper_Names(soup)</span><br><span class="line">  <span class="comment"># 生成目录</span></span><br><span class="line">  save_excel(name)</span><br><span class="line">  index = <span class="number">1</span></span><br><span class="line">  <span class="comment"># index = 22</span></span><br><span class="line">  need_link = <span class="string">&quot;http://ijcai.org/&quot;</span></span><br><span class="line">  exp = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">      new_link = need_link + link.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> new_link.endswith(<span class="string">&quot;.pdf&quot;</span>):</span><br><span class="line">          <span class="keyword">if</span> exp &lt; index:</span><br><span class="line">              <span class="keyword">print</span> link</span><br><span class="line">              exp += <span class="number">1</span></span><br><span class="line">              <span class="keyword">continue</span></span><br><span class="line">          <span class="keyword">print</span> new_link</span><br><span class="line">          title =  name[index - <span class="number">1</span>].encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">          fixTitle = title.replace(<span class="string">&quot;”&quot;</span>,<span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;“&quot;</span>,<span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;∃-&quot;</span>,<span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;ℓ1&quot;</span>,<span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;’&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&quot;—&quot;</span>,<span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;+(∇, ⊓)-&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line">          <span class="keyword">print</span> fixTitle</span><br><span class="line">          file_path = download_file(new_link,fixTitle)</span><br><span class="line">          <span class="keyword">print</span> <span class="string">&quot;downloading:&quot;</span> + new_link + <span class="string">&quot; -&gt; &quot;</span> + file_path</span><br><span class="line">          index += <span class="number">1</span></span><br><span class="line">          exp = index</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;all download finished&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;errors occur.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection和Collections</title>
    <url>/2015/11/26/Collection%E5%92%8CCollections/</url>
    <content><![CDATA[<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><pre><code class="lang-bash">    Collection   
    ├List   
    │├LinkedList   
    │├ArrayList   
    │└Vector   
    │　└Stack   
    └Set
</code></pre>
<p>Collection是集合类的上级接口，继承与他的接口主要有Set 和 List.</p>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections是针对集合类的一个帮助类，它提供一系列静态方法实现对各种集合的搜索、排序[底层是二分法]、线程安全化等操作。</p>
<ul>
<li>此类不能实例化，就像一个工具类，服务于Java的Collection框架</li>
</ul>
<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><pre><code class="lang-bash">    //注意List是实现Collection接口的
    List list = new ArrayList();
    double array[] = &#123;112, 111, 23, 456, 231&#125;;
    for (int i = 0; i &lt; array.length; i++) &#123;
        list.add(new Double(array[i]));
    &#125;
    Collections.sort(list);//
    for (int i = 0; i &lt; array.length; i++) &#123;
        System.out.println(list.get(i));
    &#125;
    // 结果：23.0 111.0 112.0 231.0 456.0
</code></pre>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://trinea.iteye.com/blog/1248517">对象数组或list排序及Collections排序原理</a><br><a href="http://www.blogjava.net/hgc-ghc/archive/2013/03/28/397084.html">Java中的CompareTo</a><br><a href="http://825635381.iteye.com/blog/2017650">Java基础中的泛型</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2015/11/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h4><p>缺点：继承只能继承一次。扩展性不强<br>重写run方法，来自定义线程执行任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;MyThread.run()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		MyThread thread1 = new MyThread();</span><br><span class="line">		MyThread thread2 = new MyThread();</span><br><span class="line">		thread1.start();</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><p>优点：可扩展性强<br>方法：通过实现接口，然后Thread构造方法传参新建thread2类，start()启动。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class MyThread2 implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;MyThread2.run()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">		MyThread2 thread = new MyThread2();</span><br><span class="line">		Thread thread2 = new Thread(thread);</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Thread类本身实现了Runable接口，而且除了默认构造，还有一个带参构造，传入target<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//Thread源代码</span><br><span class="line">public <span class="function"><span class="title">Thread</span></span>() &#123;</span><br><span class="line">       init(null, null, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), 0);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">public Thread(Runnable target) &#123;</span><br><span class="line">       init(null, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), 0);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">       <span class="keyword">if</span> (target != null) &#123;</span><br><span class="line">           target.run();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;   </span><br></pre></td></tr></table></figure></p>
<h4 id="ExecutorService、Callable、Future带返回结果的线程实现"><a href="#ExecutorService、Callable、Future带返回结果的线程实现" class="headerlink" title="ExecutorService、Callable、Future带返回结果的线程实现"></a>ExecutorService、Callable、Future带返回结果的线程实现</h4><p>Callable：执行任务并返回结果。<br>Future<V>：Future接口是Java线程Future模式的实现，可以来进行异步计算。</p>
<blockquote>
<p>Future模式：我有一个任务，提交给了Future，Future替我完成这个任务。期间我自己可以去做任何想做的事情。一段时间之后，我就便可以从Future那儿取出结果。就相当于下了一张订货单，一段时间后可以拿着提订单来提货，这期间可以干别的任何事情。其中Future 接口就是订货单，真正处理订单的是Executor类，它根据Future接口的要求来生产产品。</p>
</blockquote>
<p>ExecutorService：继承自Executor，线程池操作类，创建，执行，关闭</p>
<h5 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h5><ul>
<li>Future<Object> f = pool.submit(c);</li>
<li>Void f = pool.execute(RunnableImplements);</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//ExecutorService部分源码 </span><br><span class="line"></span><br><span class="line"> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span><br><span class="line"></span><br><span class="line"> &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</span><br><span class="line"></span><br><span class="line"> Future&lt;?&gt; submit(Runnable task);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">另外 </span><br><span class="line">//Executor源码</span><br><span class="line">public interface Executor &#123;</span><br><span class="line">    void execute(Runnable <span class="built_in">command</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 有返回值的线程</span><br><span class="line"> */</span><br><span class="line">	public class MyThread3 &#123;</span><br><span class="line">		public static void main(String[] args) throws ExecutionException,</span><br><span class="line">				InterruptedException &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;----程序开始运行----&quot;</span>);</span><br><span class="line">			Date date1 = new Date();</span><br><span class="line"></span><br><span class="line">			int taskSize = 5;</span><br><span class="line">			// 创建一个线程池</span><br><span class="line">			ExecutorService pool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">			// 创建多个有返回值的任务</span><br><span class="line">			List&lt;Future&lt;Object&gt;&gt; list = new ArrayList&lt;Future&lt;Object&gt;&gt;();</span><br><span class="line">			<span class="keyword">for</span> (int i = 0; i &lt; taskSize; i++) &#123;</span><br><span class="line">				Callable&lt;Object&gt; c = new MyCallable(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">				// 执行任务并获取Future对象</span><br><span class="line">				Future&lt;Object&gt; f = pool.submit(c);</span><br><span class="line">				// System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + f.get().toString());</span><br><span class="line">				list.add(f);</span><br><span class="line">			&#125;</span><br><span class="line">			// 关闭线程池</span><br><span class="line">			pool.shutdown();</span><br><span class="line"></span><br><span class="line">			// 获取所有并发任务的运行结果</span><br><span class="line">			<span class="keyword">for</span> (Future&lt;Object&gt; f : list) &#123;</span><br><span class="line">				// 从Future对象上获取任务的返回值，并输出到控制台</span><br><span class="line">				System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + f.get().toString());</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Date date2 = new Date();</span><br><span class="line">			System.out.println(<span class="string">&quot;----程序结束运行----，程序运行时间【&quot;</span></span><br><span class="line">					+ (date2.getTime() - date1.getTime()) + <span class="string">&quot;毫秒】&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	class MyCallable implements Callable&lt;Object&gt; &#123;</span><br><span class="line">		private String taskNum;</span><br><span class="line"></span><br><span class="line">		MyCallable(String taskNum) &#123;</span><br><span class="line">			this.taskNum = taskNum;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		public Object call() throws Exception &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务启动&quot;</span>);</span><br><span class="line">			Date dateTmp1 = new Date();</span><br><span class="line">			Thread.sleep(1000);</span><br><span class="line">			Date dateTmp2 = new Date();</span><br><span class="line">			long time = dateTmp2.getTime() - dateTmp1.getTime();</span><br><span class="line">			System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务终止&quot;</span>);</span><br><span class="line">			<span class="built_in">return</span> taskNum + <span class="string">&quot;任务返回运行结果,当前任务时间【&quot;</span> + time + <span class="string">&quot;毫秒】&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>如有不懂，可以多翻阅源代码。</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="http://blog.csdn.net/aboy123/article/details/38307539">JAVA多线程实现的三种方式</a><br><a href="java Future 接口介绍">java Future 接口介绍</a><br><a href="http://blog.sina.com.cn/s/blog_64d5ddbe0100ydyv.html">线程池中execute和submit的区别</a><br><a href="http://www.cnphp6.com/archives/61093">EXECUTORSERVICE线程池讲解</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CVTE面试回忆</title>
    <url>/2016/03/17/CVTE%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86/</url>
    <content><![CDATA[<h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><ol>
<li><a href="http://wenku.baidu.com/link?url=u5nwwseVQMZZgdG0LYac0ve8D5XSXvAktz5Y9SG7XDExPb6xIBHBNn3GzcaDLRiD6l4GZbLvCpwSQloFQRWuah3wu54zAd3hKbUNbwJrCe7">笔试题文档</a></li>
<li>笔试程序题：两个班成绩从高到低存放list1、list2怎样才能得到全年级的成绩？（假设全年级只有两个班）</li>
</ol>
<h3 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h3><ol>
<li>hibernate优化</li>
<li>HashMap的结构、能不能存空值，HashTable能不能存空值 ArrayList的初始容量</li>
<li>LinkedList和ArrayList的区别</li>
<li>多线程的实现方式、加锁用过吗、线程池有没有接触过</li>
<li>怎么样自定义比较两个对象，提示Comparable和Comparator区别。</li>
<li>青蛙一次跳一步一次跳两步解决方法？（写出了递归方法，主考官还问到，这种方法的弊端；然后又写了个迭代方法）</li>
<li>sql，为什么mysql是小型数据库（后来想想答错了，应该是mysql并发量小，数据量不大）</li>
<li>写出mysql，学生表id name, 课程表 id course , 成绩表 stuid couid score.查询成绩大于两百分的学生名和分数</li>
<li>和导师的关系怎么样？导师如何评价你</li>
</ol>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式</title>
    <url>/2016/04/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>在一个虚拟机内只存在一个实例，hashcode一致；<br>需要考虑两点</p>
<ol>
<li>线程安全</li>
<li>延迟加载<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Example1:</span><br><span class="line">/**</span><br><span class="line"> * Created by Paul on 2016/3/23.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. 静态私有实例</span><br><span class="line"> * 2. 私有构造</span><br><span class="line"> * 3. 公有静态方法</span><br><span class="line"> */</span><br><span class="line">public class SingletonDemo &#123;</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> SingletonDemo<span class="built_in"> instance </span>= null;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span> SingletonDemo() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletonDemo getInstance() &#123;</span><br><span class="line">       <span class="built_in"> if </span>(instance == null) &#123;</span><br><span class="line">            synchronized (SingletonDemo.class) &#123;</span><br><span class="line">               <span class="built_in"> if </span>(instance == null) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo2</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleFactory</span>&#123;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo2 instance = <span class="keyword">new</span> SingletonDemo2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleFactory.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//串行化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>State模式在实际使用中比较多，适合“状态”的切换。因为我们经常会使用If else if else 进行状态切换，如果针对状态的这样判断切换反复出现，我们就要联想到是否可以采取State模式了。</p>
<ul>
<li>show me your code!<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">State</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> handle(String sampleParameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Paul on 2016/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//具体状态A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> handle(<span class="keyword">String</span> sampleParameter) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;this is concreteStateA...&quot;</span> + sampleParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体状态B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String sampleParameter)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is concreteStateB...&quot;</span> + sampleParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">//状态管理者</span><br><span class="line">public class Context &#123;</span><br><span class="line">    private State <span class="keyword">state</span>;</span><br><span class="line">    public void <span class="built_in">set</span>State(State <span class="keyword">state</span>)&#123;</span><br><span class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void request(String sampleParameter)&#123;</span><br><span class="line">        <span class="keyword">state</span>.handle(sampleParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">//测试类</span><br><span class="line">public class TestState &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        State <span class="keyword">state</span>A = new ConcreteStateA();</span><br><span class="line">        State <span class="keyword">state</span>B = new ConcreteStateB();</span><br><span class="line">        Context context = new Context();</span><br><span class="line">        context.<span class="built_in">set</span>State(<span class="keyword">state</span>A);</span><br><span class="line">        context.request(<span class="string">&quot;happy&quot;</span>);</span><br><span class="line">        context.<span class="built_in">set</span>State(<span class="keyword">state</span>B);</span><br><span class="line">        context.request(<span class="string">&quot;sorrow&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>来自网易的笔试，在订阅新闻中，运用了什么设计模式？<br>Oberver-Subject 设计模式</p>
<ul>
<li><p><a href="http://blog.csdn.net/swengineer/article/details/6268244">应用场景</a></p>
</li>
<li><p>show me your code!</p>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象观察者角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> update(String str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span>(<span class="params">Observer observer</span>)</span>;</span><br><span class="line">    <span class="comment">//取消订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer observer</span>)</span>;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span>(<span class="params">String str</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ConcreteObserver</span> <span class="symbol">implements</span> <span class="symbol">Observer</span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> update(String str) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现通知</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observers)</span><br><span class="line">            observer.update(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试观察者模式</span></span><br><span class="line">public <span class="keyword">class</span> TestObserver&#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Observer observer1 = <span class="keyword">new</span> <span class="constructor">ConcreteObserver()</span>;</span><br><span class="line">        Observer observer2 = <span class="keyword">new</span> <span class="constructor">ConcreteObserver()</span>;</span><br><span class="line">        Observer observer3 = <span class="keyword">new</span> <span class="constructor">ConcreteObserver()</span>;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> <span class="constructor">ConcreteSubject()</span>;</span><br><span class="line"></span><br><span class="line">        subject.add<span class="constructor">Observer(<span class="params">observer1</span>)</span>;</span><br><span class="line">        subject.add<span class="constructor">Observer(<span class="params">observer2</span>)</span>;</span><br><span class="line">        subject.add<span class="constructor">Observer(<span class="params">observer3</span>)</span>;</span><br><span class="line">        subject.notify<span class="constructor">Observers(<span class="string">&quot;糗事百科&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo搭建个人博客</title>
    <url>/2015/09/01/FirstBlog/</url>
    <content><![CDATA[<blockquote>
<p>怎么写文章啊，不会啊,我累个去</p>
</blockquote>
<h3 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h3><ul>
<li><p>分段： 两个回车</p>
</li>
<li><p>换行 两个空格 + 回车</p>
</li>
<li><p>标题 # ~ ###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</p>
</li>
<li><p>引用 &gt;</p>
</li>
<li><p>列表 * ， + ， - ， 1. ，选其中之一，注意后面有个空格</p>
</li>
<li><p>代码区块 四个空格 开头</p>
</li>
<li><p>链接</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法 [<span class="string">文字</span>](<span class="link">链接地址</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>图片  ，图片地址可以是本地路劲，也可以是网络地址</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法 ![<span class="string">图片说明</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>强调 <strong>文字</strong> ， <strong>文字</strong> ， <em>文字</em> ， <em>文字</em></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">语法  **文字** ， <span class="symbol">__</span>文字<span class="symbol">__</span> ， <span class="symbol">_</span>文字<span class="symbol">_</span> ， *文字*</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码  三个点 : `</p>
</li>
</ul>
]]></content>
      <categories>
        <category>FirstTry</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode算法题</title>
    <url>/2016/04/14/LeetCode%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id="Day9-Power-of-Four"><a href="#Day9-Power-of-Four" class="headerlink" title="Day9.Power of Four"></a>Day9.<a href="https://leetcode.com/problems/power-of-four/">Power of Four</a></h3><blockquote>
<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Given num = <span class="number">16</span>, <span class="keyword">return</span> <span class="literal">true</span>. Given num = <span class="number">5</span>, <span class="keyword">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>
<p>Solution:O(n)<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> isPowerOfFour(<span class="built_in">int</span> num) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!(num &amp; (num<span class="number">-1</span>)))&#123;</span><br><span class="line">        <span class="built_in">double</span> res = log(num) * <span class="number">1.0</span>/log(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fabs(res - round(res)) &lt; <span class="number">0.0000001</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day8-Integer-Break"><a href="#Day8-Integer-Break" class="headerlink" title="Day8.Integer Break"></a>Day8.<a href="https://leetcode.com/problems/integer-break/">Integer Break</a></h3><blockquote>
<p>Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">For example, given n = <span class="number">2</span>, <span class="keyword">return</span> <span class="number">1</span> (<span class="number">2</span> = <span class="number">1</span> + <span class="number">1</span>); given n = <span class="number">10</span>, <span class="keyword">return</span> <span class="number">36</span> (<span class="number">10</span> = <span class="number">3</span> + <span class="number">3</span> + <span class="number">4</span>).</span><br></pre></td></tr></table></figure>
<p>Solution:O(n)<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">int</span>egerBreak(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">4</span>)<span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        res *= <span class="number">3</span>;</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)<span class="keyword">return</span> res / <span class="number">3</span> * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)<span class="keyword">return</span> res * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="Day7-Reverse-String"><a href="#Day7-Reverse-String" class="headerlink" title="Day7.Reverse String"></a>Day7.<a href="https://leetcode.com/problems/reverse-string/">Reverse String</a></h3><blockquote>
<p>Write a function that takes a string as input and returns the string reversed.</p>
</blockquote>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Example</span>:</span><br><span class="line">Given s = <span class="string">&quot;hello&quot;</span>, <span class="keyword">return</span> <span class="string">&quot;olleh&quot;</span>.</span><br></pre></td></tr></table></figure>
<p>My solution:O(n)<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* reverseString(<span class="type">char</span>* s) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="keyword">NULL</span>)<span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="type">int</span> size = strlen(s);</span><br><span class="line">    <span class="type">char</span>* <span class="keyword">start</span>,*<span class="keyword">end</span>;</span><br><span class="line">    start = s;</span><br><span class="line">    end = s + size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">start</span> &lt; <span class="keyword">end</span>)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="keyword">temp</span> = *<span class="keyword">start</span>;</span><br><span class="line">        *start = *<span class="keyword">end</span>;</span><br><span class="line">        *end = <span class="keyword">temp</span>;</span><br><span class="line">        <span class="keyword">start</span> ++;</span><br><span class="line">        <span class="keyword">end</span> <span class="comment">--;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="Day6-Reverse-Vowels-of-a-String"><a href="#Day6-Reverse-Vowels-of-a-String" class="headerlink" title="Day6.Reverse Vowels of a String"></a>Day6.<a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">Reverse Vowels of a String</a></h3><blockquote>
<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
</blockquote>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Example</span> <span class="number">1</span>:</span><br><span class="line">Given s = <span class="string">&quot;hello&quot;</span>, <span class="keyword">return</span> <span class="string">&quot;holle&quot;</span>.</span><br><span class="line"><span class="keyword">Example</span> <span class="number">2</span>:</span><br><span class="line">Given s = <span class="string">&quot;leetcode&quot;</span>, <span class="keyword">return</span> <span class="string">&quot;leotcede&quot;</span>.</span><br></pre></td></tr></table></figure>
<p>My solution:O(n)<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isVowels</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="comment">//大写转小写</span></span><br><span class="line">    <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        c += <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;e&#x27;</span> || c == <span class="string">&#x27;i&#x27;</span> || c == <span class="string">&#x27;o&#x27;</span> || c == <span class="string">&#x27;u&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">reverseVowels</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">char</span> *pre,*<span class="built_in">end</span>;</span><br><span class="line">    pre = s;</span><br><span class="line">    <span class="built_in">end</span> = s + len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pre &lt; <span class="built_in">end</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(pre &lt; <span class="built_in">end</span> &amp;&amp; !isVowels(*pre))pre ++;</span><br><span class="line">        <span class="keyword">while</span>(pre &lt; <span class="built_in">end</span> &amp;&amp; !isVowels(*<span class="built_in">end</span>))<span class="built_in">end</span> --;</span><br><span class="line">        <span class="keyword">if</span>(isVowels(*pre) &amp;&amp; isVowels(*<span class="built_in">end</span>)) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = *pre;</span><br><span class="line">            *pre = *<span class="built_in">end</span>;</span><br><span class="line">            *<span class="built_in">end</span> = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        pre++;</span><br><span class="line">        <span class="built_in">end</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day5-Power-of-Three"><a href="#Day5-Power-of-Three" class="headerlink" title="Day5.Power of Three"></a>Day5.<a href="https://leetcode.com/problems/power-of-three/">Power of Three</a></h3><blockquote>
<p>Given an integer, write a function to determine if it is a power of three.<br>Follow up:<br>Could you do it without using any loop / recursion?</p>
</blockquote>
<p>Solution:O(1)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//误差限制,另外本来应该用round，但是发现ceil所有测试实例都通过了，也就是所有情况res &lt; ceil(res)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> <span class="built_in">exp</span> = <span class="number">10e-15</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(res - <span class="built_in">ceil</span>(res)) &lt; <span class="built_in">exp</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day4-Median-of-Two-Sorted-Arrays"><a href="#Day4-Median-of-Two-Sorted-Arrays" class="headerlink" title="Day4.Median of Two Sorted Arrays"></a>Day4.<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">Median of Two Sorted Arrays</a></h3><blockquote>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
</blockquote>
<p>My Solution1:O(N)<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> findMedianSortedArrays(<span class="built_in">int</span>* nums1, <span class="built_in">int</span> nums1Size, <span class="built_in">int</span>* nums2, <span class="built_in">int</span> nums2Size) &#123;</span><br><span class="line">    <span class="comment">//？这里有个想法，建两个个小根堆，大小为index - 1(n) ，index，直接夹出来那个一个或n个中间元素</span></span><br><span class="line">    <span class="built_in">int</span> size = nums1Size + nums2Size;</span><br><span class="line">    <span class="built_in">double</span> result;</span><br><span class="line">    <span class="comment">//全为空</span></span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不全为空</span></span><br><span class="line">    <span class="built_in">int</span> flag = size % <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">int</span> midIndex = (size - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个为空</span></span><br><span class="line">    <span class="keyword">if</span>(nums1Size == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)result = *(nums2 + midIndex);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            result = (*(nums2 + midIndex) + *(nums2 + midIndex +<span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nums2Size == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)result = *(nums1 + midIndex);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            result = (*(nums1 + midIndex) + *(nums1 + midIndex +<span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个均不为空</span></span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i + j &lt; midIndex)&#123;</span><br><span class="line">        <span class="comment">//防止数组越界</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; nums1Size &amp;&amp; *(nums1 + i) &lt;= *(nums2 + j))i ++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j &lt; nums1Size &amp;&amp; *(nums1 + i) &gt; *(nums2 + j))j ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">            result = (*(nums1 + i) + *(nums2 + j))/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> result = *(nums1 + i) &lt; *(nums2 + j)?*(nums1 + i):*(nums2 + j);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>My Solution2:O(n)</p>
<h3 id="Day3-Longest-Substring-Without-Repeating-Characters"><a href="#Day3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Day3.Longest Substring Without Repeating Characters"></a>Day3.<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters</a></h3><blockquote>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="string">&quot;abcabcbb&quot;</span>, <span class="keyword">the</span> answer is <span class="string">&quot;abc&quot;</span>, which <span class="keyword">the</span> <span class="built_in">length</span> is <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">Given <span class="string">&quot;bbbbb&quot;</span>, <span class="keyword">the</span> answer is <span class="string">&quot;b&quot;</span>, <span class="keyword">with</span> <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">Given <span class="string">&quot;pwwkew&quot;</span>, <span class="keyword">the</span> answer is <span class="string">&quot;wke&quot;</span>, <span class="keyword">with</span> <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> <span class="number">3.</span> Note that <span class="keyword">the</span> answer must be <span class="keyword">a</span> substring, <span class="string">&quot;pwke&quot;</span> is <span class="keyword">a</span> subsequence <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">a</span> substring.</span><br></pre></td></tr></table></figure>
<p>My Solution:O(N):<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/14.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最长不重复子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span>* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="keyword">int</span> length = lengthOfLongestSubstring(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n子串长度为 %d&quot;</span>, length);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录字符串位置</span></span><br><span class="line">    <span class="keyword">int</span> hashTable[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(hashTable, <span class="number">-1</span>, <span class="keyword">sizeof</span>(hashTable));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *slow, *fast;</span><br><span class="line">    fast = slow = s;</span><br><span class="line">    <span class="comment">//缓存一次历史数据</span></span><br><span class="line">    <span class="keyword">int</span> history_fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> history_slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*fast != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//大于或等于碰撞点进入数据更改，初始碰撞点为0</span></span><br><span class="line">        <span class="keyword">if</span> (hashTable[*fast] &gt;= history_fast &amp;&amp; hashTable[*fast] &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//未更新的fast位置</span></span><br><span class="line">            history_fast = hashTable[*fast];</span><br><span class="line">            <span class="comment">//未更新slow的位置</span></span><br><span class="line">            history_slow = hashTable[*slow];</span><br><span class="line">            slow = s + history_fast + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新碰撞位置</span></span><br><span class="line">        hashTable[*fast] = i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            length = hashTable[*fast] - history_slow;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            length = hashTable[*fast] - hashTable[*slow] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxLength &lt; length)maxLength = length;</span><br><span class="line">        <span class="comment">//O(n)的指针不回退</span></span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印出该字符串</span></span><br><span class="line">    <span class="keyword">int</span> x = maxLength;</span><br><span class="line">    <span class="keyword">while</span>(x -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*slow);</span><br><span class="line">        slow ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day2-add-two-numbers"><a href="#Day2-add-two-numbers" class="headerlink" title="Day2.add-two-numbers"></a>Day2.<a href="https://leetcode.com/problems/add-two-numbers/">add-two-numbers</a></h3><blockquote>
<p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>My Solution:<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct ListNode *next;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) &#123;</span><br><span class="line">    //分配头结点内存</span><br><span class="line">    struct ListNode* la;</span><br><span class="line">    struct ListNode* p = (struct ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">    la = p;</span><br><span class="line">    if(l1 == NULL)&#123;</span><br><span class="line">        return l2;</span><br><span class="line">    &#125;</span><br><span class="line">    if(l2 == NULL)&#123;</span><br><span class="line">        return l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int carrier = <span class="number">0</span>;</span><br><span class="line">    int sum;</span><br><span class="line">    while(l1-&gt;next != NULL &amp;&amp; l2-&gt;next != NULL)&#123;</span><br><span class="line"></span><br><span class="line">        sum = l1-&gt;val + l2-&gt;val + carrier;</span><br><span class="line"></span><br><span class="line">        carrier = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        struct ListNode* <span class="keyword">node</span> <span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;next</span> = NULL;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        p</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">        l1</span> = l1-&gt;next;</span><br><span class="line">        l2 = l2-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int flag = <span class="number">0</span>;</span><br><span class="line">    //必定有一个到达链表末端</span><br><span class="line">    //l2到达末端</span><br><span class="line">    sum = l1-&gt;val + l2-&gt;val + carrier;</span><br><span class="line">    while(l1-&gt;next != NULL)&#123;</span><br><span class="line">        if(flag == <span class="number">0</span>)flag = <span class="number">1</span>;</span><br><span class="line">        struct ListNode* <span class="keyword">node</span> <span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        carrier = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">        l1 = l1-&gt;next;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        p</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        sum</span> = l1-&gt;val + carrier;</span><br><span class="line">    &#125;</span><br><span class="line">    //l1 到达末端</span><br><span class="line">    while(l2-&gt;next != NULL)&#123;</span><br><span class="line">        if(flag == <span class="number">0</span>)flag = <span class="number">2</span>;</span><br><span class="line">        struct ListNode* <span class="keyword">node</span> <span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        carrier = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">        l2 = l2-&gt;next;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        p</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        sum</span> = l2-&gt;val + carrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct ListNode* <span class="keyword">node</span> <span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">    if(flag == <span class="number">0</span>)&#123;</span><br><span class="line">        sum = carrier + l1-&gt;val + l2-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag == <span class="number">1</span>)&#123;</span><br><span class="line">        sum = carrier + l1-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag == <span class="number">2</span>)&#123;</span><br><span class="line">        sum = carrier +l2-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    carrier = sum / <span class="number">10</span>;</span><br><span class="line">    sum = sum % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">node</span><span class="title">-&gt;val</span> = sum;</span><br><span class="line">    <span class="keyword">node</span><span class="title">-&gt;next</span> = NULL;</span><br><span class="line">    p-&gt;next = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    p</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">    if</span>(carrier != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">node</span> <span class="title">= (struct</span> ListNode *)malloc(sizeof(struct ListNode));</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;val</span> = carrier;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;next</span> = NULL;</span><br><span class="line">        p-&gt;next = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    &#125;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">    return</span> la-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Day1-two-sum"><a href="#Day1-two-sum" class="headerlink" title="Day1.two-sum"></a>Day1.<a href="https://leetcode.com/problems/two-sum/">two-sum</a></h3><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution.</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure>
<p>my solution:<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">int</span> result[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">int</span>* twoSum(<span class="built_in">int</span>* nums, <span class="built_in">int</span> numsSize, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span>* p = nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numsSize &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; numsSize;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>;j &lt; numsSize;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*(p + i) + *(p + j) == target)&#123;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == numsSize &amp;&amp; j == numsSize)&#123;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>如果数组有序,可以用二分法查找<br>Solution：<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>* twoSum(<span class="built_in">int</span>* nums, <span class="built_in">int</span> numsSize, <span class="built_in">int</span> target);</span><br><span class="line"><span class="built_in">int</span> bSearch(<span class="built_in">int</span>* nums,<span class="built_in">int</span> numsSize,<span class="built_in">int</span> target);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    <span class="built_in">int</span> nums[<span class="number">4</span>] = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span>* p = twoSum(nums,<span class="number">4</span>,<span class="number">13</span>);</span><br><span class="line">    <span class="keyword">if</span>(p != NULL)&#123;</span><br><span class="line">        printf(<span class="string">&quot;%d %d&quot;</span>,*p,*(p + <span class="number">1</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        printf(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> result[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">int</span>* twoSum(<span class="built_in">int</span>* nums, <span class="built_in">int</span> numsSize, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">int</span>* p = nums;</span><br><span class="line">    <span class="keyword">if</span>(numsSize &lt; <span class="number">2</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; numsSize;i ++)&#123;</span><br><span class="line">        <span class="built_in">int</span> bTarget = target - *(p + i);</span><br><span class="line">        <span class="built_in">int</span>* pS = p + i + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> bSize = numsSize - i - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> index;</span><br><span class="line">        <span class="keyword">if</span>(bSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = bSearch(pS, bSize, bTarget);</span><br><span class="line">            <span class="keyword">if</span>(index != <span class="number">-1</span> &amp;&amp; *(p + i) + *(p + index + i + <span class="number">1</span>) == target)&#123;</span><br><span class="line">                result[<span class="number">1</span>] = index + i + <span class="number">1</span>;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> bSearch(<span class="built_in">int</span>* nums,<span class="built_in">int</span> numsSize,<span class="built_in">int</span> target)&#123;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>,high = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span>(target &lt; *nums)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(target &gt; *(nums + numsSize - <span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (*(nums + mid) == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*(nums + mid) &gt; target)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Algrithm</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 下最佳 Terminal 实践</title>
    <url>/2020/03/19/Win10%E4%B8%8B%E6%9C%80%E4%BD%B3Terminal%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>一直苦于 Windows 下没有如 Mac 一般好用的 iterm2, 没有如 linux 一样好用的环境。经常折腾于双系统和 VM 之间。今天给大家推荐一款个人总结的 windows 下最完美的开发环境。子系统和 windows 公用目录且权限统一，操作及其方便。废话不多说先上图！<br><img src="/uploads/terminal.png" alt="Terminal"><br>让我们开始吧~<br><a id="more"></a> </p>
<h2 id="开启WSL"><a href="#开启WSL" class="headerlink" title="开启WSL"></a>开启WSL</h2><ol>
<li>设置 -&gt; 更新和安全 -&gt; 针对开发人员，设置为 “<strong>开发者模式</strong>“<br><img src="/uploads/kfzms.png" alt="开发者模式"></li>
<li>设置（控制面板）-&gt; 程序 -&gt; <strong>启用或关闭 Windows 功能</strong> -&gt; 在选项中勾上<strong>适用于 Linux 的 Windows 子系统</strong>（明明是适用于 Windows 的 linux 子系统 ^v^）<br><img src="/uploads/syywsl.png" alt="开启子系统"> </li>
<li>重启电脑，win10 完成更新。</li>
<li><code>win + q</code> 输入<strong>store</strong>，然后进入<strong>Microsoft Store</strong>，搜索ubuntu, 点击获取<br><img src="/uploads/ubuntu.png" alt="获取ubuntu"> </li>
<li><code>win + q</code> 输入 wsl ，回车，即可进入 wsl ubuntu 系统</li>
</ol>
<h2 id="wsl-terminal"><a href="#wsl-terminal" class="headerlink" title="wsl-terminal"></a>wsl-terminal</h2><ul>
<li>Github: <a href="https://github.com/goreliu/wsl-terminal">wsl-terminal</a></li>
<li>下载发布包: <a href="https://github.com/goreliu/wsl-terminal/releases">https://github.com/goreliu/wsl-terminal/releases</a>, 解压。</li>
<li>直接运行 open-wsl.exe</li>
<li><code>shift + 鼠标右键</code>搜索<strong>在此处打开Powershell</strong>，右键管理员身份打开，运行<code>./tools/1-add-open-wsl-terminal-here-menu.js</code></li>
<li>鼠标右键出现<code>Open wsl-terminal here</code>，配置完成。</li>
</ul>
<!-- more --> 
<p><strong>Tips</strong>: </p>
<ol>
<li>选中 open-wsl.exe 鼠标右键 -&gt; 发送到 -&gt; 桌面快捷方式(命名为 wsl-terminal )</li>
<li>要想每次打开 wsl-terminal 都是 home 目录 ~，需要选中刚创建的桌面快捷方式 -&gt; 属性 -&gt; 快捷方式(命名 wsl-terminal ) -&gt; 目标。<code>D:\wsl-terminal\open-wsl.exe -C ~</code>末尾仿造这句添加。</li>
</ol>
<h2 id="程序员专用字体FiraCode"><a href="#程序员专用字体FiraCode" class="headerlink" title="程序员专用字体FiraCode"></a>程序员专用字体FiraCode</h2><p><strong>字体展示</strong><br><img src="/uploads/FiraCode.jpg" alt="FiraCode"><br><strong>Terminal应用效果</strong><br><img src="/uploads/terminal.png" alt="Terminal"><br><strong>配置步骤</strong></p>
<ol>
<li>Github: <a href="https://github.com/tonsky/FiraCode">FiraCode</a></li>
<li>下载字体<a href="https://github.com/tonsky/FiraCode/releases/download/2/FiraCode_2.zip">FiraCode</a>，解压</li>
<li>进入 ttf 目录，全选，鼠标右键，安装</li>
<li>双击桌面 wsl-terminal 快捷方式，鼠标右键 -&gt; 选项 -&gt; 文本 -&gt; 字体 -&gt; 选择 Fira Code ，赶紧<strong>测试</strong>一下，简直<strong>爽到不能呼吸</strong>~</li>
</ol>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p><strong>安装步骤</strong></p>
<ol>
<li><p>wsl-terminal 窗口下输入<code>sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ <span class="comment"># sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; </span></span><br><span class="line">Cloning Oh My Zsh...</span><br><span class="line">Cloning into <span class="string">&#x27;/Users/xxxx/.oh-my-zsh&#x27;</span>...</span><br><span class="line">remote: Counting objects: 831, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (700/700), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 831 (delta 14), reused 775 (delta 10), pack-reused 0</span><br><span class="line">Receiving objects: 100% (831/831), 567.67 KiB | 75.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (14/14), <span class="keyword">done</span>.</span><br><span class="line">Looking <span class="keyword">for</span> an existing zsh config...</span><br><span class="line">Found ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh</span><br><span class="line">Using the Oh My Zsh template file and adding it to ~/.zshrc</span><br><span class="line">             __                                     __   </span><br><span class="line">      ____  / /_     ____ ___  __  __   ____  _____/ /_  </span><br><span class="line">     / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ </span><br><span class="line">    / /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / </span><br><span class="line">    \____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  </span><br><span class="line">                            /____/                       ....is now installed!</span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果没有出现上面炫酷的界面，可能是 git raw 页面访问失败，建议直接访问<a href="https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh。">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh。</a></p>
</li>
<li>如果可以访问上面链接，全文复制, 粘贴到install.sh文件里面</li>
<li>wsl-terminal 窗口下<code>vim ~/.zshrc</code> 找到<code>ZSH_THEME</code>，本人用的<code>ZSH_THEME=&quot;af-magic&quot;</code></li>
<li>wsl-terminal 窗口下<code>[sudo] chsh -s $(which zsh)</code></li>
<li>目前窗口中输入中文是不能显示的。如何配置支持中文？<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LC_ALL=en_US.UTF-8&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LANG=en_US.UTF-8&quot;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure></li>
<li>完成！！！</li>
</ol>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Java分页原理</title>
    <url>/2015/12/04/Java%E5%88%86%E9%A1%B5%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="为何要使用分页？"><a href="#为何要使用分页？" class="headerlink" title="为何要使用分页？"></a>为何要使用分页？</h3><ol>
<li>数据方面的原因</li>
<li>增强用户使用体验需要，根据需要获取</li>
<li>浏览器—&gt;网络—&gt;服务器 减小网络和服务器压力，节省数据IO和网络传输时间时间</li>
</ol>
<h3 id="不同的分页方式"><a href="#不同的分页方式" class="headerlink" title="不同的分页方式"></a>不同的分页方式</h3><h4 id="传统分页"><a href="#传统分页" class="headerlink" title="传统分页"></a>传统分页</h4><p>明确的获取数据信息，如有多少条数据，分多少页显示等。</p>
<h4 id="下拉式分页"><a href="#下拉式分页" class="headerlink" title="下拉式分页"></a>下拉式分页</h4><p>无法明确的获取数据数量相关的信息，但是在分页操作以后，仍然可以看到之前查询的数据。</p>
<h3 id="常见的分页实现方式"><a href="#常见的分页实现方式" class="headerlink" title="常见的分页实现方式"></a>常见的分页实现方式</h3><ol>
<li>使用List接口中sublist(int startIndex,int endIndex)方法实现分页。</li>
<li>直接使用数据库SQL语句实现分页</li>
<li>使用hibernate，mybatis等框架实现跨数据库的分页<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Mysql:Select * from t_student <span class="built_in">limit</span> 0,10</span><br><span class="line">Psql:Select * from t_student <span class="built_in">limit</span> 10 offset 0</span><br></pre></td></tr></table></figure>
<h3 id="传统sublist分页实现"><a href="#传统sublist分页实现" class="headerlink" title="传统sublist分页实现"></a>传统sublist分页实现</h3><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4>对任意可分数据类型T,<br>初始化参数<br>pageSize:前台传输过来<br>pageNum:前台传输过来<br>currentPage = pageNum &gt; totalPage ? totalPage : pageNum<br>dataList:后台传输过来<br>totalRecord = dataList.size()<br>totalPage = totalRecord % pageSize?totalRecord / pageSize : totalRecord / pageSize + 1</li>
</ol>
<h4 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h4><p>前台：<br>T：判定参数，如gender = “male”<br>pageSize:前台传输过来<br>pageNum:前台传输过来<br>提交</p>
<p>Servlet容器：<br>处理并调用持久层ServiceImpl方法取数据</p>
<p>后台：<br>生成sql语句，完成参数查询，返回Pager<T></p>
<p>Servlet容器：<br>Servlet包装数据到request里面</p>
<p>前台：<br>根据参数去显示当前页数据</p>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Pager&lt;T&gt; implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * </span><br><span class="line">	 */</span><br><span class="line">	private static final long serialVersionUID = -6150972860315433465L;</span><br><span class="line">	</span><br><span class="line">	private int pageSize;//每页显示多少条数据</span><br><span class="line">	</span><br><span class="line">	private int currentPage;//当前第几页数据</span><br><span class="line">	</span><br><span class="line">	private int totalRecord;//一共多少条记录</span><br><span class="line">	</span><br><span class="line">	private int totalPage;//一共多少页记录</span><br><span class="line">	</span><br><span class="line">	private List&lt;T&gt; dataList;//要显示的数据</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	public <span class="function"><span class="title">Pager</span></span>() &#123;</span><br><span class="line">		super();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public Pager(int pageNum,int pageSize, List&lt;T&gt; <span class="built_in">source</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">source</span> == null)&#123;</span><br><span class="line">			<span class="built_in">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">		this.totalRecord = source.size();</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">		</span><br><span class="line">		//总页数</span><br><span class="line">		this.totalPage = this.totalRecord/this.pageSize;</span><br><span class="line">		<span class="keyword">if</span>(this.totalRecord % this.pageSize != 0)&#123;</span><br><span class="line">			this.totalPage += 1;</span><br><span class="line">		&#125;</span><br><span class="line">		//当前页数</span><br><span class="line">		<span class="keyword">if</span>(this.totalPage &lt; pageNum)&#123;</span><br><span class="line">			this.currentPage = this.totalPage;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			this.currentPage = pageNum;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		int fromIndex = this.pageSize * (this.currentPage - 1);</span><br><span class="line">		int toIndex;</span><br><span class="line">		<span class="keyword">if</span>(this.pageSize * this.currentPage &gt; this.totalRecord)&#123;</span><br><span class="line">			toIndex = this.totalRecord;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			toIndex = this.pageSize * this.currentPage;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		this.dataList = source.subList(fromIndex, toIndex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public Pager(int pageSize, int currentPage, int totalRecord, int totalPage,</span><br><span class="line">			List&lt;T&gt; dataList) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">		this.currentPage = currentPage;</span><br><span class="line">		this.totalRecord = totalRecord;</span><br><span class="line">		this.totalPage = totalPage;</span><br><span class="line">		this.dataList = dataList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getPageSize</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> pageSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setPageSize(int pageSize) &#123;</span><br><span class="line">		this.pageSize = pageSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getCurrentPage</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> currentPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setCurrentPage(int currentPage) &#123;</span><br><span class="line">		this.currentPage = currentPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getTotalRecord</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> totalRecord;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setTotalRecord(int totalRecord) &#123;</span><br><span class="line">		this.totalRecord = totalRecord;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public int <span class="function"><span class="title">getTotalPage</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> totalPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setTotalPage(int totalPage) &#123;</span><br><span class="line">		this.totalPage = totalPage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public List&lt;T&gt; <span class="function"><span class="title">getDataList</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> dataList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setDataList(List&lt;T&gt; dataList) &#123;</span><br><span class="line">		this.dataList = dataList;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后台sql分页"><a href="#后台sql分页" class="headerlink" title="后台sql分页"></a>后台sql分页</h3><ol>
<li>取分页记录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from table <span class="built_in">where</span> 1 = 1[ and gender=male][ and username=<span class="string">&quot;a&quot;</span>] <span class="built_in">limit</span> (pageNum-1) * pageSize, pageSize; </span><br></pre></td></tr></table></figure></li>
<li>取总的记录数<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select count(*) as totalRecord from table <span class="built_in">where</span> 1 = 1[ and gender=male][ and username=<span class="string">&quot;a&quot;</span>]</span><br></pre></td></tr></table></figure>
注：[]内的都是可选条件，1,2步骤的可选条件是一致的。</li>
</ol>
<h3 id="完整的源代码"><a href="#完整的源代码" class="headerlink" title="完整的源代码"></a>完整的源代码</h3><p>maven项目<a href="https://github.com/rollingdeep/pager-webapp">pager-webapp</a></p>
<h4 id="曾遇到的问题"><a href="#曾遇到的问题" class="headerlink" title="曾遇到的问题"></a>曾遇到的问题</h4><ol>
<li>JQuery选取元素 $(“#id”).attr(“action”,”property”);</li>
<li>遇到了浏览器重复重定位，清除浏览器缓存，clean tomcat项目再试！</li>
<li>将长整形转为整形 int intNumber = ((Number)(LongNumber)).intValue();</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Thread的方法介绍和使用场景</title>
    <url>/2016/07/25/Thread%E7%9A%84%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">Thread</span> <span class="variable">implements</span> <span class="variable">Runnable</span>：</span><br><span class="line">    <span class="function"><span class="title">run</span>();</span></span><br><span class="line"><span class="function">    <span class="title">start</span>();</span></span><br><span class="line"><span class="function">    <span class="title">join</span>();</span></span><br><span class="line"><span class="function">    <span class="title"><span class="built_in">sleep</span></span>();</span></span><br><span class="line"><span class="function">    <span class="title">yield</span>();</span></span><br><span class="line"><span class="function">    <span class="title">wait</span>();</span></span><br><span class="line"><span class="function">    <span class="title">notify</span>();</span></span><br><span class="line"><span class="function">    <span class="title">interrupted</span>();</span></span><br></pre></td></tr></table></figure>
<h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><ul>
<li>run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。</li>
<li>调用start方法方可启动线程，把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用 run()方法，这是由jvm的内存机制规定的。</li>
<li>run()方法必须是public访问权限，返回值类型为void.。</li>
</ul>
<h3 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h3><ul>
<li>用start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。</li>
<li>通过调用Thread类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法。</li>
<li>方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。</li>
</ul>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><ul>
<li>Java Thread中, join() 方法主要是让调用改方法的thread完成run方法里面的东西后， 在执行join()方法后面的代码。</li>
<li>使用场景: 主线程开启子线程，子线程进行网络访问，然后获得结果，填充数据至UI。</li>
<li>线程同步，除了join()方法外，目前安卓中还有另外一个Handler，Message<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">Handler mHandler = <span class="keyword">new</span> Handler() &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> handleMessage(Message msg) &#123;  </span><br><span class="line">            <span class="built_in">super</span>.handleMessage(msg);  </span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;  </span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:  </span><br><span class="line">                <span class="comment">//完成主界面更新,拿到数据  </span></span><br><span class="line">                <span class="built_in">String</span> data = (<span class="built_in">String</span>)msg.obj;  </span><br><span class="line">                  </span><br><span class="line">                updateWeather();  </span><br><span class="line">                textView.setText(data);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在子线程中，通过传递Message对象给handler处理<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">updateWeather</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">//耗时操作，完成之后发送消息给Handler，完成UI更新；  </span></span><br><span class="line">                mHandler.sendEmptyMessage(<span class="number">0</span>);  </span><br><span class="line">                <span class="comment">//需要数据传递，用下面方法；  </span></span><br><span class="line">                Message msg =<span class="keyword">new</span> Message();  </span><br><span class="line">                msg.obj = <span class="string">&quot;数据&quot;</span>;<span class="comment">//可以是基本类型，可以是对象，可以是List、map等；  </span></span><br><span class="line">                mHandler.sendMessage(msg);  </span><br><span class="line">            &#125;  </span><br><span class="line">              </span><br><span class="line">        &#125;).start();  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure></p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>sleep是让线程指定休眠时间，然后继续工作</p>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h3><p>yiedld这个方法是让当前线程回到可执行状态，以便让具有相同优先级的线程进入执行状态，但不是绝对的。因为虚拟机可能会让该线程重新进入执行状态。</p>
<h3 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h3><p>wait是等待，直到有线程通知notify()唤醒他才会重新工作。</p>
<p>sleep与wait的区别：</p>
<ul>
<li>sleep是你困了，要睡觉，等你睡醒了再干活。</li>
<li>wait是你现在没事做，先眯会儿吧，什么时候领导提醒你该干活了再干。</li>
</ul>
<p>简单点说wait和sleep的区别：</p>
<ol>
<li>wait只能在有线程锁的部分调用，而sleep不需要。 </li>
<li>wait是睡眠时放开线程锁，此时线程不占用任何资源，不增加时间限制。而sleep睡眠时占着线程锁占着CPU不工作，形象地说明为“占着CPU睡觉”，此时，系统的CPU部分资源(同步资源)被占用，其他线程无法进入，会增加时间限制。</li>
<li>wait需要notify方法来唤醒，而sleep是定时醒。</li>
</ol>
<h3 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h3><p>Wait()和notify():如果条件不满足，则等待。当条件满足时，等待该条件的线程将被唤醒。<br>一般用在synchronized机制中<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line">线程<span class="selector-tag">A</span></span><br><span class="line"><span class="selector-tag">synchronized</span>(obj) &#123;</span><br><span class="line">    <span class="selector-tag">while</span>(!condition) &#123;</span><br><span class="line">        <span class="selector-tag">obj</span><span class="selector-class">.wait</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">obj</span><span class="selector-class">.doSomething</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<p>当线程A获得了obj锁后，发现条件condition不满足，无法继续下一处理，于是线程A就wait（）。<br>在另一线程B中，如果B更改了某些条件，使得线程A的condition条件满足了，就可以唤醒线程A：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">线程B</span><br><span class="line">synchronized(obj) &#123;</span><br><span class="line">    condition = true<span class="comment">;</span></span><br><span class="line">    obj.notify()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的概念是：</p>
<ul>
<li>调用obj的wait（）， notify（）方法前，必须获得obj锁，也就是必须写在synchronized（obj） {……} 代码段内。</li>
<li>调用obj.wait（）后，线程A就释放了obj的锁，否则线程B无法获得obj锁，也就无法在synchronized（obj） {……} 代码段内唤醒A.</li>
<li>当obj.wait（）方法返回后，线程A需要再次获得obj锁，才能继续执行。</li>
<li>如果A1，A2，A3都在obj.wait（），则B调用obj.notify（）只能唤醒A1，A2，A3中的一个（具体哪一个由JVM决定）。</li>
<li>obj.notifyAll（）则能全部唤醒A1，A2，A3，但是要继续执行obj.wait（）的下一条语句，必须获得obj锁，因此，A1，A2，A3只有一个有机会获得锁继续执行，例如A1，其余的需要等待A1释放obj锁之后才能继续执行。</li>
<li>当B调用obj.notify/notifyAll的时候，B正持有obj锁，因此，A1，A2，A3虽被唤醒，但是仍无法获得obj锁。直到B退出synchronized块，释放obj锁后，A1，A2，A3中的一个才有机会获得锁继续执行。</li>
</ul>
<h3 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h3><ol>
<li>interrupt：置线程的中断状态</li>
<li>isInterrupt：线程是否中断</li>
<li>interrupted：返回线程的上次的中断状态，并清除中断状态</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows通过virtualbox ssh登陆到虚拟ubuntu</title>
    <url>/2015/11/30/Windows%E9%80%9A%E8%BF%87virtualbox-ssh%E7%99%BB%E9%99%86%E5%88%B0%E8%99%9A%E6%8B%9Fubuntu/</url>
    <content><![CDATA[<h3 id="Ubuntu中操作"><a href="#Ubuntu中操作" class="headerlink" title="Ubuntu中操作"></a>Ubuntu中操作</h3><p>在Ubuntu下使用ALT+CTRL+T打开终端输入以下命令</p>
<ol>
<li>查看ubuntu和vitualbx中的网络是不是连通的<pre><code class="lang-bash">$ ping vimer.cn
</code></pre>
</li>
<li>查询ip配置信息<pre><code class="lang-bash">$ ifconfig   //注意是ifconfig
</code></pre>
</li>
<li><p>设置ssh登陆</p>
<pre><code class="lang-bash">$ sudo apt-get install openssh-server
</code></pre>
<p>这里如果遇到依赖openssh-client<br>先执行</p>
<pre><code class="lang-bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre>
<p>再执行 <a href="#设置ssh登陆">上一步</a>步骤安装</p>
</li>
<li><p>安装好后，看一下端口监听</p>
<pre><code class="lang-bash">$ netstat -lpnt
</code></pre>
<p>看一下有没有 ：：：22 字段，一般是最后一个</p>
</li>
<li><p>如果以上都没问题，此时Ubuntu所有的配置完成。</p>
</li>
<li><p>关闭Ubuntu</p>
</li>
</ol>
<h3 id="Windows下配置"><a href="#Windows下配置" class="headerlink" title="Windows下配置"></a>Windows下配置</h3><ol>
<li>将Virtulbox写入环境变量path中，一般是C:\Program Files\Oracle\VirtualBox </li>
<li>Win+R打开命令行<pre><code class="lang-bash">$ VBoxManage modifyvm &quot;ubuntu&quot; –-natpf1 &quot;guestssh,tcp,,2222,,22&quot;
</code></pre>
</li>
<li>VBox管理工具 修改vm中 虚拟机ubuntu —网卡1 “端口转发名字,通过tcp连接，宿主机IP(略)，windows下端口2222，虚拟机IP(略)，ubuntu下端口22”  ,一一对应<ul>
<li>如果其他机器，<br>同网段，写上不同的IP地址。</li>
<li>不同网段，配置路由上 虚拟服务器 端口转发，然后再配置本机到路由域内转发IP<br>如2222-543-22 中间”guestssh,tcp,192.168.0.100,2222,192.168.0(1).1,543”   然后路优会自动转发至机器22端口。</li>
</ul>
</li>
</ol>
<p>4.重启Ubuntu,通过putty登陆<br>输入主机名称127.0.0.1端口2222<br>保持的会话起个名字ubuntu,保存<br>登陆<br>出现一个提示，不用管<br>如果看到log as：<br>输入ubuntu用户名<br>输入密码</p>
<p>Congratulations，你应该可以看到Welcome！</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://blog.sina.com.cn/s/blog_72e67d290100ox42.html">解决VirtualBox 中Ubuntu无法全屏的方法</a><br><a href="http://blog.csdn.net/astrotycoon/article/details/8143146">ssh登陆virtualbox安装的Ubuntu的同时也能连上互联网</a><br><a href="http://www.vimer.cn/2010/09/%E5%9C%A8windows%E4%B8%8B%E7%94%A8virtualbox%E8%99%9A%E6%8B%9Fubuntu%E5%B9%B6%E9%80%9A%E8%BF%87ssh%E7%99%BB%E5%BD%95.html">在windows下用virtualbox虚拟ubuntu,并通过ssh登录</a></p>
]]></content>
      <categories>
        <category>VirtualBox</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Window下sublime+latex配置</title>
    <url>/2015/12/06/Window%E4%B8%8Bsublime-latex%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="SumatraPDF"><a href="#SumatraPDF" class="headerlink" title="SumatraPDF"></a>SumatraPDF</h3><p>百度下载安装SumatraPDF，傻瓜式安装<br>添加SumatraPDF到系统变量中，这样在编译完latex会自动跳出你的pdf文档</p>
<h3 id="TexLive"><a href="#TexLive" class="headerlink" title="TexLive"></a>TexLive</h3><ol>
<li>推荐下载<a href="http://pan.baidu.com/s/1dDnnhvz">镜像</a></li>
<li>使用 软碟通 或者 虚拟光驱 打开texlive.iso</li>
<li>运行install-tl-advanced.bat</li>
<li>傻瓜式安装30分钟左右结束，此期间可同时进行下一步</li>
</ol>
<h3 id="Sublime-Text3-后简称ST3"><a href="#Sublime-Text3-后简称ST3" class="headerlink" title="Sublime Text3(后简称ST3)"></a>Sublime Text3(后简称ST3)</h3><p>1.添加Package Control插件<br>按下Ctrl + ` （数字键1左边的键）组合键来打开ST3控制台<br>点击<a href="https://packagecontrol.io/installation#st3">Package Control link</a><br>或者下面这段copy至控制台回车<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">&#x27;2915d1851351e5ee549c20394736b442&#x27;</span> + <span class="string">&#x27;8bc59f460fa1548d1514676163dafc88&#x27;</span>; pf = <span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%20&#x27;</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).write(by)</span><br></pre></td></tr></table></figure><br>如果报错，请查看自己的Sublime Text版本是2还是3.</p>
<h4 id="安装LatexTools插件"><a href="#安装LatexTools插件" class="headerlink" title="安装LatexTools插件"></a>安装LatexTools插件</h4><ol>
<li>ST3面板中CTRL+SHIFT+P输入Package Control:Install Package选择</li>
<li>输入LaTeXTools，选定</li>
<li>CTRL+SHIFT+P，运行“Reconfigure and migrate settings”</li>
<li><p>配置LaTexTools.sublime-settings(菜单：Preferences-&gt;Browse Packages 目录：/User)</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">找到“Platform settings: adapt <span class="keyword">as</span> needed <span class="keyword">for</span> your machine” section中的如下图，</span><br><span class="line">更改[<span class="string">&quot;texpath&quot;</span> : <span class="string">&quot;&quot;</span>]为[<span class="string">&quot;texpath&quot;</span> : <span class="string">&quot;C:\\Program Files\\texlive\\2014\\bin\\win32;$PATH&quot;</span>]；</span><br><span class="line">发行版[<span class="string">&quot;distro&quot;</span> : <span class="string">&quot;miktex&quot;</span>]更改为[<span class="string">&quot;distro&quot;</span> : <span class="string">&quot;texlive&quot;</span>]</span><br><span class="line">在Build engine settings部分下面，将[<span class="string">&quot;builder&quot;</span>: <span class="string">&quot;traditional&quot;</span>]更改为[<span class="string">&quot;builder&quot;</span>: <span class="string">&quot;simple&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>大功告成！</p>
</li>
</ol>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  </span><br><span class="line">\title&#123;Title&#125;</span><br><span class="line">\author&#123;Your Name&#125;</span><br><span class="line">  </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">  </span><br><span class="line">\maketitle&#123;&#125;</span><br><span class="line">  </span><br><span class="line">\section&#123;Introduction&#125;</span><br><span class="line">  </span><br><span class="line">This is <span class="built_in">where</span> you will write your content.</span><br><span class="line">  </span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>CONTROL + B编译</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol>
<li><a href="http://www.zhihu.com/question/19954023">有哪些好的 LaTeX 编辑器？</a></li>
</ol>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>ST3</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 子系统管理 LxRunOffline 并切换 centos7</title>
    <url>/2020/03/18/Windows%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86LxRunOffline%E5%B9%B6%E5%88%87%E6%8D%A2centos7/</url>
    <content><![CDATA[<p>关于如何打开子系统我不介绍了。可以参考链接。<br>在 Linux 下，大家喜欢用 apt-get ， yum 来安装应用程序，如今在 windows 下，大家可以使用 Chocolatey 来快速下载搭建一个开发环境。</p>
<ul>
<li>win7 或者 win2003 以上</li>
<li>具有 powershell 工具（ cmd 也可以安装，不过可能有些过时的 bug ）<h3 id="Windows包安装工具Chocolatey"><a href="#Windows包安装工具Chocolatey" class="headerlink" title="Windows包安装工具Chocolatey"></a>Windows包安装工具Chocolatey</h3></li>
</ul>
<ol>
<li><p>用管理员身份打开 powershell , 然后运行下面一句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy AllSigned; iex ((New-Object System.Net.WebClient).DownloadString(<span class="string">&#x27;https://chocolatey.org/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>如有问题，参考链接1</p>
</li>
<li><p>安装 lxrunoffline</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">choco install lxrunoffline</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="lxrunoffline-使用手册"><a href="#lxrunoffline-使用手册" class="headerlink" title="lxrunoffline 使用手册"></a>lxrunoffline 使用手册</h3><p>下载<a href="https://raw.githubusercontent.com/CentOS/sig-cloud-instance-images/CentOS-7-x86_64/docker/centos-7-x86_64-docker.tar.xz">centos安装包</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统中已安装的 WSL </span></span><br><span class="line">PS C:\Users\admin\Desktop&gt; lxrunoffline l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装centos </span></span><br><span class="line"><span class="comment"># lxrunoffline i -n &lt;WSL名称&gt; -d &lt;安装路径&gt; -f &lt;压缩包路径&gt;.tar.gz</span></span><br><span class="line"></span><br><span class="line">PS C:\Users\admin\Desktop&gt; lxrunoffline i -n centos7 -d C:/centos -f D:/work/centos-7-x86_64-docker.tar</span><br><span class="line"><span class="comment"># 如果出现安装的迹象，说明没问题</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">PS C:\Users\admin\Desktop&gt; wsl /l <span class="comment">#列出已注册的分发版。</span></span><br><span class="line">适用于 Linux 的 Windows 子系统:</span><br><span class="line">centos (默认)</span><br><span class="line">PS C:\Users\admin\Desktop&gt; wslconfig /u Ubuntu</span><br><span class="line">正在注销子系统...</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://davidsheh.github.io/2017/09/09/windows-chocolatey-scoop/"> Windows 系统的包管理器</a></p>
]]></content>
      <categories>
        <category>奇技</category>
      </categories>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>android之Fragment跳转与传值</title>
    <url>/2015/12/17/android%E4%B9%8BFragment%E8%B7%B3%E8%BD%AC%E4%B8%8E%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<h3 id="Fragment跳转"><a href="#Fragment跳转" class="headerlink" title="Fragment跳转"></a>Fragment跳转</h3><ul>
<li>开启碎片事务</li>
<li>添加，删除，替换碎片</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">transaction.replace(R.id.content,mpFragment);</span><br><span class="line">transaction.add(R.id.content,mpFragment);</span><br><span class="line">transaction.remove(R.id.content,mpFragment);</span><br></pre></td></tr></table></figure>
<ul>
<li>添加到返回栈中(可选)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>提交事务，commit()!!!!!</li>
</ul>
<h4 id="Fragment跳转Fragment"><a href="#Fragment跳转Fragment" class="headerlink" title="Fragment跳转Fragment"></a>Fragment跳转Fragment</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MPFragment mpFragment= <span class="keyword">new</span> MPFragment();</span><br><span class="line">FragmentTransaction transaction =getFragmentManager().beginTransaction();</span><br><span class="line">transaction.replace(R.id.content,mpFragment);</span><br><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">transaction.commit();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Activity舔砖Fragment"><a href="#Activity舔砖Fragment" class="headerlink" title="Activity舔砖Fragment"></a>Activity舔砖Fragment</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">DietFragment dietFragment;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (dietFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果Fragment为空，则创建一个并添加到界面上</span></span><br><span class="line">                dietFragment = <span class="keyword">new</span> DietFragment();</span><br><span class="line">                transaction.add(R.id.content, dietFragment);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果Fragment不为空，则直接将它显示出来</span></span><br><span class="line">                transaction.show(dietFragment);</span><br><span class="line">            &#125;</span><br><span class="line">transaction.commit();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Frament传值"><a href="#Frament传值" class="headerlink" title="Frament传值"></a>Frament传值</h3><h4 id="Acitivity传值给Fragment-同Activity下Fragment传值给Fragment"><a href="#Acitivity传值给Fragment-同Activity下Fragment传值给Fragment" class="headerlink" title="Acitivity传值给Fragment,同Activity下Fragment传值给Fragment"></a>Acitivity传值给Fragment,同Activity下Fragment传值给Fragment</h4><ul>
<li>直接在Activity中添加全局变量,并设置getter和setter<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,Double&gt; percentMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAcitvity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Double&gt; <span class="title">getPercentMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> percentMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPercentMap</span><span class="params">(Map&lt;String, Double&gt; percentMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.percentMap = percentMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Fragment传值给Activity"><a href="#Fragment传值给Activity" class="headerlink" title="Fragment传值给Activity"></a>Fragment传值给Activity</h4><ul>
<li>在Fragment中写个内部接口</li>
<li>让宿主去实现该接口</li>
<li>在Fragment事件中强转宿主为该接口变为实例，返回给宿主</li>
<li>宿主实现接口中方法，获得结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Fragment部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LoginInputListener listener = (LoginInputListener) getTargetFragment();</span><br><span class="line">        <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">        listener.onLoginInputComplete(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">LoginInputListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;輸入的數字是：&quot;</span> + result,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Fragment传值给Fragment（方法2）"><a href="#Fragment传值给Fragment（方法2）" class="headerlink" title="Fragment传值给Fragment（方法2）"></a>Fragment传值给Fragment（方法2）</h4><ul>
<li>为了防止混淆，这个方法和上面基本一致，仔细阅读便可发现.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Fragment部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LoginInputListener listener = (LoginInputListener) getActivity();</span><br><span class="line">        <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">        listener.onLoginInputComplete(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">LoginInputListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;輸入的數字是：&quot;</span> + result,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下文件夹占用解决办法</title>
    <url>/2020/03/18/Windows%E4%B8%8B%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>问题： Windows 下文件夹占用解决办法<br>解决办法： </p>
<ol>
<li>按下 win 键</li>
<li>搜索”资源监视器”， 打开</li>
<li>选择 CPU 栏目</li>
<li>在”关联的句柄” 搜索框输入 文件夹的名称</li>
<li>鼠标右键，结束进程。<br>如图：</li>
</ol>
<p><img src="/uploads/zyglq.png" alt="图1-1"></p>
]]></content>
      <categories>
        <category>奇技</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>android之自定义Dialog</title>
    <url>/2015/12/19/android%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89dialog/</url>
    <content><![CDATA[<h3 id="自定义Dialog"><a href="#自定义Dialog" class="headerlink" title="自定义Dialog"></a>自定义Dialog</h3><h4 id="自定义Dialog的创建"><a href="#自定义Dialog的创建" class="headerlink" title="自定义Dialog的创建"></a>自定义Dialog的创建</h4><ol>
<li>定义控件，</li>
<li>onCreate()加载视图view</li>
<li>设置控件的监听事件</li>
<li>设置一个内部接口，定义抽象监听方法</li>
<li>构造方法回调listener</li>
</ol>
<p>ChooseDialog.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChooseDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btn_take_photo;</span><br><span class="line">    <span class="keyword">private</span> Button btn_pick_photo;</span><br><span class="line">    <span class="keyword">private</span> Button btn_pick_cancel;</span><br><span class="line">    <span class="keyword">private</span> ChooserDialogListener listener;    </span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChooserDialogListener</span></span>&#123;   </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChoose</span><span class="params">(View view)</span></span>;   </span><br><span class="line">     &#125;   </span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ChooseDialog</span><span class="params">(Context context,<span class="keyword">int</span> theme,ChooserDialogListener listener)</span> </span>&#123;   </span><br><span class="line">         <span class="keyword">super</span>(context,theme);  </span><br><span class="line">         <span class="keyword">this</span>.listener = listener;</span><br><span class="line">     &#125;   </span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span>   </span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;   </span><br><span class="line">         <span class="keyword">super</span>.onCreate(savedInstanceState);   </span><br><span class="line">         setContentView(R.layout.imgchooser_dialog);   </span><br><span class="line">         initViews();   </span><br><span class="line">     &#125;   </span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>&#123;   </span><br><span class="line">        btn_take_photo = (Button)findViewById(R.id.btn_take_photo);   </span><br><span class="line">        btn_pick_photo = (Button)findViewById(R.id.btn_pick_photo);   </span><br><span class="line">        btn_pick_cancel = (Button)findViewById(R.id.btn_pick_cancel);   </span><br><span class="line"></span><br><span class="line">        btn_take_photo.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">        btn_pick_photo.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">        btn_pick_cancel.setOnClickListener(<span class="keyword">this</span>);   </span><br><span class="line">     &#125;   </span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span>   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">         listener.onChoose(v);</span><br><span class="line">         <span class="keyword">this</span>.dismiss();</span><br><span class="line">     &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Dialog调用"><a href="#Dialog调用" class="headerlink" title="Dialog调用"></a>Dialog调用</h4><ol>
<li>直接使用,初始化之后，dialog.show();</li>
<li>DialogFragment中onCreateDialog(Bundle savedInstanceState)返回</li>
</ol>
<p>源代码:DialogFragment.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        ChooseDialog  dialog = <span class="keyword">new</span> ChooseDialog(getActivity(),R.style.ActionTheme,   </span><br><span class="line">                 <span class="keyword">new</span> ChooserDialogListener() &#123;   </span><br><span class="line">             <span class="meta">@Override</span>   </span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChoose</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">switch</span>(view.getId())&#123;</span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_take_photo:</span><br><span class="line">                         ((MainActivity)getActivity()).takeCamera();</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_pick_photo:</span><br><span class="line">                         ((MainActivity)getActivity()).takePhoto();</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                     <span class="keyword">case</span> R.id.btn_pick_cancel:</span><br><span class="line">                         Log.i(<span class="string">&quot;Target&quot;</span>, <span class="string">&quot;取消&quot;</span>);</span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">//TODO 分析图片</span></span><br><span class="line">             &#125;   </span><br><span class="line">     &#125;);  </span><br><span class="line"></span><br><span class="line">    dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    Window window = dialog.getWindow();</span><br><span class="line">    <span class="comment">//dialog全屏</span></span><br><span class="line">    window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">    lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">    lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">    window.setAttributes(lp);</span><br><span class="line">    <span class="comment">//dialog显示在底层</span></span><br><span class="line">    window.setGravity(Gravity.BOTTOM);</span><br><span class="line">    window.setWindowAnimations(R.style.mystyle);</span><br><span class="line">    <span class="comment">//直接调用的话</span></span><br><span class="line">    <span class="comment">//dialog.show();</span></span><br><span class="line">    <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="AlertDialog简单示例"><a href="#AlertDialog简单示例" class="headerlink" title="AlertDialog简单示例"></a>AlertDialog简单示例</h3><p>介绍：alert上有两个Numberpicker，一个Numberpicker为整数，一个Numberpicker表示小数点后一位。<br>通过AlertDialog.Builder去直接生成一个builder.create()生成一个Dialog,可以自己参看android源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> <span class="keyword">implements</span> <span class="title">OnValueChangeListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_integer;</span><br><span class="line">    <span class="keyword">private</span> NumberPicker np_decimal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginInputListener</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoginInputComplete</span><span class="params">(<span class="keyword">float</span> result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">        <span class="comment">// Get the layout inflater</span></span><br><span class="line">        LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">        View view = inflater.inflate(R.layout.dialog, <span class="keyword">null</span>);</span><br><span class="line">        np_integer = (NumberPicker) view.findViewById(R.id.np_integer);</span><br><span class="line">        np_integer.setMinValue(<span class="number">0</span>);</span><br><span class="line">        np_integer.setMaxValue(<span class="number">999</span>);</span><br><span class="line">        np_integer.setOnValueChangedListener(<span class="keyword">this</span>);</span><br><span class="line">        np_decimal = (NumberPicker) view.findViewById(R.id.np_decimal);</span><br><span class="line">        np_decimal.setMinValue(<span class="number">0</span>);</span><br><span class="line">        np_decimal.setMaxValue(<span class="number">9</span>);</span><br><span class="line">        np_decimal.setOnValueChangedListener(<span class="keyword">this</span>);</span><br><span class="line">        builder.setView(view)</span><br><span class="line">                .setTitle(<span class="string">&quot;PLEASE INPUT AND SAVE&quot;</span>)</span><br><span class="line">                <span class="comment">// Add action buttons</span></span><br><span class="line">                .setPositiveButton(<span class="string">&quot;Confirm&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> DialogInterface.OnClickListener()</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">                            </span>&#123;</span><br><span class="line">                                Log.i(<span class="string">&quot;Target&quot;</span>, getTargetFragment().getClass().getName());</span><br><span class="line">                                LoginInputListener listener = (LoginInputListener) getTargetFragment();</span><br><span class="line">                                <span class="keyword">float</span> result= np_integer.getValue() + np_decimal.getValue()*<span class="number">1.0f</span>/<span class="number">10</span>;</span><br><span class="line">                                listener.onLoginInputComplete(result);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).setNegativeButton(<span class="string">&quot;Cancel&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    onValueChange <span class="comment">//不写了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和Dialog一样 如果需要传值，它的调用处，去实现接口LoginInputListener,就可以先显示出来。<br>android传值，之前有写过一篇！传值其实都是类似，内部类，内部接口，似有变量设置getter,setter</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Dialog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/11/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>FirstTry</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse开发maven项目60000错误</title>
    <url>/2015/11/22/eclipse%E5%BC%80%E5%8F%91maven%E9%A1%B9%E7%9B%AE60000%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="坚持每天写一点"><a href="#坚持每天写一点" class="headerlink" title="坚持每天写一点"></a>坚持每天写一点</h2><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li>首先根据错误提示去~/.m2/repository/下去找org/hamcrest/hamcrest-core/1.3</li>
<li>删除目录下含有lastupdate结尾的jar(无效的jar)</li>
<li>百度maven hamcrest-core-1.3.jar和hamcrest-library-1.3.jar。直接手动下载.</li>
<li>然后直接复制到对应版本的目录下。</li>
</ol>
<p>刷新项目ok！！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>python matplotlib画图</title>
    <url>/2016/07/21/python-matplotlib%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="2D折线图绘制"><a href="#2D折线图绘制" class="headerlink" title="2D折线图绘制"></a>2D折线图绘制</h3><p>主要模块pyplot<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">file = open(<span class="string">&quot;./dataset.txt&quot;</span>)</span><br><span class="line">dataSet = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = file.readline()</span><br><span class="line">        dataSet.append(line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># x,y 必须是相同的维度</span></span><br><span class="line"><span class="comment"># y =  np.arange(0, 12000, 500) # 步长500</span></span><br><span class="line">x, y = dataSet <span class="comment"># 这里用你自己的</span></span><br><span class="line"><span class="comment"># x = y =  np.arange(0, 1, 0.1) # 示例数据</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># color [r：red g：green b:blue m c]   mark [s = square &#x27;^&#x27; &#x27;*&#x27; &#x27;o&#x27; &#x27;x&#x27;]</span></span><br><span class="line">plt.plot(y,x,<span class="string">&#x27;rs&#x27;</span>,label = str)</span><br><span class="line">plt.plot(y,x,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Number of features extracted&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Accuracy(F1)&quot;</span>)</span><br><span class="line">plt.grid() <span class="comment"># 添加网格</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1</span>) <span class="comment"># y轴 范围限制</span></span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="3D图绘制"><a href="#3D图绘制" class="headerlink" title="3D图绘制"></a>3D图绘制</h3><p>主要模块 axes3d<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpl_toolkits.mplot3d.axes3d <span class="keyword">as</span> p3</span><br><span class="line"></span><br><span class="line">fig_num = <span class="number">1</span></span><br><span class="line">fig = plt.figure(fig_num)</span><br><span class="line">ax = p3.Axes3D(fig)</span><br><span class="line"><span class="comment"># x,y,z = dataset</span></span><br><span class="line">color = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">mark = <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="comment"># 3D折线图</span></span><br><span class="line">ax.scatter3D(x, y, z ,c = color, marker = mark)</span><br><span class="line"><span class="comment"># 3D曲面图</span></span><br><span class="line">ax.plot_surface(x1, y, z ,rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=plt.cm.hot)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1]. <a href="http://matplotlib.org/examples/index.html">matplotlib examples</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java文件写入项目根目录</title>
    <url>/2015/11/25/java%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="创建路径或文件"><a href="#创建路径或文件" class="headerlink" title="创建路径或文件"></a>创建路径或文件</h2><p>方法：new File(<a href="#路径问题">路径</a>，文件夹或文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">File folder = new File(rootPath,<span class="string">&quot;src/data/weibo1&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(!folder.exists())&#123;</span><br><span class="line">	    folder.mkdirs(); </span><br><span class="line">	    &#125; </span><br></pre></td></tr></table></figure>
<p>文件夹中创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">File file = new File(folder, filename);</span><br></pre></td></tr></table></figure>
<p>当然也可以一步到位，本人习惯这样，层次感强。</p>
<h2 id="读写文件示例"><a href="#读写文件示例" class="headerlink" title="读写文件示例"></a>读写文件示例</h2><p>见<a href="#源代码">源代码</a></p>
<h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>在Java开发工具eclipse,myeclipse的project中使用相对路径<br>也就是说，在jar包或者cmd下无效。只在ide成立</p>
<p>项目结构：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">├─src </span><br><span class="line">│    └─com </span><br><span class="line">│       └─javasoft </span><br><span class="line">│             ├─entity</span><br><span class="line">│             └─db </span><br><span class="line">├─doc</span><br></pre></td></tr></table></figure><br>文件创建：<br>以“/”开头，指的是ide workspace所在磁盘的根目录<br>不以“/”开头，指的是project下子文件夹或者文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">File f = new File(<span class="string">&quot;src/com/javasoft/db/a.txt&quot;</span>);</span><br><span class="line">//or</span><br><span class="line">File f = new File(<span class="string">&quot;doc/b.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="通过CLASSPATH读取包内文件"><a href="#通过CLASSPATH读取包内文件" class="headerlink" title="通过CLASSPATH读取包内文件"></a>通过CLASSPATH读取包内文件</h2><p>获取类路径下文件，也就是classes文件夹下文件，以“/”开头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">InputStream is = ReadFile.class.getResourceAsStream(<span class="string">&quot;/com/javasoft/db/a.txt&quot;</span>);</span><br><span class="line">//获取classes(classpath)路径</span><br><span class="line">String classpath = getClass().getResource(<span class="string">&quot;/&quot;</span>).getFile().toString();</span><br></pre></td></tr></table></figure>
<p>获取类加载器下文件 不以“/”开头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">InputStream is=TestAction.class.getClassLoader().getResourceAsStream(<span class="string">&quot;com/javasoft/db/test.txt&quot;</span>); </span><br><span class="line">//获取classes(classpath)路径</span><br><span class="line">String rootPath = FileUtil.class.getClassLoader().getResource(<span class="string">&quot;&quot;</span>).getFile().toString();</span><br></pre></td></tr></table></figure>
<h2 id="可行的解决办法"><a href="#可行的解决办法" class="headerlink" title="可行的解决办法"></a>可行的解决办法</h2><p>absolutePath可以直接获取到项目路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">String path = Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath(); </span><br><span class="line">String secendPath = path.substring(1, path.lastIndexOf(<span class="string">&quot;/&quot;</span>)); </span><br><span class="line">String absolutelyPath = secendPath.substring(0,secendPath.lastIndexOf(<span class="string">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/D:/j2ee/m_workspace/LDA4j-master/target/<span class="built_in">test</span>-classes/</span><br><span class="line">D:/j2ee/m_workspace/LDA4j-master/target/<span class="built_in">test</span>-classes</span><br><span class="line">D:/j2ee/m_workspace/LDA4j-master/target</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>使用工程相对路径是靠不住的。<br>使用CLASSPATH路径是可靠的。</p>
</blockquote>
<hr>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package com.your.package;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line">public class TxtUtil &#123;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 创建文件</span><br><span class="line">  * @param fileName</span><br><span class="line">  * @<span class="built_in">return</span></span><br><span class="line">  */</span><br><span class="line"> public static boolean createFile(File fileName)throws Exception&#123;</span><br><span class="line">	 </span><br><span class="line">	  boolean flag=<span class="literal">false</span>;</span><br><span class="line">	  try&#123;</span><br><span class="line">		   <span class="keyword">if</span>(!fileName.exists())&#123;</span><br><span class="line">			    fileName.createNewFile();</span><br><span class="line">			    flag=<span class="literal">true</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">	  &#125;catch(Exception e)&#123;</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="built_in">return</span> flag;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 读TXT文件内容</span><br><span class="line">  * @param fileName</span><br><span class="line">  * @<span class="built_in">return</span></span><br><span class="line">  */</span><br><span class="line"> public static String readTxtFile(File fileName)throws Exception&#123;</span><br><span class="line">	  String result=null;</span><br><span class="line">	  FileReader fileReader=null;</span><br><span class="line">	  BufferedReader bufferedReader=null;</span><br><span class="line">	  try&#123;</span><br><span class="line">		   fileReader=new FileReader(fileName);</span><br><span class="line">		   bufferedReader=new BufferedReader(fileReader);</span><br><span class="line">		   try&#123;</span><br><span class="line">			   String <span class="built_in">read</span>=null;</span><br><span class="line">			    <span class="keyword">while</span>((<span class="built_in">read</span>=bufferedReader.readLine())!=null)&#123;</span><br><span class="line">			    	result=result+<span class="built_in">read</span>+<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">			    &#125;</span><br><span class="line">		   &#125;catch(Exception e)&#123;</span><br><span class="line">			   e.printStackTrace();</span><br><span class="line">		   &#125;</span><br><span class="line">	  &#125;catch(Exception e)&#123;</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;finally&#123;</span><br><span class="line">		   <span class="keyword">if</span>(bufferedReader!=null)&#123;</span><br><span class="line">		    bufferedReader.close();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(fileReader!=null)&#123;</span><br><span class="line">    fileReader.close();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;读取出来的文件内容是：&quot;</span>+<span class="string">&quot;\r\n&quot;</span>+result);</span><br><span class="line">  <span class="built_in">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> public static boolean writeTxtFile(String content,File  fileName)throws Exception&#123;</span><br><span class="line">	  RandomAccessFile mm=null;</span><br><span class="line">	  boolean flag=<span class="literal">false</span>;</span><br><span class="line">	  FileOutputStream o=null;</span><br><span class="line">	  try &#123;</span><br><span class="line">	   o = new FileOutputStream(fileName);</span><br><span class="line">	      o.write(content.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">	      o.close();</span><br><span class="line">	//   mm=new RandomAccessFile(fileName,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">	//   mm.writeBytes(content);</span><br><span class="line">	   flag=<span class="literal">true</span>;</span><br><span class="line">	  &#125; catch (Exception e) &#123;</span><br><span class="line">	   // TODO: handle exception</span><br><span class="line">		  e.printStackTrace();</span><br><span class="line">	  &#125;finally&#123;</span><br><span class="line">	   <span class="keyword">if</span>(mm!=null)&#123;</span><br><span class="line">		   mm.close();</span><br><span class="line">	   &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="built_in">return</span> flag;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 	public static void contentToTxt(String filePath, String content) &#123;</span><br><span class="line">        String str = new String(); //原有txt内容</span><br><span class="line">        String s1 = new String();//内容更新</span><br><span class="line">        try &#123;</span><br><span class="line">            File f = new File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">                f.createNewFile();// 不存在则创建</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedReader input = new BufferedReader(new FileReader(f));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((str = input.readLine()) != null) &#123;</span><br><span class="line">                s1 += str + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">            input.close();</span><br><span class="line">            s1 += content;</span><br><span class="line"></span><br><span class="line">            BufferedWriter output = new BufferedWriter(new FileWriter(f));</span><br><span class="line">            output.write(s1);</span><br><span class="line">            output.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>互动派面试回忆</title>
    <url>/2016/03/17/%E4%BA%92%E5%8A%A8%E6%B4%BE%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86/</url>
    <content><![CDATA[<h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><ol>
<li>linux查看系统目录</li>
<li>linux结束一个用户的进程，用管道的方式</li>
<li>单例模式</li>
<li>设计模式</li>
<li>浏览器输入URL到收到页面内容发生了什么？</li>
<li>MapReduce,HDFS,HBase,Hive等都用在什么情形</li>
<li>怎样用O(1)的空间复杂度和O(n)的时间复杂度旋转单链表</li>
<li>怎么确定单链表是否有环</li>
</ol>
<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ol>
<li>怎么从重复的电话号码中查找出电话号码和重复次数，写出mysql</li>
<li>简历中模型里面的实现</li>
<li>SVM中如何判断一个进行分类的</li>
</ol>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>PYTHON THEANO配置GPU CUDA</title>
    <url>/2016/06/29/python-theano%E9%85%8D%E7%BD%AEGPU-CUDA/</url>
    <content><![CDATA[<h3 id="python科学环境"><a href="#python科学环境" class="headerlink" title="python科学环境"></a>python科学环境</h3><p><a href="https://www.continuum.io/downloads">Anaconda</a></p>
<ol>
<li>在Anaconda官网上下载anaconda安装包,进行安装，傻瓜式安装，【Just me】，【next】,【next to end】</li>
<li>其中要是杀毒软件拦截，直接允许插入系统环境变量。</li>
</ol>
<h3 id="深度学习基本环境"><a href="#深度学习基本环境" class="headerlink" title="深度学习基本环境"></a>深度学习基本环境</h3><ol>
<li>libpython和mingw<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ conda <span class="keyword">install</span> mingw</span><br><span class="line">$ conda <span class="keyword">install</span> libpython</span><br><span class="line">$ pip <span class="keyword">install</span> theano</span><br></pre></td></tr></table></figure>
至于为什么装theano用pip,主要是本人觉得pip速度快。</li>
</ol>
<p>注意：别急着调试！</p>
<h4 id="无GPU配置"><a href="#无GPU配置" class="headerlink" title="无GPU配置"></a>无GPU配置</h4><ol>
<li>在home目录，windows下就是以你【计算机名】命名的文件夹，如我的是C:\Users\Paul</li>
<li><p>在home目录下创建名.theaorc.txt,文件内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[blas]</span></span><br><span class="line">ldflags =</span><br><span class="line"></span><br><span class="line"><span class="section">[gcc]</span></span><br><span class="line"><span class="attr">cxxflags</span> = -ID:\Anaconda\MinGW</span><br></pre></td></tr></table></figure>
</li>
<li><p>其实没有cxxflags也没问题，主要是需要gcc环境。可以写完这个在dos下测试</p>
</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>gcc -v</span><br></pre></td></tr></table></figure>
<ol>
<li>至此已经全部完成。</li>
<li><p>测试，dos下输入python，再输入</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt;import theano</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功！</p>
</li>
</ol>
<h4 id="GPU配置"><a href="#GPU配置" class="headerlink" title="GPU配置"></a>GPU配置</h4><p>这几天又整合了GPU CUDA+GTX970</p>
<ol>
<li>在Anaconda官网上下载anaconda安装包,进行安装，傻瓜式安装，【Just me】，【next】,【next to end】</li>
<li>其中要是杀毒软件拦截，直接让通过插入系统环境变量。</li>
<li>打开dos窗口，用conda安装mingw,libpython，参照前面</li>
<li><p>在home目录，windows下就是你【计算机名】命名的文件夹创建名为.theano.txt</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[blas]</span></span><br><span class="line">ldflags =</span><br><span class="line"></span><br><span class="line"><span class="section">[gcc]</span></span><br><span class="line"><span class="attr">cxxflags</span> = -ID:\Anaconda\MinGW</span><br><span class="line"></span><br><span class="line"><span class="section">[nvcc]</span></span><br><span class="line"><span class="attr">fastmath</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">flags</span> = -LD:\Anaconda\libs</span><br><span class="line"><span class="attr">compiler_bindir</span> = C:\Program File(x86)\Microsoft Visual Studio <span class="number">11.0</span>\VC\bin</span><br><span class="line"></span><br><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">device</span> = gpu0</span><br><span class="line"><span class="attr">flaotX</span> = float32</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装CUDA和VS2010、VS2012或者VS2012Express,注意只有几个版本的VS支持<br><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA下载地址</a><br><a href="http://blog.csdn.net/yeyang911/article/details/17450963">CUDA安装教程</a><br><a href="http://www.xiazaiba.com/html/7678.html">VS2012</a></p>
</li>
</ol>
<p>6.成功！</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>GPU</tag>
        <tag>theano</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>冬月初八忆初恋</title>
    <url>/2015/12/18/%E5%86%AC%E6%9C%88%E5%88%9D%E5%85%AB%E5%BF%86%E5%88%9D%E6%81%8B/</url>
    <content><![CDATA[<blockquote>
<p>愿我们在彼此看不到的岁月里熠熠生辉</p>
</blockquote>
<p><img src="/uploads/love_poem.png" alt="love_poem.png"></p>
<h3 id="SHARE-IT"><a href="#SHARE-IT" class="headerlink" title="SHARE IT"></a>SHARE IT</h3><p>人总是在犹豫中失去。原本以为自己可以掌控事态的发展趋势。直到最珍惜的人离开，才发现只有在人成功的时候才能控局。</p>
<p>沉潜的时候你只能带上你的精锐亲兵，不要轻易进入不熟悉的地方。也许那就是鸿门宴！</p>
<p>失败不用解释。</p>
<p>没有人会在原地等你，奋斗吧，少年！</p>
<p>时间就像潮水，抹平你在海滩留下的脚印。曾经一去不复返。时间会抹平一切！留下的都是历史。</p>
<p>人生总有起起伏伏，起时宠辱不惊，心细思虑如常；落时默默忍让，等待黑暗前的黎明到来。</p>
<p>朋友们，愿你们把握现在，把握好身边的每一个人！不管你处于什么状态，乐观去生活，努力奋斗！</p>
<p>时间束缚不住你前行的脚步，只要你迈步向前，就能看见光明。</p>
]]></content>
      <categories>
        <category>Emotion</category>
      </categories>
      <tags>
        <tag>September</tag>
      </tags>
  </entry>
  <entry>
    <title>医疗健康管理系统APP</title>
    <url>/2016/03/01/%E5%8C%BB%E7%96%97%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FAPP/</url>
    <content><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>私人健康小助手，它需要为用户提供友好的操作交互界面，方面用户的使用，并给出实时的合适的评测和建议，提供附近医生的地点并聊天。我们在客户的功能需求主要包含一下内容：</p>
<ul>
<li>身体信息采集<br>用户能够提交自己的身体参数，如血糖，血压，心跳等8个参数，心跳可以通过手机后置摄像头测得，其他参数需要手动输入。</li>
<li>饮食图片分析<br>用户可以上传当天的所食食物图片，后台根据图片分析出该图片是什么菜，并给出菜的大致的营养含量，如蛋白质，热量，碳水化合物含量。</li>
<li>历史分析<br>根据用户每天提交的身体参数，app会通过后台数据挖掘的模型，分析出一个概率，比如糖尿病：32.5%，高血压：20%。将每次测得的最高概率记录生成历史记录。用户可以根据曲线是否平稳，知道自己的身体是不是有生病的趋势。</li>
<li>预测并给出生活和饮食建议<br>根据图片分析和身体信息分析，综合给出生活建议和饮食建议。如果该用户可能会有潜在的糖尿病风险，那么不要吃含糖量比较高的食物。</li>
</ul>
<h3 id="软件详情"><a href="#软件详情" class="headerlink" title="软件详情"></a>软件详情</h3><h4 id="启动页面"><a href="#启动页面" class="headerlink" title="启动页面"></a>启动页面</h4><p>图2-1中SHMS为开发的软件 私人健康小助手，首先查看手机是否连网，连网后，点击图标SHMS打开应用。<br><img src="/uploads/softwares/s0.jpg" alt="图2-1"><br>图2-1</p>
<h4 id="APP启动页面"><a href="#APP启动页面" class="headerlink" title="APP启动页面"></a>APP启动页面</h4><p>图2-2是APP启动欢迎页面，私人健康小助手，为页面初始化和数据准备做一个简单的缓冲。<br><img src="/uploads/softwares/s0_1.jpg" alt="图2-2"><br>图2-2</p>
<h4 id="程序页面介绍"><a href="#程序页面介绍" class="headerlink" title="程序页面介绍"></a>程序页面介绍</h4><h5 id="自我诊断页面"><a href="#自我诊断页面" class="headerlink" title="自我诊断页面"></a>自我诊断页面</h5><ol>
<li>输入手环或者智能终端测试的数据提交到后台分析得病的潜在概率。</li>
<li>用手机按住摄像头读取红色色素点傅里叶变换成心率曲线。<br>图2-3展示的是自我诊断页面(Self diagnose),用户可以通过点击右边的数字，会弹出对话框。可以填写自己的身体状况信息。<br><img src="/uploads/softwares/s2.jpg" alt="图2-3"><br>图2-3</li>
</ol>
<h5 id="信息输入"><a href="#信息输入" class="headerlink" title="信息输入"></a>信息输入</h5><p>图2-4展示的是信息输入页面，点击图2-3中数字，可以弹出如下的对话框，可以上下滑动，然后Confirm确认输入，Cancel取消输入。输入的数据会最终显示在图2-3中，点击按钮Submit会提交至图2-6所示的页面，预测结果会以饼状图显示。<br><img src="/uploads/softwares/s2_1.jpg" alt="图2-4"><br>图2-4</p>
<h5 id="脉搏测量"><a href="#脉搏测量" class="headerlink" title="脉搏测量"></a>脉搏测量</h5><p>点击图2-3HeartBeat右侧的数字会显示如图2-5所示的界面。界面会提示用户将手指按住后置摄像头，然后会出现心跳的频率。并将结果提交到图2-3<br>中。<br><img src="/uploads/softwares/s3_1.jpg" alt="图2-5"><br>图2-5</p>
<h5 id="预测结果展示"><a href="#预测结果展示" class="headerlink" title="预测结果展示"></a>预测结果展示</h5><p>图2-3中点击Submit,会将输入的身体状况信息提交至图2-6，并以饼图的形式展示，里面百分比数据是代表预测出该疾病的潜在发生概率，如果超过60%就表明身体状况有些危险。该页面有历史分析（Historic Analysis），点击该按钮，跳转至图2-13的历史分析图。<br><img src="/uploads/softwares/s4_2.jpg" alt="图2-6"><br>图2-6</p>
<p>输入不同的数据，会展示不同的概率饼图，图2-7展示就是血糖过高的一个实际例子，高达90%的概率，这基本已经确定是糖尿病人。</p>
<p><img src="/uploads/softwares/s4_2.jpg" alt="图2-7"><br>图2-7</p>
<h5 id="饮食分析"><a href="#饮食分析" class="headerlink" title="饮食分析"></a>饮食分析</h5><ul>
<li>读取并拍摄获取手机里的食物照片，分析食物的分量如含糖量，碳水化合物的含量。<br>图2-8中展示的是饮食分析页面。用户可以上传当天饮食情况，打出相关标签，并上传至服务器。分析菜的分量。点击Submit提交至图2-10。</li>
</ul>
<p><img src="/uploads/softwares/s5.jpg" alt="图2-8"><br>图2-8</p>
<p>点击图2-8中的小龙虾图片，会展示如图2-9底栏对话框。可以选择拍照，上传图片等功能。最终选择的图片会展示在图2-8小龙虾的位置。下面有一个文本框。这个是在后台无法识别该图片的时候。用户可以打一个标签，如小龙虾。这样后台可以给出一个如图2-10的图片。</p>
<p><img src="/uploads/softwares/s5_1.jpg" alt="图2-9"><br>图2-9</p>
<h5 id="食物摄入量"><a href="#食物摄入量" class="headerlink" title="食物摄入量"></a>食物摄入量</h5><p>图2-9中上传的图片和打出的标签，传入服务器后台，会给出一个营养成分柱状表。有卡路里，碳水化合物，脂肪，蛋白质，纤维素的含量。单位为100g。<br><img src="/uploads/softwares/s5_2.jpg" alt="图2-10"><br>图2-10</p>
<h5 id="健康建议"><a href="#健康建议" class="headerlink" title="健康建议"></a>健康建议</h5><ul>
<li>根据前两者给出相关饮食和生活建议。<br>图2-11中根据自我诊断和饮食分析建立的该用户的画像，分析给出适当的生活和饮食建议。点击右上方的时间图标同样可以看到图2-13的历史分析页面。记录用户使用以来的身体状况是否平稳。<br><img src="/uploads/softwares/s12.jpg" alt="图2-11"><br>图2-11</li>
</ul>
<p>图2-12展示的是不同的信息输入和饮食分析，会出现不同的分析结果。图2-11展示的是胆固醇高的用户，图2-12展示的是图2-7展示对应的血糖高的用户。<br><img src="/uploads/softwares/s13.jpg" alt="图2-12"><br>图2-12</p>
<h5 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h5><p>图2-13展示的是历史记录。每次用户测试之后都会有一个最高概率，如果最高概率超过阈值就会被记录在折线图中。此处展示的是没有设置阈值的情况。<br><img src="/uploads/softwares/s14.jpg" alt="图2-13"><br>图2-13</p>
<h5 id="查找医生"><a href="#查找医生" class="headerlink" title="查找医生"></a>查找医生</h5><ul>
<li>根据百度地图定位周边医生，发送自己的身体状况分析报告，并可以和医生在线聊天询问病情发展。<br>会根据百度地图提供附近医生的信息，可以向医生传输发送自己的数据，让医生给出一些合适的建议。此功能正在修改当中，未来会逐渐完善。</li>
</ul>
<h3 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h3><p>以上就是私人健康小助手的全部功能介绍。如有问题,欢迎发送邮件至chxu@m.scnu.edu.cn.</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>平凡之路收获不平凡</title>
    <url>/2017/03/22/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF%E6%94%B6%E8%8E%B7%E4%B8%8D%E5%B9%B3%E5%87%A1/</url>
    <content><![CDATA[<blockquote>
<p>美团春招有感</p>
</blockquote>
<h3 id="春招面试"><a href="#春招面试" class="headerlink" title="春招面试"></a>春招面试</h3><ol>
<li>lr</li>
<li>CNN</li>
<li>算法</li>
</ol>
<ul>
<li>经历这场面试，我终于明白，仅仅停留在表面，无法获得别人的青睐。<br>lr的特征、使用场景、优化过程、怎么处理过拟合？</li>
<li>CNN整体过程，里面的具体过程，有没有参考过Google论文。对Google里面的模型有多少了解。</li>
<li>算法说出自己的思路。</li>
</ul>
<p>虽然自己都有参与和设计过，都没有仔细思考为何要这么去做，有没有更多的解决。<br>数据挖掘工程师的思路还是比code重要些。</p>
<p>那个面试官给人的感觉很专业，考核的很有意义，给个赞！</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>insist</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Hexo创建历程</title>
    <url>/2015/11/21/%E6%88%91%E7%9A%84Hexo%E5%88%9B%E5%BB%BA%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>使用hexo在github上搭建个人博客,创建一个属于自己的个人空间。你可以分享技术，分享学术，也可以分享生活中的点点滴滴。让我们从这里开始吧！</p>
</blockquote>
<h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><p>1.首先申请一个<a href="github.com">github</a>账号<br>2.创建一个名为your_username.github.io的repository<br>2.然后安装<a href="http://git-scm.com/download/win">Git</a>和<a href="https://nodejs.org/en/">nodejs</a></p>
<h3 id="Git的相关配置"><a href="#Git的相关配置" class="headerlink" title="Git的相关配置"></a>Git的相关配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Paul&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;paul@sina.com&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;humingx@yeah.net&quot;</span></span><br></pre></td></tr></table></figure>
<p>连续输入三个回车，没问题就去~/.ssh/目录下，查看是否生成id_rsa和id_rsa.pub</p>
<h3 id="添加密钥到ssh-agent"><a href="#添加密钥到ssh-agent" class="headerlink" title="添加密钥到ssh-agent"></a>添加密钥到ssh-agent</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h3 id="复制密钥"><a href="#复制密钥" class="headerlink" title="复制密钥"></a>复制密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment">#测试密钥</span></span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub <span class="comment">#复制密钥</span></span><br></pre></td></tr></table></figure>
<h3 id="添加可信任电脑"><a href="#添加可信任电脑" class="headerlink" title="添加可信任电脑"></a>添加可信任电脑</h3><p>1.到你的github &gt;&gt; setttings &gt;&gt; SSH keys &gt;&gt; add key<br>2.右键鼠标粘贴进去，github设置到此ok。</p>
<h2 id="推荐参考网址"><a href="#推荐参考网址" class="headerlink" title="推荐参考网址"></a>推荐参考网址</h2><p>参考这几个网页<br>1.<a href="http://segmentfault.com/a/1190000002645623">git配置ssh</a><br>2.<a href="http://jingyan.baidu.com/article/14bd256e201f12bb6d261222.html">git创建静态网页</a><br>3.<a href="http://wsgzao.github.io/post/hexo-guide/#安装GIT">nodejs安装</a><br>4.<a href="http://segmentfault.com/a/1190000002632530">hexo常用命令</a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.这里命名方式注意！！！<br>    创建一个项目，命名比较特殊，格式：your_username_in_github.github.io<br>2.nodejs安装完一定要使用npm init来创建一个package.json<br>然后就是hexo设置在全局里面<br>3.不懂多问度娘或者Google!!</p>
]]></content>
      <categories>
        <category>FirstTry</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>斯坦福机器学习课程</title>
    <url>/2016/06/23/%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0CS229/</url>
    <content><![CDATA[<h3 id="COURSE-1"><a href="#COURSE-1" class="headerlink" title="COURSE 1"></a>COURSE 1</h3><ol>
<li>SUPERVISED LEANRNING — 分类<br>有先验知识。对事物的判断已有相关定论</li>
<li>UNSUPERVISED LEARNING — 聚类<br>没有先验知识。事先没有给定结论</li>
<li>REFOCEMENT LEANRNING<br>见[2]</li>
</ol>
<h3 id="COURSE-2"><a href="#COURSE-2" class="headerlink" title="COURSE 2"></a>COURSE 2</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">Notation</span><br><span class="line">m = #training examples</span><br><span class="line">x = <span class="string">&#x27;input&#x27;</span> <span class="keyword">variables</span>/features;</span><br><span class="line">y = <span class="comment">&#x27;output&#x27;</span> variables/<span class="string">&#x27;target&#x27;</span> <span class="keyword">variables</span></span><br><span class="line">(x,y) = training <span class="comment">example</span></span><br><span class="line">ith <span class="comment">training example = (xi,yi)</span></span><br></pre></td></tr></table></figure>
<h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="http://cs229.stanford.edu/materials.html">课程讲义</a></li>
<li><a href="http://www.cnblogs.com/jerrylead/archive/2011/05/13/2045309.html">增强学习</a></li>
</ol>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>最近面试集锦</title>
    <url>/2016/03/24/%E6%9C%80%E8%BF%91%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h3 id="蘑菇街二面"><a href="#蘑菇街二面" class="headerlink" title="蘑菇街二面"></a>蘑菇街二面</h3><blockquote>
<p>蘑菇街，在大学有女朋友的时候听说的，倡导一种弹性自由轻时尚女性购物文化。开始以为蘑菇街是阿里旗下，原来淘宝也只是供货商而已（PS:实话实说）。值得一提的是，相比阿里，我更喜欢蘑菇街的面试官的准时和HR对待面试人员的贴心程度！</p>
</blockquote>
<p>整个面试半个小时</p>
<ol>
<li>自我介绍</li>
<li>LinkedList和ArrayList的区别？LinkedList实现是单链表还是双链表结构？</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Doubly-linked list implementation of the &#123;@code List&#125; and &#123;@code Deque&#125;</span><br><span class="line"> * interfaces.  Implements all optional list operations, and permits all</span><br><span class="line"> * elements (including &#123;@code null&#125;).</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>JDK上面的解释：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>List 接口的链接列表实现。实现所有可选的列表操作，并且允许所有元素（包括 null）。除了实现 List 接口外，LinkedList 类还为在列表的开头及结尾 get、remove 和 insert 元素提供了统一的命名方法。这些操作允许将链接列表用作堆栈、队列或双端队列。</p>
<p>此类实现 Deque 接口，为 add、poll 提供先进先出队列操作，以及其他堆栈和双端队列操作。</p>
<p>所有操作都是按照双重链接列表的需要执行的。在列表中编索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。</p>
<p>注意，此实现不是同步的。如果多个线程同时访问一个链接列表，而其中至少一个线程从结构上修改了该列表，则它必须 保持外部同步。（结构修改指添加或删除一个或多个元素的任何操作；仅设置元素的值不是结构修改。）这一般通过对自然封装该列表的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 Collections.synchronizedList 方法来“包装”该列表。最好在创建时完成这一操作，以防止对列表进行意外的不同步访问，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> LinkedList(...));</span><br></pre></td></tr></table></figure>
<p>此类的 iterator 和 listIterator 方法返回的迭代器是快速失败 的：在迭代器创建之后，如果从结构上对列表进行修改，除非通过迭代器自身的 remove 或 add 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来不确定的时间任意发生不确定行为的风险。</p>
<p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何硬性保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。</p>
<p>此类是 Java Collections Framework 的成员。</p>
<ol>
<li>了解HashMap吗？与HashTable有什么区别？</li>
<li>Java里面的基本类型<br>基本类型：boolean char short byte int long float double(8个)</li>
<li>谈谈你是怎么学习android，遇到过哪些困难，如何解决的<br><a href="http://www.cnblogs.com/newcj/archive/2011/05/30/2061370.html">http://www.cnblogs.com/newcj/archive/2011/05/30/2061370.html</a></li>
<li>算法题：将一个数分解为素数的乘积<br>我写了一个很蹩脚的程序。。。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resolve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">            n = n / i;</span><br><span class="line">            print(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="阿里一面"><a href="#阿里一面" class="headerlink" title="阿里一面"></a>阿里一面</h3><blockquote>
<p>很普通的面试，每个问题问到你不懂为止。但是这个面试官是唯一一个认真看完我的简历的人，很感动！因为没提到的一个问题都是关于我的项目。虽然很不堪，但是自身的不足是明显的事情！所以继续加油准备。</p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4></blockquote>
<ol>
<li><a href="http://www.cnblogs.com/perfy/p/3820594.html">堆和栈的区别</a><br>成员变量存放在堆上<br>局部变量，Java栈上<br>操作数存放在栈顶，一般实现是物理CPU寄存器</li>
<li><a href="http://blog.csdn.net/stormlovetao/article/details/8665506">大根堆和小根堆</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4e0c21cc01010itp.html">B+树是什么数</a></li>
</ol>
<h4 id="IDEA和eclipse-ide有和区别"><a href="#IDEA和eclipse-ide有和区别" class="headerlink" title="IDEA和eclipse ide有和区别"></a>IDEA和eclipse ide有和区别</h4><h4 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h4><ol>
<li>熟悉的classLoader有哪些<br><a href="http://www.cnblogs.com/Lawson/archive/2012/07/31/2616623.html">http://www.cnblogs.com/Lawson/archive/2012/07/31/2616623.html</a><br><a href="http://ifeve.com/classloader/">http://ifeve.com/classloader/</a></li>
<li><a href="http://www.open-open.com/bbs/view/1320131360999/">Concurrent包有了解多少</a></li>
<li>CAS是怎么实现的<br><a href="http://www.tuicool.com/articles/zuui6z">http://www.tuicool.com/articles/zuui6z</a><br><a href="http://blog.csdn.net/hsuxu/article/details/9467651">http://blog.csdn.net/hsuxu/article/details/9467651</a><br><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-cas/">http://www.ibm.com/developerworks/cn/opensource/os-cn-cas/</a></li>
<li><p>JVM内存模型和回收机制<br><a href="http://www.cnblogs.com/dingyingsi/p/3760447.html">http://www.cnblogs.com/dingyingsi/p/3760447.html</a><br><a href="http://jbutton.iteye.com/blog/1569746">http://jbutton.iteye.com/blog/1569746</a></p>
</li>
<li><p>类什么时候被卸载<br><a href="http://www.cnblogs.com/mengdd/p/3594608.html">http://www.cnblogs.com/mengdd/p/3594608.html</a><br><a href="http://yhjhappy234.blog.163.com/blog/static/316328322011101413730764/">http://yhjhappy234.blog.163.com/blog/static/316328322011101413730764/</a></p>
</li>
<li>线程同步lock里面的一些方法<br><a href="http://www.cnblogs.com/dolphin0520/p/3923167.html">http://www.cnblogs.com/dolphin0520/p/3923167.html</a><br><a href="http://www.2cto.com/kf/201302/189404.html">http://www.2cto.com/kf/201302/189404.html</a></li>
</ol>
<h4 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h4><ol>
<li>Spring 的AOP和IOC分别是什么，日常使用在哪些方面了？<br>基本原则：业务逻辑代码应该写在 M 里面，而应用程序逻辑应该写在 C 里面。V 只是单纯的展示数据。<br>1：数据访问层：主要看数据层里面有没有包含逻辑处理，实际上它的各个函数主要完成各个对数据文件的操作。而不必管其他操作。<br>2：业务逻辑层：主要负责对数据层的操作。也就是说把一些数据层的操作进行组合。<br>3：表示层：主要对用户的请求接受，以及数据的返回，为客户端提供应用程序的访问。<br>而Struts只实现了MVC的View和Controller两个部分，Model部分需要开发者自己来实现，Struts提供了抽象类Action使开发者能将Model应用于Struts框架中。<br><a href="http://blog.csdn.net/kiss_vicente/article/details/6902879">http://blog.csdn.net/kiss_vicente/article/details/6902879</a><br><a href="http://bbs.csdn.net/topics/350251143">http://bbs.csdn.net/topics/350251143</a></li>
<li>hibernate缓存机制？<br><a href="http://zhidao.baidu.com/link?url=5nqJQAJH4UahoxwzeTs-G1enHJ_s-5mCer-Xr91y5PQ7KmDtDjS0r_coyKxQ2qBtCrXJVmuCYkNpE2NWyCaLBa">http://zhidao.baidu.com/link?url=5nqJQAJH4UahoxwzeTs-G1enHJ_s-5mCer-Xr91y5PQ7KmDtDjS0r_coyKxQ2qBtCrXJVmuCYkNpE2NWyCaLBa</a><br><a href="http://blog.csdn.net/defonds/article/details/2308972">http://blog.csdn.net/defonds/article/details/2308972</a></li>
<li>谈谈你是怎么学习android，遇到过哪些困难，如何解决的？<br><a href="http://blog.csdn.net/mirkerson/article/details/7238815">http://blog.csdn.net/mirkerson/article/details/7238815</a><br><a href="http://blog.csdn.net/hpoi/article/details/4629065">android生命周期</a></li>
</ol>
<h3 id="网易笔试（部分回忆）"><a href="#网易笔试（部分回忆）" class="headerlink" title="网易笔试（部分回忆）"></a>网易笔试（部分回忆）</h3><ol>
<li>观察者模式，设计模式20+！</li>
<li>关于Eden,From Survivor,To Survivor,Old计算<br>Xms指你的程序的初始化内存大小，Xmx指定你的程序占用的最大内存。单位默认字节，可以采用k,m做为单位。<br>Xmn是指分给年轻代大小<br>SurvivorRation:是Eden：Survivor比例.<br>-XX:NewRatio=4，年轻代和老年代的比值是1:4<br>-XX:MaxPermSize=16m:设置持久代大小为16m。<br>-XX:MaxTenuringThreshold=0：设置垃圾最大年龄。</li>
<li>ClassNotFoundException和ClassNotDefException区别<br>一个是加载时候没找到，一个是在连接时候没找到</li>
<li>shell语言里面的权限<br><a href="http://www.cnblogs.com/younes/archive/2009/11/20/1607174.html">http://www.cnblogs.com/younes/archive/2009/11/20/1607174.html</a></li>
</ol>
<h3 id="java学习"><a href="#java学习" class="headerlink" title="java学习"></a>java学习</h3><ol>
<li><a href="http://www.zhihu.com/question/19851109">知识图谱</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3592500.html">关于equals和==的最佳解释</a></li>
</ol>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>最近校招算法题整理</title>
    <url>/2016/04/20/%E6%9C%80%E8%BF%91%E6%A0%A1%E6%8B%9B%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="幂次"><a href="#幂次" class="headerlink" title="幂次"></a><a href="http://blog.sina.com.cn/s/blog_638f5b130102dr0t.html">幂次</a></h3><p>判断一个数的幂次</p>
<blockquote>
<p>个位数是2的n次方的尾数循环为：2486 2486 2486 2486….<br>个位数是3的n次方的尾数循环为：3971 3971 3971 3971….<br>[公式] : n&amp;(n-1)判断n中有多少个1;</p>
</blockquote>
<ul>
<li>判断一个数是2的幂次<br>[code]</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is2sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">1000</span>;i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = is2sN(i);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d \n&quot;</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is2sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &amp; (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>判断一个数是3的幂次<br>[code]</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;math.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is3sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">1000</span>;i ++)&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = is3sN(i);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d  %d \n&quot;</span>,i,flag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is3sN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">floor</span>(a) == <span class="built_in">ceil</span>(a))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="完全数-梅森素数"><a href="#完全数-梅森素数" class="headerlink" title="[完全数]梅森素数"></a>[完全数]梅森素数</h3><p>大数学家欧几里德曾推算出完全数的获得公式：如果2^p-1质数,那么(2^p-1)2^(p-1)便是一个完全数.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">example</span>:</span><br><span class="line">         <span class="attribute">p</span>=<span class="number">2</span>,<span class="number">2</span>^p-<span class="number">1</span>=<span class="number">3</span>是质数,(<span class="number">2</span>^p-<span class="number">1</span>)*<span class="number">2</span>^(p-<span class="number">1</span>)=<span class="number">3</span>*<span class="number">2</span>=<span class="number">6</span></span><br><span class="line">         <span class="attribute">p</span>=<span class="number">3</span>,<span class="number">2</span>^p-<span class="number">1</span>=<span class="number">7</span>是质数,(<span class="number">2</span>^p-<span class="number">1</span>)*<span class="number">2</span>^(p-<span class="number">1</span>)=<span class="number">7</span>X<span class="number">4</span>=<span class="number">28</span></span><br><span class="line">         <span class="attribute">p</span>=<span class="number">5</span>,<span class="number">2</span>^p-<span class="number">1</span>=<span class="number">31</span>是质数,(<span class="number">2</span>^p-<span class="number">1</span>)*<span class="number">2</span>^(p-<span class="number">1</span>)=<span class="number">31</span>X<span class="number">16</span>=<span class="number">496</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是2^p-1什么条件下才是质数呢?当2^p-1是质数的时候,称其为梅森素数!顾名思义,就是梅森第一个系统地研究这种形式的素数的!事实上,至今(2006.9.4)为止,人类只发现了44个梅森素数,也就是只发现了44个完全数!</p>
</blockquote>
<p>[算法]：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Paul on 2016/4/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    #include <span class="string">&quot;iostream&quot;</span></span><br><span class="line">    <span class="built_in">int</span> isPerfectNumber(<span class="built_in">int</span> n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> main()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10000</span>;i ++)&#123;</span><br><span class="line">            <span class="built_in">int</span> flag = isPerfectNumber(i);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">                printf(<span class="string">&quot;%d \n&quot;</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> isPerfectNumber(<span class="built_in">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">6</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n/<span class="number">2</span> + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>)sum += i;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习|冷启动问题</title>
    <url>/2020/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B7%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>冷启动（ cold start ）在推荐系统中表示该系统积累数据量过少，无法给新用户作个性化推荐的问题，这是产品推荐的一大难题。每个有推荐功能的产品都会遇到冷启动的问题。一方面，当新商品时上架 会遇到冷启动的问题，没有收集到任何一个用户对其浏览、点击或者购买的行为，也无从判断如何将商品进行推荐；另一方面，新用户到来的时候，如果没有他在应用上的行为数据，也无法预测其兴趣，如果给用户的推荐千篇律，没有亮点，会使用户在一开始就对产品失去兴趣，从而放弃使用。所以在冷启动的时候要同时考虑用户的冷启动和物品的冷启动。</p>
</blockquote>
<h2 id="用户冷启动"><a href="#用户冷启动" class="headerlink" title="用户冷启动"></a>用户冷启动</h2><p>用户冷启动主要解决如何给新用户作个性化推荐的问题。</p>
<ul>
<li>利用用户账号信息，比如邮箱。去关联整个集团的公共特征库。</li>
<li>利用手机IMEI UDID IDFA号唯一标识码关联。有些公司对匿名用户的数据也会有日志收集。根据匿名的用户行为，进行关联推荐。也可以通过第三方广告公司去购买用户特征数据。</li>
<li>制造选工页，让用户选择自己感兴趣标签。比如说斗鱼直播，在首次登陆之后，用户会收到一个选择页面，你可以选择<code>英雄联盟</code>，<code>二次元</code>，<code>绝地求生</code>等标签，然后冷启动会立即选择这几个品类的热门数据进行补充。</li>
</ul>
<h2 id="物品冷启动"><a href="#物品冷启动" class="headerlink" title="物品冷启动"></a>物品冷启动</h2><p>物品冷启动主要解决如何将新的物品推荐给可能对它感兴趣的用户这一问题。</p>
<ul>
<li>利用物品的内容、分类信息。通过标签关联。</li>
<li>利用专家标注的数据，将物品的特征加入到实时特征库。</li>
<li>运营直接干预，对新出现的物品，进行人工干预强推。</li>
</ul>
<h2 id="系统冷启动"><a href="#系统冷启动" class="headerlink" title="系统冷启动"></a>系统冷启动</h2><p>推荐系统冷启动，可以通过人工标注的比较好的热门数据，作为兜底推荐。在推荐数据为空的情况下，通过兜底推荐也能保证用户和物品被推荐出去。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>冷启动</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习|实时推荐架构简介</title>
    <url>/2020/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E6%97%B6%E6%8E%A8%E8%8D%90%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="实时画像"><a href="#实时画像" class="headerlink" title="实时画像"></a>实时画像</h2><h3 id="最大期望（-EM-）算法"><a href="#最大期望（-EM-）算法" class="headerlink" title="最大期望（ EM ）算法"></a>最大期望（ EM ）算法</h3><h2 id="实时推荐算法"><a href="#实时推荐算法" class="headerlink" title="实时推荐算法"></a>实时推荐算法</h2><h2 id="推荐架构"><a href="#推荐架构" class="headerlink" title="推荐架构"></a>推荐架构</h2><h3 id="离线计算"><a href="#离线计算" class="headerlink" title="离线计算"></a>离线计算</h3><h3 id="近线计算"><a href="#近线计算" class="headerlink" title="近线计算"></a>近线计算</h3><h3 id="在线计算"><a href="#在线计算" class="headerlink" title="在线计算"></a>在线计算</h3><h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><p>HBase 用于实时获取画像，提供高并发下的毫秒级返回。<br>Elasticsearch 用于召回层，尽可能在短时间内根据用户画像标签初筛合适的商品作为候选集。<br>Hive 用于算法同学训练模型提供统一的数据源，该存储可以不实时，根据需求每天同步一份即可。</p>
<p><a href="https://www.jianshu.com/p/7a3349d1e3cc">推荐系统总结6（系统架构）</a><br><a href="https://cloud.tencent.com/developer/article/1118880">手Q游戏中心的个性化推荐实战</a></p>
<h2 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h2><ol>
<li><a href="https://www.biaodianfu.com/tencentrec-real-time-stream-recommendation-in-practice.html">TencentRec: Real-time Stream Recommendation in Practice论文解读</a></li>
<li><a href="https://www.biaodianfu.com/real-time-video-recommendation-exploration.html">Real-time Video Recommendation Exploration论文解读</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1380402">Youtube 深度学习推荐系统论文</a></li>
<li><a href="https://daiwk.github.io/posts/links-navigation-recommender-system.html">推荐系统论文合集</a></li>
<li><a href="https://github.com/NLP-LOVE/ML-NLP">算法基础</a></li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>实时推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习|特征工程基本框架</title>
    <url>/2020/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>在推荐系统中，特征工程扮演着重要的角色。俗话说数据和特征决定了机器学习算法的上限，而模型、算法的选择和优化只是在不断逼近这个上限。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="https://www.jiqizhixin.com/articles/2019-12-11-5">浅谈微视推荐系统中的特征工程</a></li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>特征工程</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习1000问</title>
    <url>/2020/04/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01000%E9%97%AE/</url>
    <content><![CDATA[<h2 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h2><p>利用大量的数据样本，使得计算机通过不断的学习获得一个模型，用来对新的未知数据做预测。</p>
<h2 id="机器学习有哪些类别？"><a href="#机器学习有哪些类别？" class="headerlink" title="机器学习有哪些类别？"></a>机器学习有哪些类别？</h2><blockquote>
<p>机器学习分为监督学习，非监督学习和强化学习。<br>监督学习：同时将数据样本和标签输入给模型，模型学习到数据和标签的映射关系，从而对新数据进行预测。监督学习又分为分类问题和回归问题。</p>
</blockquote>
<p>非监督学习：只有数据，没有标签，模型通过总结规律，从数据中挖掘出信息。</p>
<h2 id="逻辑回归相比于线性回归，有何异同？"><a href="#逻辑回归相比于线性回归，有何异同？" class="headerlink" title="逻辑回归相比于线性回归，有何异同？"></a>逻辑回归相比于线性回归，有何异同？</h2><ul>
<li>首先逻辑回归处理的是分类问题，线性回归处理的是回归问题，这是两者最本质的区别</li>
<li>线性回归是一种拟合函数，逻辑回归是一种预测函数。</li>
<li>线性回归求参采用最小二乘法，逻辑回归求参采用梯度下降。</li>
</ul>
<h2 id="树形结构为什么不需要归一化？"><a href="#树形结构为什么不需要归一化？" class="headerlink" title="树形结构为什么不需要归一化？"></a>树形结构为什么不需要归一化？</h2><p>因为数值缩放不影响分裂点位置，对树模型的结构不造成影响。树模型是不能进行梯度下降的，因为构建树模型（回归树）寻找最优点时是通过寻找最优分裂点完成的，因此树模型是阶跃的，阶跃点是不可导的，并且求导没意义，也就不需要归一化。归一化对模型没有影响。<br><strong>问题来了，为何非树形结构比如 Adaboost、SVM、LR、Knn、KMeans 之类则需要归一化呢？</strong><br>对于线性模型，特征值差别很大时，比如说 LR ，我有两个特征，一个是 (0,1) 的，一个是 (0,10000) 的，运用梯度下降的时候，损失等高线是椭圆形，需要进行多次迭代才能到达最优点。<br>但是如果进行了归一化，那么等高线就是圆形的，促使 SGD 往原点迭代，从而导致需要的迭代次数较少。在实际应用中，通过梯度下降法求解的模型一般都是需要归一化的，比如线性回归、logistic回归、KNN、SVM、神经网络等模型。</p>
<h2 id="有哪些归一化方法"><a href="#有哪些归一化方法" class="headerlink" title="有哪些归一化方法"></a>有哪些归一化方法</h2><ul>
<li>线性归一化</li>
<li><p>标准差归一化</p>
</li>
<li><p>非线性归一化<br>幂律分布可用log(v, 2) / log(max, 2)<br>指数归一化<br>反正切函数 arctan</p>
</li>
</ul>
<h2 id="新内容，曝光较少的内容的排序问题如何解决"><a href="#新内容，曝光较少的内容的排序问题如何解决" class="headerlink" title="新内容，曝光较少的内容的排序问题如何解决?"></a>新内容，曝光较少的内容的排序问题如何解决?</h2><p>对于某件商品或广告X，其是否被点击是一个伯努利分布（Bernoulli）</p>
<script type="math/tex; mode=display">
  X ~ Ber(r), r是商品或者广告的被点击概率</script><script type="math/tex; mode=display">
\hat{r} = \frac{ C+\alpha }{ I + \alpha + \beta}</script><script type="math/tex; mode=display">
\alpha = \bar{X} \left(\frac{\bar{X}(1-\bar{X})}{S^2} - 1\right)</script><script type="math/tex; mode=display">
\beta = (1-\bar{X})\left(\frac{\bar{X}(1-\bar{X})}{S^2} - 1\right)</script><p>求解$\alpha, \beta$</p>
<p>然而，Beta分布除了两个显性的重要参数α和β外，还有两个相对隐形但同样重要的参数，平均值和中位数，通过平均值和中位数可以唯一确定α和β的值，它们的数学关系如下：</p>
<script type="math/tex; mode=display">mean = \frac{\alpha}{\alpha + \beta}</script><script type="math/tex; mode=display">mode = \frac{\alpha - 1}{ \alpha + \beta -1}</script><h3 id="威尔逊平滑"><a href="#威尔逊平滑" class="headerlink" title="威尔逊平滑"></a>威尔逊平滑</h3><p>平滑，曝光次数n，点击率p<br>它只适用于样本较多的情况（np &gt; 5 且 n(1 − p) &gt; 5），对于小样本，它的准确性很差。</p>
<h2 id="类别特征有哪些编码方式？"><a href="#类别特征有哪些编码方式？" class="headerlink" title="类别特征有哪些编码方式？"></a>类别特征有哪些编码方式？</h2><ul>
<li><p>独热编码<br>独热编码通常用于处理类别间不具有大小关系的特征，每个特征取值对应一维特征，能够处理缺失值，在一定程度上也起到了扩充特征的作用。但是当类别的数量很多时，特征空间会变得非常大。在这种情况下，一般可以用 PCA 等方法进行降维。</p>
</li>
<li><p>散列编码<br>对于有些取值特别多的类别特征，使用独热编码得到的特征矩阵非常稀疏，再加上如果还有笛卡尔积等构造的组合特征，会使得特征维度爆炸式增长。使用2-3倍取模。</p>
</li>
<li><p>打分排名编码</p>
</li>
</ul>
<h2 id="特征降维方法？"><a href="#特征降维方法？" class="headerlink" title="特征降维方法？"></a>特征降维方法？</h2><ul>
<li>频次阶段技术<br>比如文档中某个词语出现的次数不超过5次，则不计入特征中。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://www.jianshu.com/p/b3e9b300a100">推荐系统-威尔逊区间法</a></li>
<li><a href="http://sakigami-yang.me/2017/12/27/rating-model-considering-user-count/">考虑评分人数的用户评分模型</a></li>
<li>Click-Through Rate Estimation for Rare Events in Online Advertising</li>
<li><a href="https://www.zhihu.com/question/264165760">如何用通俗的语言解释CTR和推荐系统中常用的Feature Hashing</a></li>
<li>Feature hashing for large scale multitask learning.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>流式数据处理kafka</title>
    <url>/2016/08/25/%E6%B5%81%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86kafka/</url>
    <content><![CDATA[<blockquote>
<p>Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。<br>我想它应该很适合按热度进行新闻推荐和网易云音乐排行，常用地模型等。最近遇到这些问题，还没解决。。。</p>
</blockquote>
<h3 id="CENTOS"><a href="#CENTOS" class="headerlink" title="CENTOS"></a>CENTOS</h3><ul>
<li>基本命令</li>
</ul>
<ol>
<li><p>包管理</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> yum install [<span class="type">package</span>]</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> yum install net<span class="literal">-tools</span></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> yum install <span class="built_in">wget</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">wget</span> [<span class="type">link</span>]</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">wget</span> http://www.slf4j.org/dist/slf4j<span class="literal">-1</span>.<span class="number">7.6</span>.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>进程查找</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">ps</span> <span class="literal">-ef</span>|grep [<span class="type">name</span>]</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">ps</span> <span class="literal">-ef</span>|grep kafka</span><br></pre></td></tr></table></figure></li>
<li><p>进程杀死</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">kill</span> [<span class="type">pid</span>]</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">kill</span> <span class="number">5043</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重命名/移动命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">mv</span> a/c b    <span class="comment"># 将c移动到b目录下</span></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">mv</span> kafka /usr/local</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件 </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">rm</span> [<span class="type">file</span>] </span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-rf</span> [<span class="type">folder</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建软连接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> ln <span class="literal">-s</span> a b  <span class="comment"># 如同windows下的快捷方式</span></span><br><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-rf</span> b   <span class="comment"># 删除软连接 </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建立硬链接</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span> ln a b</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span> ln /usr/local/kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src kafka</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看全部路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span><span class="variable">$</span> <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解压 </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$$ unzip slf4j<span class="number">-1.7</span><span class="number">.6</span>.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压 </p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span> tar zcvf zzz.tar.gz</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p>首先安装zookeeper<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 启动并开启端口服务</span><br><span class="line">[<span class="symbol">root@</span>localhost  zookeeper<span class="number">-3.4</span><span class="number">.6</span>]# bin/zkServer.sh start</span><br><span class="line">[<span class="symbol">root@</span>localhost  zookeeper<span class="number">-3.4</span><span class="number">.6</span>]# bin/zkCli.sh -server <span class="number">10.0</span><span class="number">.2</span><span class="number">.15</span>:<span class="number">2181</span></span><br></pre></td></tr></table></figure></p>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><ul>
<li><p>首先kafka安装</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 后台启动</span><br><span class="line">[<span class="symbol">root@</span>localhost kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src]# nohup bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</span><br><span class="line">[<span class="symbol">root@</span>localhost kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src]# nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class="line"># 创建主题</span><br><span class="line">[<span class="symbol">root@</span>localhost kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src]# bin/kafka-topics.sh --create --zookeeper <span class="number">10.0</span><span class="number">.2</span><span class="number">.15</span>:<span class="number">2181</span> --replication-factor <span class="number">1</span> --partitions <span class="number">1</span> --topic LJ200</span><br><span class="line">## 查看现有主题</span><br><span class="line">[<span class="symbol">root@</span>localhost kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src]# bin/kafka-topics.sh --list --zookeeper <span class="number">10.0</span><span class="number">.2</span><span class="number">.15</span>:<span class="number">2181</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src]# bin/kafka-console-producer.sh --broker-list <span class="number">10.0</span><span class="number">.2</span><span class="number">.15</span>:<span class="number">9092</span> --topic test</span><br><span class="line"># 然后输入一些数据如hello world</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>消费者<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 再开一个终端</span><br><span class="line">[<span class="symbol">root@</span>localhost kafka<span class="number">-0.8</span><span class="number">.1</span><span class="number">.1</span>-src]# bin/kafka-console-consumer.sh --zookeeper <span class="number">10.0</span><span class="number">.2</span><span class="number">.15</span>:<span class="number">2181</span> --topic test --<span class="keyword">from</span>-beginning</span><br><span class="line"># 自动打印出生产者的数据，从头开始打印</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>暂时进展到这里！敬请期待！</p>
<h3 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h3><p>[1]. <a href="http://www.cnblogs.com/likehua/p/3999538.html">kafka入门</a><br>[2]. <a href="http://www.cnblogs.com/likehua/p/3999600.html">zookeeper</a></p>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>KAFKA</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习个人学习笔记(1)</title>
    <url>/2016/09/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h3 id="关于epoch、iteration、batchsize"><a href="#关于epoch、iteration、batchsize" class="headerlink" title="关于epoch、iteration、batchsize"></a>关于epoch、iteration、batchsize</h3><ol>
<li>batchsize : 批大小。在深度学习中，一般采用SGD训练，即每次训练在训练集中取batchsize个样本训练；</li>
<li>iteration : 1个iteration等于使用batchsize个样本训练一次；</li>
<li>epoch : 1个epoch等于使用训练集中的全部样本训练一次；</li>
</ol>
<p>eg : 训练集有1000个样本，batchsize=10。那么,训练完整个样本集需要100次iteration，1次epoch。</p>
<h3 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h3><p>[1]. <a href="https://www.zhihu.com/question/32673260">深度机器学习中的batch的大小对学习效果有何影响？</a></p>
]]></content>
      <categories>
        <category>DL</category>
      </categories>
      <tags>
        <tag>DEEPLEARNING</tag>
        <tag>KERAS</tag>
      </tags>
  </entry>
  <entry>
    <title>被世界遗忘的角落</title>
    <url>/2015/11/23/%E8%A2%AB%E4%B8%96%E7%95%8C%E9%81%97%E5%BF%98%E7%9A%84%E8%A7%92%E8%90%BD/</url>
    <content><![CDATA[<blockquote>
<p>当一个人不能拥有的时候，他唯一能做的便是不要忘记<br>我们总以为自己很特别，其实就是别人眼中的普通人<br>如果有一天： 你不再寻找爱情，只是去爱；你不再渴望成功，只是去做；你不再追求成长，只是去修；一切才真正开始！</p>
</blockquote>
<h2 id="遇见"><a href="#遇见" class="headerlink" title="遇见"></a>遇见</h2><h3 id="心动-—-恩施"><a href="#心动-—-恩施" class="headerlink" title="心动 — 恩施"></a>心动 — 恩施</h3><blockquote>
<p>那是一个秋天，风儿那么缠绵</p>
</blockquote>
<p>总是不想抛头露面的我，扭扭咧咧的拿着我准备的竞聘演讲稿。<br>“大家好，我叫。。” 声音忽然有忽然没有。就这样在零星的掌声中，低着头完成了竞聘演讲。历史当中，他为数不多的站在讲台上说话。涨红了脸，手里的汗也浸透了他的讲稿。<br>还没等他坐稳，又一次掌声响起。一个眉目清秀，面容姣好，身材适中的女孩子走上讲台。从容不迫，面带笑容，声音甜美，他听得如此如醉。第一次被她那种气质所打动，也由此而心动。<br>最后给了选票，他任职了班考勤委员，她任团委组织纪检委员。</p>
<p>从登台那天开始，大学的生活由此拉开序幕。同时，也遇见了那个女孩和从未有过的心动。</p>
<h3 id="圣诞节前夜-—-苹果"><a href="#圣诞节前夜-—-苹果" class="headerlink" title="圣诞节前夜 — 苹果"></a>圣诞节前夜 — 苹果</h3><p>“圣诞节啊，准备买点什么？”<br>“不知道，好多卖苹果的，在寝室呆着无聊，咱们一起去看看！”<br>沿着校道走出学校，好多好多卖苹果的小贩，第一次发现学校这么大规模的圣诞节。还是第一次过圣诞，这么多包装精美的苹果，红的，紫的。平时肃杀的学校瞬间有了不一样的气氛，空气中流动的多了一份温情，仿佛有一种力量催动我前行，动情。<br>“帅哥，送谁呢？”，正当他犹豫，心底立马浮现了一个好看的样子。<br>“送女生”<br>“送女生啊，嘿嘿，来这个”，那小商贩露出诡异的笑容。<br>他选了选，“那就来这个！”<br>选了一个好看的苹果，如获至宝。</p>
<h3 id="圣诞节前夜-—-雨伞"><a href="#圣诞节前夜-—-雨伞" class="headerlink" title="圣诞节前夜 — 雨伞"></a>圣诞节前夜 — 雨伞</h3><p>快女生宿舍楼前，也不知道她在哪一栋，打个电话。<br>手抖抖拨通了电话，激动又害怕。<br>“喂”<br>“今天平安夜，我买了个苹果，准备送给你，下来拿一下吧！”<br>“噢”<br>虽然语言简短，害怕的心情一下没了，激动的心情溢于言表。<br>你撑着一把伞，低着头，接走了我的礼物，说了声“谢谢你”，转身就走了。<br>这样温和的气质简直绝了，眼望着黑色的伞，弱弱的身影缓缓的走向宿舍楼下。<br>突然觉得好冷，原来自己忘记了撑伞。</p>
<h2 id="似有若无"><a href="#似有若无" class="headerlink" title="似有若无"></a>似有若无</h2><h3 id="追求-—-襄阳-七夕"><a href="#追求-—-襄阳-七夕" class="headerlink" title="追求 — 襄阳 七夕"></a>追求 — 襄阳 七夕</h3><blockquote>
<p>你存在，我深深的脑海里，我的心里，我的梦里，我的歌声里…</p>
</blockquote>
<p>正在参加课程培训的他，由于培训老师回家休假。获得7天的休假，顿时兴奋了。<br>“我要到襄阳来找你！”他说<br>乘坐5个小时的卧铺来到了襄阳，正值夏末。晚上微风徐徐，俩人一言一语走在襄阳的石板道路上。<br>万达 — 大得有点突破他的想象，之前没有逛过。<br>韩国料理 — 点了好多寿司，一边说一边聊，吃着撑死了。<br>诸葛亮广场 — 广场舞，打羽毛球<br>柬埔寨 — 那时胖胖的你，羞涩的拍照<br>襄阳牛肉面馆吃早点 — 正宗，好吃，牛肉多。虽然下着小雨，虽然只有我们两个，但有一种下雨天和襄阳牛肉面很配的感觉<br>路边店正放着那首歌，记录他的朦胧恋情，“你存在，我深深的脑海里，我的心里，我的梦里，我的歌声里…”</p>
<h2 id="黄金时代"><a href="#黄金时代" class="headerlink" title="黄金时代"></a>黄金时代</h2><h3 id="热恋-—-恩施城"><a href="#热恋-—-恩施城" class="headerlink" title="热恋 — 恩施城"></a>热恋 — 恩施城</h3><p>古老而神秘的恩施城，那时破落别致，我的母校就在这片大山之中，孕育了一代又一代的优秀学子。</p>
<p>32号火锅店 — 第一次正式约会<br>凤凰山 — 一起学溜冰；冬天复习功课的时候爬爬山，晒晒太阳。<br>枫香坡 — 烧烤，野炊，醉醺醺的我，竟然不知道怎么上车了，烂醉如泥。还照了一张那么龊的相片！<br>柳州城 — 青涩的她他,有一匹骏马，有她和它的合照，一个没有水的木桥，站着是文艺瘦弱的那个他。<br>女儿城 — 新修的商业区，还在完工中，宁静诡异。借着月色，背着她走了很长一段夜路。<br>德克士 — 七夕的粉色气球<br>疯狂土豆 — 逢到即买<br>附近餐馆 — 基本吃遍。最好吃还是香辣虾888，还有一个你为了庆祝他的生日点的虾蟹馆，皇家御厨什么的，忘记名字了，那家很不错。</p>
<h3 id="热恋-—-民院-—-那些如沐春风般的日子"><a href="#热恋-—-民院-—-那些如沐春风般的日子" class="headerlink" title="热恋 — 民院 — 那些如沐春风般的日子"></a>热恋 — 民院 — 那些如沐春风般的日子</h3><p>一起吃过的饭，睡过的觉，滚过的草坪，看过的书。那儿有过我们的一切。</p>
<p>五环 — 冬天一起复习看过的书，晒过的太阳，听过的歌。夕阳下打过的羽毛球，乒乓球。一起跑过的步<br>土操场 — 下雨天，你不想走。最后还是走过一次，还想背着我，我还是有点重。一起吃过的一品香的肉末茄子，香菇肉丝。<br>四食堂，教工食堂 — 拉面，土豆肥肠，味道堪称一绝。<br>英语课 — 蹭到你们班，结果我被点到了。<br>马哲 — 公共课室，那时文艺青年的我，还和你交流看书《微微一笑很倾城》《致我们终将逝去的青春》等，动漫等，只为靠近你。<br>《何以笙箫默》 — 花式虐心终修成眷侣的好书，你的最爱。<br>期末 — 文艺路线开启，非学霸模式，坐在化环院，看窗外的一种很好看的粉白色花。后来，查了才知道是合欢花。<br>合欢花花语 — 象征永远恩爱、两两相对、是夫妻好合。<br>美院毕业音乐会 — 听着萧敬腾《王妃》，热的不行。<br>皮蛋瘦肉粥 — 生平第一次吃皮蛋粥，好温暖，幸福。很感动！</p>
<h3 id="倒数第二个暑假-—-兼职"><a href="#倒数第二个暑假-—-兼职" class="headerlink" title="倒数第二个暑假 — 兼职"></a>倒数第二个暑假 — 兼职</h3><h4 id="印象地板"><a href="#印象地板" class="headerlink" title="印象地板"></a>印象地板</h4><p>吃遍了学校附近所有的餐馆，也自己动手做了不少好吃的火锅，虽然我下厨比较少。</p>
<p>拉客 — 很多客人，第一次没脸的请别人帮忙。至此之后我的脸皮越来越厚了。</p>
<h3 id="倒数第一个暑假-—-考研"><a href="#倒数第一个暑假-—-考研" class="headerlink" title="倒数第一个暑假 — 考研"></a>倒数第一个暑假 — 考研</h3><p>正在培训的我，选择了考研。我脑袋被门挤了，对，被驴踢了<br>痛苦，折磨，狂躁，低沉，静心。<br>作息相当规律，吃饭一日三餐，每天三点一线。<br>此处略去N个字…</p>
<h3 id="游戏人生"><a href="#游戏人生" class="headerlink" title="游戏人生"></a>游戏人生</h3><blockquote>
<p>赢了天下输了她</p>
</blockquote>
<h4 id="CROSS-FIRE"><a href="#CROSS-FIRE" class="headerlink" title="CROSS FIRE"></a>CROSS FIRE</h4><p>那是我还没有电脑，你借给我玩了一个星期。此后就染上了玩游戏的恶习，去网吧，和室友一起玩。<br>因此室友从床上摔下来，在医院住了一个星期，幸好没事，我再也没玩它了。</p>
<h4 id="DNF"><a href="#DNF" class="headerlink" title="DNF"></a>DNF</h4><p>也是周末没事，室友去网吧，我也跟着去了，之前都是不会太迷恋游戏。<br>在他们的带领下，我玩上了升级的游戏。一起打怪升级。<br>在我的怂恿下，你也玩起了这个游戏。也有过一段，没日没夜的升级。<br>为了给她游戏人物买时装，在每天早晨室友都还没起床，我就刷上了金钱，坚持了一个半月，终于筹齐7000kw游戏币。<br>室友都说我什么时候变富有了，我只是笑笑。</p>
<p>后来，在买完时装后，你说你只是想陪我玩，我也老是说她。后来都没玩了。我也一时没有喜好。</p>
<h4 id="LOL"><a href="#LOL" class="headerlink" title="LOL"></a>LOL</h4><p>你说你想玩LOL,我见室友玩的不知白天黑夜，很是担心。我说这个游戏不适合女生玩。<br>后来你又提到过几次，于是我试着玩了玩。游戏确实很不错，我也因此沉溺其中。</p>
<p>之前我一直认为游戏胜利最重要，在为取得胜利前别妨碍我。后来，发现只是个气氛、消遣而已，和喝酒一样。<br>别逞英豪，多想想身边人！</p>
<p>这注定在大学生活中以及情感生活中留下的最大败笔！</p>
<h2 id="武汉-—-虎泉"><a href="#武汉-—-虎泉" class="headerlink" title="武汉 — 虎泉"></a>武汉 — 虎泉</h2><blockquote>
<p>人世间有百媚千抹<br>我独爱爱你那一种 </p>
</blockquote>
<p>那天你化了美美的妆，当我第一眼看见你的时候，我看傻了，太美了。当我反应过来的时候我已经掉队了。<br>一路上，各处逛街。我一路上也就看看你，像个傻X一样默默的看着。</p>
<p>光谷广场 — 烧烤，噢，我又小气了，你不喜欢吃田螺烧烤，然而我一个人尴尬的吃完了。<br>西班牙风情街 — 拍照，着实那尴尬的场面为何不给我面子。哎，忍不下，没心情。自己拍<br>欢乐谷 — 一起坐过山车，吓坏你了。没有下次了，我保证！</p>
<h2 id="末恋"><a href="#末恋" class="headerlink" title="末恋"></a>末恋</h2><h3 id="厨师-—-北京-东馨园"><a href="#厨师-—-北京-东馨园" class="headerlink" title="厨师 — 北京 东馨园"></a>厨师 — 北京 东馨园</h3><blockquote>
<p>喜欢你<br>那双眼动人 笑声更迷人<br>愿再可轻抚你<br>那可爱面容 挽手说梦话</p>
</blockquote>
<p>从未感觉这是最后一段时光，只是感觉生活枯燥疲乏了许多，做饭，洗衣服。拖地，躺在床上玩手机游戏，还要帮她玩。噢，no！<br>生活简朴，带的香肠只够维持了半个月的肉食生活。之后每周末才能吃到肉。她也跟着吃苦，日子过得实在是朴素。</p>
<p>东馨园 — 为你吹头发，一起铺床单，周末一起买菜做饭<br>颐和园 — 苏州街，逛公园。交通太堵，你在车上睡着了，靠着我肩膀，半睡半醒的你萌到我了。<br>什刹海 — 后海，自行车，不开心。丢下你，很担心，后悔。</p>
<h2 id="诀别"><a href="#诀别" class="headerlink" title="诀别"></a>诀别</h2><blockquote>
<p>汉兵已掠地，四方楚歌声，大王已气尽，贱妾何潦生。</p>
</blockquote>
<h3 id="回龙观-—-房客"><a href="#回龙观-—-房客" class="headerlink" title="回龙观 — 房客"></a>回龙观 — 房客</h3><blockquote>
<p>灯火辉煌的街头<br>突然袭来了一阵寒流</p>
</blockquote>
<p>过来时，刚好她回去参加弟妹婚礼。<br>来时，去机场线接人。地铁站口吹了两个小时的凉风，望眼欲穿，终于等到你，我说了“终于到啦”。<br>我帮她拿起了包裹，看了我一眼，已没有往日温情。<br>生活已经变样了，他们上班，下班。打麻将，玩三国杀。我陪着玩，虽然我不会，只想陪着她。<br>看着她打牌的样子，我又不好意思打扰。看看电视，就睡觉了。<br>或许离开她太久了，似乎已经不需要我的陪伴了。</p>
<p>下班接她 — 唯独的一次独处时间，一起回去。俩人熟悉又陌生，搭乘地铁回去了。<br>日式快餐吉野家 — 味道很普通，我还说，很好吃，很不错，因为只想和你在一起，给你我能给的陪伴。<br>烤串 — 不愿意的争吵终于爆发，绝望，无语。</p>
<p>夏日再绚丽的花朵到了冬天终将枯萎。</p>
<p>第二日，时间没有停留，他也毅然决然的走了。</p>
<p>终！</p>
<h2 id="伤别离"><a href="#伤别离" class="headerlink" title="伤别离"></a>伤别离</h2><blockquote>
<p>拿着你给的照片<br>熟悉的那一条街<br>只是没了你的画面<br>我们回不到那天</p>
</blockquote>
<p>你若安好，便是晴天！<br>还记得我送你的另一半吗？还在吗？</p>
<h2 id="下一站"><a href="#下一站" class="headerlink" title="下一站"></a>下一站</h2>]]></content>
      <categories>
        <category>Emotion</category>
      </categories>
      <tags>
        <tag>September</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯SNG面试经历</title>
    <url>/2016/04/11/%E8%85%BE%E8%AE%AFSNG%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<h3 id="一面（回忆版）"><a href="#一面（回忆版）" class="headerlink" title="一面（回忆版）"></a>一面（回忆版）</h3><blockquote>
<p>本来是准备等到下午六点就准备回去，因为放在那儿的简历一直躺在那儿，没人要。早晨10点钟过来，到了霸面区，hr姐姐说，霸面的同学简历放在这儿，我穿过人群过去一看，好多简历，各种漂亮的简历。<br>晚上5点45分有个面试官过来看了下后台开发的简历，晒走了两份，我一看，哎，命中了，有点欣喜。<br>大约6点钟，经过签到，然后去等待叫号。</p>
</blockquote>
<p>面试开始了，首先自我介绍。<br>面试官很年轻，一开始在填写我的信息。然后说他们那个系统很烂，然后不是他开发的，所以很无语。</p>
<ol>
<li>你最熟悉的语言是什么？为什么选择java,哪一点最吸引你！</li>
<li>Java语言的优缺点？</li>
<li>Java的特性</li>
<li>SSH三个分别是什么东西？struts负责那一部分，Spring干嘛的，hibernate作用。 </li>
<li>有了解过平衡二叉树，红黑树吗？查找的时间复杂度是多少，怎么来的？<br><a href="http://blog.csdn.net/niteip/article/details/11840691">平衡二叉树</a><br><a href="http://blog.csdn.net/chenhuajie123/article/details/11951777">红黑树</a></li>
<li>对排序算法熟悉吗？快排序时间复杂度，为什么是O(nlogn)<br><a href="http://blog.csdn.net/whuslei/article/details/6442755">常见排序算法</a></li>
<li>mysql的性能？<br>（一脸懵逼）然后我问是指什么，面试官说TPS，还是不知道，我说大约10w吧，之前查询数据的时候1s差不多10w条，然后面试官说，你这有依据吗<br><a href="http://f.dataguru.cn/thread-385925-1-1.html">关于qps一点资料</a></li>
<li>你对mysql的了解，说说？（好多这样开放性的题目，能说多少就说多少）mysql索引是什么数据结构<br><a href="http://my.oschina.net/u/554660/blog/284653">B+</a></li>
<li>数据库的ACID了解吗？1,2,3NF知道吗？<br><a href="http://www.cnblogs.com/CareySon/archive/2012/01/29/2331088.html">ACID</a><br><a href="http://blog.csdn.net/xuxurui007/article/details/7738330">1,2,3,BCNF</a></li>
<li>在海量数据里面选出最大的1000条数据怎么做？（内存不够）</li>
</ol>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><blockquote>
<p>在昨天晚上，实验室大部分人都走了，正在看一个人B+树博客的时候，突然手机一响，我看了下。竟然是一面过了，邀请明天10点面试，想想好激动。去大堂签到，然后等待叫号,惴惴不安。突然一个短信来了，心里一叮咚，这就开始啦。</p>
</blockquote>
<p>上楼看了找房间，房号，结果们关着。。。<br>我礼貌的敲了下们，没人。我纳闷，结果发现门旁边有个门铃，我按了两下，好像有动静，然后再按了下，门开了。</p>
<p>打了个招呼，我报了下自己的名字，是来面试的。<br>面试开始了，首先自我介绍。</p>
<ol>
<li>直接就开始聊起了项目，了解最熟悉最拿手的项目。</li>
<li>对js熟悉吗，angular js, facebook的js框架。<br><a href="http://www.apjs.net/">angular js</a><br><a href="http://reactjs.cn/react/docs/getting-started.html">React.js</a></li>
<li>项目里面有个安卓自己开发的项目，然后面试官想看看效果，刚好前几天，我把它放在我的github博客上了！</li>
<li>研究生阶段是学的什么课程，学过一些什么，知道AWS吗？</li>
<li>本科学校是什么，专业，估计面试官很看重出身吧！</li>
<li>然后面试官介绍了他们项目组是SNG,目前最业务状况和需要哪方面的人才！</li>
</ol>
<p>全程下来没有聊任何技术方面的，不知道结果如何，waiting!</p>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯OMG一面</title>
    <url>/2016/03/02/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><h4 id="首先第一个问题就是，你对你工作的城市有没有限制？"><a href="#首先第一个问题就是，你对你工作的城市有没有限制？" class="headerlink" title="首先第一个问题就是，你对你工作的城市有没有限制？"></a>首先第一个问题就是，你对你工作的城市有没有限制？</h4><ol>
<li>这个是在问你对我们事业群的位置有没有了解。比如腾讯OMG是在北京，而我目前是在广州，<br>你会觉得有点远。对于我嘛，我觉得没什么问题，毕竟我是一个人，没那么多牵挂。</li>
<li>当然如果你回答不想去北京，基本一面就结束了(一同学亲身经历)。</li>
</ol>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="你最拿手的项目是哪个？"><a href="#你最拿手的项目是哪个？" class="headerlink" title="你最拿手的项目是哪个？"></a>你最拿手的项目是哪个？</h4><p>从项目简介到项目架构来说，和使用的技术。</p>
<h4 id="你熟悉哪些前端js框架？"><a href="#你熟悉哪些前端js框架？" class="headerlink" title="你熟悉哪些前端js框架？"></a>你熟悉哪些前端js框架？</h4><p>如EXT JS,DWR,Amazi UI,Bootstrap,Angular js等等。</p>
<h4 id="你熟悉哪些除了主流数据库mysql以外的数据库"><a href="#你熟悉哪些除了主流数据库mysql以外的数据库" class="headerlink" title="你熟悉哪些除了主流数据库mysql以外的数据库"></a>你熟悉哪些除了主流数据库mysql以外的数据库</h4><p>mangodb,redis,nosql。</p>
<h4 id="MVC设计模式有什么好处？"><a href="#MVC设计模式有什么好处？" class="headerlink" title="MVC设计模式有什么好处？"></a>MVC设计模式有什么好处？</h4><p>MVC设计模式优点在于:<br>1):测试友好性(如果你需要写单元测试的话,MVC会很不错的)<br>2):可定制性(在MVC中基本上所有的东西都是可以定制的,对于某些定制性要求比较高的工作可以轻易胜任)<br>3):代码清晰(CodeBehind虽说分离的不错,但是还是有很多人直接在CodeBehind里面写SQL的)<br>4):轻量级.(没有控件,没有视图状态,没有控件状态,页面加载速度快)<br>5):对HTML的控制比较深,比如div的id之类的(好吧,ASP.NET WebForm 4.0也加深了控制允许你控制控件生成的html的id)只有对HTML的结构比较清晰才容易写脚本不是.<br>6):开源.</p>
<p>MVC的不足体现在以下几个方面：<br>1):增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。<br>2):视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。<br>3):视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。<br>4):目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。</p>
<h4 id="java语言的优劣？"><a href="#java语言的优劣？" class="headerlink" title="java语言的优劣？"></a>java语言的优劣？</h4><p>这个没答完全。<br>优点：简单性、面向对象、分布式、解释型、可靠、安全、平台无关、可移植、高性能、多线程、动态性等。<br>缺点：<br>第一: 运行速度慢，众所周知，Java程序的运行依赖于Java虚拟机，所以相对于其他语言(汇编,C,C++)编写的程序慢，因为它不是直接，执行机器码。<br>第二: 因为Java考虑到了跨平台性。所以他不能像语言<br>（例如:汇编,C) 那样更接近操作系统。也就不能和操作系统的底层打交道了。但可以通过Java的JNI<br>(即Java本地接口。顾名思义：也就是利用Java语言调用，在当前系统上 其他的程序语言 “汇编或C等”所编写的程序)技术，解决这一问题，但这只是解决了。</p>
<h4 id="如果要你重新学习php的话，你应该怎么学习它呢？"><a href="#如果要你重新学习php的话，你应该怎么学习它呢？" class="headerlink" title="如果要你重新学习php的话，你应该怎么学习它呢？"></a>如果要你重新学习php的话，你应该怎么学习它呢？</h4><p>先看看php基本语法，然后再看设计思想和框架，最后在实战中一步一步的修炼。</p>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习|逻辑回归(Logistic Regression)浅析</title>
    <url>/2020/04/01/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-Logistic-Regression-%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><h3 id="伯努利分布"><a href="#伯努利分布" class="headerlink" title="伯努利分布"></a>伯努利分布</h3><p><a href="http://www.go60.top/dsj/73.html">伯努利分布</a>，又名两点分布或者0-1分布，是一個离散型概率分布。有两种可能的结果：</p>
<ul>
<li>1 表示成功，出现的概率为 p（其中 0 &lt; p &lt; 1）</li>
<li>0 表示失败，出现的概率为 q = 1 - p。<br>也就是说除去成功，就是失败。</li>
</ul>
<h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p><a href="https://www.cnblogs.com/geo-will/p/10468253.html">线性回归</a>是利用数理统计中回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，运用十分广泛。其表达形式为<script type="math/tex">y = w'x + e</script>，e为误差服从均值为0的正态分布。</p>
<p>回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为<strong>一元线性回归分析</strong>。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为<strong>多元线性回归分析</strong>。</p>
<h2 id="理论vs实践"><a href="#理论vs实践" class="headerlink" title="理论vs实践"></a>理论vs实践</h2><blockquote>
<p>场景：射手进入训练或比赛场地后，首先观察好自己所射的靶位，以及场地上的情况和周围的环境，并针对光线、湿度、风向和风力等客观因素可能带来的影响作好思想准备。</p>
</blockquote>
<p>从场景分析，可以知道，主要是射手的经验，以及环境的相互作用，才能评估最后是否射中靶心。</p>
<h3 id="因素"><a href="#因素" class="headerlink" title="因素"></a>因素</h3><ul>
<li>包含射手距离靶心的距离x_1（x_1 \belong Z）米，光线强度x_1（x_1 \belong Z），湿度x_1（x_1 \belong Z），风向x_1（x_1 \belong Z），风力x_1（x_1 \belong Z）级。</li>
<li>能否射中红色部分靶心。射中1，射不中0</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>LR</tag>
        <tag>逻辑回归</tag>
      </tags>
  </entry>
  <entry>
    <title>重温机器学习(一)</title>
    <url>/2020/02/15/%E9%87%8D%E6%B8%A9%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><h4 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h4><h4 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h4><script type="math/tex; mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon)=1, i=1,...,n</script><p><a href="https://io-oi.me/tech/hexo-next-optimization/">https://io-oi.me/tech/hexo-next-optimization/</a><br><a href="https://www.codewoody.com/">https://www.codewoody.com/</a></p>
]]></content>
  </entry>
  <entry>
    <title>NGINX + TOMCAT配置负载均衡</title>
    <url>/2016/08/30/nginx-tomcat%E9%85%8D%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<blockquote>
<p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
</blockquote>
<script type="math/tex; mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon)=1, i=1,...,n</script><h3 id="CENTOS准备工作"><a href="#CENTOS准备工作" class="headerlink" title="CENTOS准备工作"></a>CENTOS准备工作</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install gcc automake autoconf libtool make gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment"># install pcre</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.21.tar.gz</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># tar -zxvf pcre-8.21.tar.gz</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># cd pcre-8.21</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># ./configure</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># make</span></span><br><span class="line">[root<span class="variable">@localhost</span> ]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>
<h3 id="NGINX安装和配置"><a href="#NGINX安装和配置" class="headerlink" title="NGINX安装和配置"></a>NGINX安装和配置</h3><ul>
<li><p>安装nginx</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta"># install nginx </span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># cd /</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># mkdir soft</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># cd soft</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># wget http://nginx.org/download/nginx-1.10.1.tar.gz</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># tar -xzvf nginx-1.10.1.tar.gz</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># mv nginx-1.10.1 /usr/local </span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># cd /usr/local/nginx-1.10.1</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<p>—prefix=/usr/local/nginx 代表mginx安装目录</p>
</li>
<li><p>开放端口<br>由于CENTOS默认开启防火墙，我们需要手动开放端口。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ]# /sbin/iptables -I INPUT -p tcp --dport <span class="number">80</span> -j ACCEPT</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># cd nginx/</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># vim conf/nginx.conf</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  root paul;                                                                                        </span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;                                                                                    </span><br><span class="line">                                                                                                        </span><br><span class="line"><span class="comment">#error_log  logs/error.log;                                                                             </span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;                                                                     </span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;                                                                       </span></span><br><span class="line">                                                                                                        </span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;                                                                             </span></span><br><span class="line">                                                                                                        </span><br><span class="line">                                                                                                        </span><br><span class="line"><span class="section">events</span> &#123;                                                                                                </span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;                                                                           </span><br><span class="line">&#125;                                                                                                       </span><br><span class="line">                                                                                                        </span><br><span class="line">                                                                                                        </span><br><span class="line"><span class="section">http</span> &#123;                                                                                                  </span><br><span class="line">    <span class="attribute">include</span>       mime.types;                                                                           </span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;                                                             </span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;                          </span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;                                      </span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;                                    </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;                                                                 </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;                                                                                 </span><br><span class="line">    <span class="comment">#tcp_nopush     on;                                                                                 </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#keepalive_timeout  0;                                                                              </span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;                                                                              </span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;                                                                                           </span><br><span class="line">    <span class="comment">#   upstream tomcatCluster&#123;                                                                         </span></span><br><span class="line">    <span class="comment">#   server 127.0.0.1:8080 weight=1;                                                                 </span></span><br><span class="line">    <span class="comment">#&#125;                                                                                                  </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="attribute">upstream</span> tomcatCluster &#123; <span class="comment"># (1).随便命名   </span></span><br><span class="line">        <span class="comment"># 可设置多个tomcat服务器  转发权重                                                               </span></span><br><span class="line">        <span class="attribute">server</span>          <span class="number">127.0.0.1:8080</span>  weight=<span class="number">1</span>;      </span><br><span class="line">        <span class="comment"># server          127.0.0.1:8081  weight=2;                                                 </span></span><br><span class="line">    &#125;                                                                                                   </span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="section">server</span> &#123;                                                                                            </span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;                    </span><br><span class="line">    <span class="comment"># (3)localhost可以不改                                                                               </span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost;                                                                         </span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="comment">#charset koi8-r;                                                                                </span></span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;                                                        </span></span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="comment">#location / &#123;                                                                                   </span></span><br><span class="line">        <span class="comment">#    root   html;                                                                               </span></span><br><span class="line">        <span class="comment">#    index  index.html index.htm;                                                               </span></span><br><span class="line">        <span class="comment">#&#125;                                                                                              </span></span><br><span class="line">        <span class="attribute">location</span> / &#123;     </span><br><span class="line">    <span class="comment">#(2)对于上面的(1)处的名字                                                                           </span></span><br><span class="line">                <span class="attribute">proxy_pass</span>       http://tomcatCluster;                                                  </span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host      <span class="variable">$host</span>;                                                       </span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;                                                </span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;                            </span><br><span class="line">                <span class="attribute">proxy_redirect</span> default ;                                                                </span><br><span class="line">                <span class="attribute">proxy_redirect</span>  default;                                                                </span><br><span class="line">        &#125;                                                                                               </span><br><span class="line">        <span class="comment">#error_page  404              /404.html;                                                        </span></span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="comment">#redirect server error pages to the static page /50x.html                                       </span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;                                                        </span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;                                                                          </span><br><span class="line">            <span class="attribute">root</span>   html;                                                                                </span><br><span class="line">        &#125;                                                                                               </span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .(jsp|jspx|do)?$</span> &#123;                                                                   </span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;                                                            </span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;                                                </span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;                            </span><br><span class="line">                <span class="attribute">proxy_pass</span> http://tomcatCluster;                                                        </span><br><span class="line">        &#125;                                                                                               </span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma</span></span><br><span class="line"><span class="regexp"></span>        &#123;  <span class="attribute">expires</span> <span class="number">15d</span>; &#125;                                                                               </span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span>                                                                        </span><br><span class="line">            &#123; <span class="attribute">expires</span> <span class="number">1h</span>; &#125;                                                                             </span><br><span class="line">                                                                                                        </span><br><span class="line">        &#125;                                                                                               </span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80                                     </span></span><br><span class="line">        <span class="comment">#                                                                                               </span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;                                                                            </span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;                                                             </span></span><br><span class="line">        <span class="comment">#&#125;                                                                                              </span></span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000                            </span></span><br><span class="line">        <span class="comment">#                                                                                               </span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;                                                                            </span></span><br><span class="line">        <span class="comment">#    root           html;                                                                       </span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;                                                             </span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;                                                                  </span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;                              </span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;                                                             </span></span><br><span class="line">        <span class="comment">#&#125;                                                                                              </span></span><br><span class="line">                                                                                                        </span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root                                     </span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one                                                                      </span></span><br><span class="line">        <span class="comment">#                                                                                               </span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;                                                                             </span></span><br><span class="line">        <span class="comment">#    deny  all;                                                                                 </span></span><br><span class="line">        <span class="comment">#&#125;                                                                                              </span></span><br><span class="line">    &#125;                                                                                                   </span><br><span class="line">                                                                                                        </span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration                        </span></span><br><span class="line">    <span class="comment">#                                                                                                   </span></span><br><span class="line">    <span class="comment">#server &#123;                                                                                           </span></span><br><span class="line">    <span class="comment">#    listen       8000;                                                                             </span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;                                                                    </span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;                                                   </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#    location / &#123;                                                                                   </span></span><br><span class="line">    <span class="comment">#        root   html;                                                                               </span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;                                                               </span></span><br><span class="line">    <span class="comment">#    &#125;                                                                                              </span></span><br><span class="line">    <span class="comment">#&#125;                                                                                                  </span></span><br><span class="line">                                                                                                        </span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment"># HTTPS server                                                                                      </span></span><br><span class="line">    <span class="comment">#                                                                                                   </span></span><br><span class="line">    <span class="comment">#server &#123;                                                                                           </span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;                                                                          </span></span><br><span class="line">    <span class="comment">#    server_name  localhost;                                                                        </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;                                                                 </span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;                                                                 </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;                                                            </span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;                                                                       </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;                                                                 </span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;                                                                 </span></span><br><span class="line">                                                                                                        </span><br><span class="line">    <span class="comment">#    location / &#123;                                                                                   </span></span><br><span class="line">    <span class="comment">#        root   html;                                                                               </span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;                                                               </span></span><br><span class="line">    <span class="comment">#    &#125;                                                                                              </span></span><br><span class="line">    <span class="comment">#&#125;                                                                                                  </span></span><br></pre></td></tr></table></figure>
<h3 id="TOMCAT"><a href="#TOMCAT" class="headerlink" title="TOMCAT"></a>TOMCAT</h3><ul>
<li><p>安装tomcat</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install tomcat</span></span><br><span class="line">[root@localhost ]<span class="comment"># cd /soft</span></span><br><span class="line">[root@localhost ]<span class="comment"># wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.70/bin/apache-[root<span class="doctag">@localhost</span> ]# tomcat-7.0.70.tar.gz</span></span><br><span class="line">[root@localhost ]<span class="comment"># tar xzvf apache-tomcat-6.0.41.tar.gz</span></span><br><span class="line">[root@localhost ]<span class="comment"># mv apache-tomcat-6.0.41/ /usr/local</span></span><br><span class="line">[root@localhost ]<span class="comment"># cd /usr/local/apache-tomcat-6.0.41</span></span><br><span class="line">[root@localhost ]<span class="comment"># sh bin/startup.sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>开放端口<br>如果修改了conf/server.xml文件启动端口，则相应的nginx.conf和下面的8080都要改变</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ]# /sbin/iptables -I INPUT -p tcp --dport <span class="number">8080</span> -j ACCEPT</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>如果出现下面的信息代表启动成功<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Using CATALINA_BASE:   <span class="regexp">/usr/</span>local/apache-tomcat-<span class="number">7.0</span>.<span class="number">70</span></span><br><span class="line">Using CATALINA_HOME:   <span class="regexp">/usr/</span>local/apache-tomcat-<span class="number">7.0</span>.<span class="number">70</span></span><br><span class="line">Using CATALINA_TMPDIR: <span class="regexp">/usr/</span>local<span class="regexp">/apache-tomcat-7.0.70/</span>temp</span><br><span class="line">Using JRE_HOME:        /</span><br><span class="line">Using <span class="keyword">CLASSPATH</span>:       <span class="regexp">/usr/</span>local<span class="regexp">/apache-tomcat-7.0.70/</span>bin<span class="regexp">/bootstrap.jar:/u</span>sr<span class="regexp">/local/</span>apache-tomcat-<span class="number">7.0</span>.<span class="number">70</span><span class="regexp">/bin/</span>tomcat-juli.jar</span><br><span class="line">Using CATALINA_PID:    <span class="regexp">/usr/</span>local<span class="regexp">/apache-tomcat-7.0.70/</span>logs/tomcat.pid</span><br><span class="line">Existing PID <span class="keyword">file</span> found during start.</span><br><span class="line">Removing/clearing stale PID <span class="keyword">file</span>.</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># ./sbin/nginx -s reload  # 重启nginx</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># vi [filename] # 新建文件</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># &gt; [filename] # 清空文件内容</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># ps -ef|grep tomcat #查询进程</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># kill -9 [pid] #杀死进程</span></span><br><span class="line">[root<span class="symbol">@localhost</span> ]<span class="meta"># chmod +xw [filename] # 新增执行和写入权限</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>NGINX</tag>
        <tag>TOMCAT</tag>
      </tags>
  </entry>
  <entry>
    <title>hive 保序concat</title>
    <url>/2020/09/11/hive-%E4%BF%9D%E5%BA%8Fconcat/</url>
    <content><![CDATA[<h3 id="hive保序concat"><a href="#hive保序concat" class="headerlink" title="hive保序concat"></a>hive保序concat</h3><blockquote>
<p>品类里面取TOP2并按score分值连接成字符串</p>
</blockquote>
<ol>
<li>row_number() 首先要排序。</li>
<li>where rank &lt; N 其次要进行过滤。<br>以上两步缺一不可</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    uid,</span><br><span class="line">    prefer_type,</span><br><span class="line">    <span class="keyword">sum</span>(watch_proba) <span class="keyword">as</span> watch_proba,</span><br><span class="line">    <span class="keyword">concat_ws</span>(<span class="string">&quot;;&quot;</span>, collect_list(item)) <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        uid,</span><br><span class="line">        gt,</span><br><span class="line">        prefer_type,</span><br><span class="line">        watch_proba,</span><br><span class="line">        watch_proba_normalize,</span><br><span class="line">        <span class="keyword">concat</span>(gt, <span class="string">&quot;:&quot;</span>, <span class="keyword">substr</span>(<span class="keyword">cast</span>(watch_proba_normalize <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">32</span>,<span class="number">30</span>)), <span class="number">0</span>, <span class="number">6</span>)) <span class="keyword">as</span> item, <span class="comment">-- 排除科学计数法，小数分值截断</span></span><br><span class="line">        row_number() <span class="keyword">over</span> ( <span class="keyword">partition</span> <span class="keyword">by</span> uid, prefer_type <span class="keyword">order</span> <span class="keyword">by</span> watch_proba <span class="keyword">desc</span> ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">            uid,</span><br><span class="line">            gt,</span><br><span class="line">            prefer_type,</span><br><span class="line">            watch_proba,</span><br><span class="line">            watch_proba / <span class="keyword">sum</span>(watch_proba) <span class="keyword">over</span> ( <span class="keyword">partition</span> <span class="keyword">by</span> uid, prefer_type ) <span class="keyword">as</span> watch_proba_normalize <span class="comment">-- 归一化</span></span><br><span class="line">        <span class="keyword">from</span> recom_app.prefer_type</span><br><span class="line">    ) t11</span><br><span class="line">    <span class="keyword">where</span> watch_proba_normalize &gt;= <span class="number">0.0001</span></span><br><span class="line">) t12</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rank</span> &lt;= <span class="number">2</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> uid, prefer_type</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Spark调优指南</title>
    <url>/2020/09/11/Spark%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="spark-yarn-executor-memoryOverhead"><a href="#spark-yarn-executor-memoryOverhead" class="headerlink" title="spark.yarn.executor.memoryOverhead"></a>spark.yarn.executor.memoryOverhead</h3><blockquote>
<p> ExecutorLostFailure (executor 52 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 11.0 GB of 11 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.</p>
</blockquote>
<p>emoryOverhead是JVM进程中除Java堆以外占用的空间大小，包括方法区（永久代）、Java虚拟机栈、本地方法栈、JVM进程本身所用的内存、直接内存（Direct Memory）等。 通过spark.yarn.executor.memoryOverhead设置，单位MB。如果Java堆或者永久代的内存不足，则会产生各种OOM异常，executor会被结束。 在Java堆以外的JVM进程内存占用较多的情况下，应该将MemoryOverhead设置为一个足够大的值，以防JVM进程因实际占用的内存超标而被kill。</p>
<ul>
<li><code>spark-submit --conf spark.yarn.executor.memoryOverhead=10G</code></li>
<li>spark里面设置 <code>`spark.conf.set(&quot;spark.yarn.executor.memoryOverhead&quot;, &quot;10G&quot;)</code></li>
</ul>
<h3 id="spark-sql-caseSensitive"><a href="#spark-sql-caseSensitive" class="headerlink" title="spark.sql.caseSensitive"></a>spark.sql.caseSensitive</h3><blockquote>
<p>spark在读取json时候<code>spark.read.json(dataPath).toDF()</code>会自动inferschema(推断类型)，可能有些json的key写的不标准，比如同时存在Uid和uid就会解析错误。</p>
<ul>
<li>在spark程序里面设置 spark.conf.set(“spark.sql.caseSensitive”, “true”)</li>
</ul>
</blockquote>
<h3 id="spark-sql-shuffle-partitions"><a href="#spark-sql-shuffle-partitions" class="headerlink" title="spark.sql.shuffle.partitions"></a>spark.sql.shuffle.partitions</h3><blockquote>
<p>数据倾斜的时候，通过设置distribute by task numer, 重新shuffle数据均衡</p>
<ul>
<li>spark.conf.set(“spark.sql.shuffle.partitions”, 800)</li>
<li>spark.conf.set(“spark.default.parallelism”, 800)</li>
</ul>
</blockquote>
<h3 id="spark-sql-parquet-compression-codec"><a href="#spark-sql-parquet-compression-codec" class="headerlink" title="spark.sql.parquet.compression.codec"></a>spark.sql.parquet.compression.codec</h3><blockquote>
<p>lzo压缩文件spark自动解压</p>
<ul>
<li>spark.conf.set(“spark.sql.parquet.compression.codec”, “lzo”)</li>
</ul>
</blockquote>
<h3 id="设置spark-driver-extraJavaOptions-Dhdp-version"><a href="#设置spark-driver-extraJavaOptions-Dhdp-version" class="headerlink" title="设置spark.driver.extraJavaOptions -Dhdp.version"></a>设置spark.driver.extraJavaOptions -Dhdp.version</h3><blockquote>
<p>Exception in thread “main” java.lang.IllegalStateException: hdp.version is not set while running Spark under HDP</p>
<ul>
<li>spark.conf.set(“spark.driver.extraJavaOptions -Dhdp.version”, “3.1.0.0-78”)</li>
<li>spark.conf.set(“spark.yarn.am.extraJavaOptions -Dhdp.version”, “3.1.0.0-78”)<br>以上均可以通过<code>--conf</code>设置</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>test perm</title>
    <url>/2020/09/11/test-perm/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
